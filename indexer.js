// indexer.js

import { Telegraf } from 'telegraf';
import ytdl from 'youtube-dl-exec';
import path from 'path';
import fs from 'fs/promises';
import { fileURLToPath } from 'url';
import retry from 'async-retry';
import pLimit from 'p-limit';
import { createClient } from 'redis';
import { cacheTrack, findCachedTrack, pool } from './db.js';

const BOT_TOKEN = process.env.BOT_TOKEN;
const STORAGE_CHANNEL_ID = process.env.STORAGE_CHANNEL_ID;
const REDIS_URL = process.env.REDIS_URL;
const PARALLEL_LIMIT = 4;
const RETRY_COUNT = 3;
const CYCLE_PAUSE_MS = 60 * 60 * 1000;
const MAX_PLAYLIST_TRACKS = 10;

const redis = createClient({ url: REDIS_URL });
redis.on('error', err => console.error('‚ùå Redis –æ—à–∏–±–∫–∞:', err));

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const cacheDir = path.join(__dirname, 'cache');

if (!BOT_TOKEN || !STORAGE_CHANNEL_ID || !REDIS_URL) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);

const withTimeout = (promise, ms, errorMsg) =>
  Promise.race([
    promise,
    new Promise((_, reject) => setTimeout(() => reject(new Error(errorMsg)), ms)),
  ]);

async function checkBotPermissions() {
try {
const chat = await bot.telegram.getChat(STORAGE_CHANNEL_ID);
const member = await bot.telegram.getChatMember(chat.id, bot.botInfo.id);

console.log(`‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É ${STORAGE_CHANNEL_ID}`);
console.log("–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:", {
can_send_messages: member.can_send_messages,
can_send_media_messages: member.can_send_media_messages,
});

if (!member.can_send_messages || !member.can_send_media_messages) {
throw new Error("–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π/–º–µ–¥–∏–∞");
}
} catch (err) {
console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: ${err.message}`);
process.exit(1);
}
}

async function getUrlsToIndex() {
  console.log('[Indexer] –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤...');
  try {
    const { rows } = await pool.query(`
      SELECT url, COUNT(url) as download_count
      FROM downloads_log
      WHERE url NOT IN (SELECT url FROM track_cache)
      AND url LIKE '%soundcloud.com%'
      GROUP BY url
      ORDER BY download_count DESC
      LIMIT 20;
    `);
    console.log(`[Indexer] –ü–æ–ª—É—á–µ–Ω–æ ${rows.length} URL.`);
    return rows.map(row => row.url);
  } catch (err) {
    console.error('[Indexer] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ URL:', err);
    return [];
  }
}

function parseMetadata(info) {
  let rawTitle = (info.title || info.track?.title || '').trim().replace(/```math
.*?```/gi, '').slice(0, 100) || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
  let rawUploader = (info.uploader || info.user?.username || '').trim().slice(0, 100) || '–ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è';
  const trackName = rawTitle;
  const uploader = rawTitle.toLowerCase().includes(rawUploader.toLowerCase()) ? '' : rawUploader;
  return { trackName, uploader };
}

async function processUrl(url, depth = 0) {
  if (depth > 1) return 'skipped';
  let tempFilePath = null;

  return retry(async () => {
    try {
      const cached = await findCachedTrack(url);
      if (cached) {
        console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫ (–∫—ç—à): ${url}`);
        return 'cached';
      }

      console.log(`[Indexer] –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é: ${url}`);
      const info = await withTimeout(
        ytdl(url, { dumpSingleJson: true, noPlaylist: true, format: 'bestaudio' }),
        45000,
        `–¢–∞–π–º–∞—É—Ç info –¥–ª—è ${url}`
      );

      console.log(`[Indexer] Info: _type=${info._type}, entries=${info.entries?.length || 0}, duration=${info.duration}`);

      if (info._type === 'playlist' || Array.isArray(info.entries) && info.entries.length > 0) {
        console.log(`[Indexer] –ü–ª–µ–π–ª–∏—Å—Ç: ${url} —Å ${info.entries.length} —Ç—Ä–µ–∫–∞–º–∏. –û–±—Ä–∞–±–æ—Ç–∫–∞...`);
        const limit = pLimit(PARALLEL_LIMIT);
        const tasks = info.entries.slice(0, MAX_PLAYLIST_TRACKS).map(entry => 
          limit(() => processUrl(entry.url || entry.webpage_url || entry.original_url, depth + 1))
        );
        const results = await Promise.all(tasks);
        const successCount = results.filter(r => r === 'success').length;
        console.log(`[Indexer] –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${successCount} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞`);
        return successCount > 0 ? 'success' : 'skipped';
      }

      if (!info || !info.url) {
        console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π info/URL –¥–ª—è ${url}`);
        return 'skipped';
      }

      const { trackName, uploader } = parseMetadata(info);

      await fs.mkdir(cacheDir, { recursive: true });
      tempFilePath = path.join(cacheDir, `${info.id || Date.now()}.mp3`);

      let fileExists = await fs.access(tempFilePath).then(() => true).catch(() => false);
      if (!fileExists) {
        await withTimeout(
          ytdl(info.url, {
            output: tempFilePath,
            extractAudio: true,
            audioFormat: 'mp3',
            embedMetadata: true,
            audioQuality: 0,
          }),
          120000,
          `–¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è ${url}`
        );
        fileExists = await fs.access(tempFilePath).then(() => true).catch(() => false);
      }

      if (!fileExists || (await fs.stat(tempFilePath)).size === 0) throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π');

      const message = await retry(async () => {
        return withTimeout(
          bot.telegram.sendAudio(STORAGE_CHANNEL_ID, { source: await fs.open(tempFilePath, 'r') }, { title: trackName, performer: uploader }),
          45000,
          `–¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ${url}`
        );
      }, { retries: RETRY_COUNT, minTimeout: 5000 });

      if (!message?.audio?.file_id) throw new Error('–ù–µ—Ç file_id –æ—Ç Telegram');

      await cacheTrack(url, message.audio.file_id, trackName);
      console.log(`‚úÖ [Indexer] –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${trackName} –æ—Ç ${uploader}`);
      return 'success';
    } catch (err) {
      if (err.message.includes('404') || err.message.includes('—Ç–∞–π–º–∞—É—Ç')) {
        console.warn(`[Indexer] –ü—Ä–æ–ø—É—Å–∫ URL ${url} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${err.message}`);
        return 'skipped';
      }
      throw err;
    }
  }, { retries: RETRY_COUNT, minTimeout: 5000 }).finally(async () => {
    if (tempFilePath) await fs.unlink(tempFilePath).catch(() => {});
  });
}

async function main() {
  await redis.connect();
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞...');
  await checkBotPermissions();
  await fs.mkdir(cacheDir, { recursive: true });

  const shutdown = async () => {
    console.log('[Indexer] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
    await fs.rm(cacheDir, { recursive: true, force: true });
    await redis.quit();
    await pool.end();
    process.exit(0);
  };
  process.on('SIGTERM', shutdown);
  process.on('SIGINT', shutdown);

  while (true) {
    try {
      const lastCycle = await redis.get('indexer_last_cycle');
      const now = Date.now();
      if (lastCycle && now - Number(lastCycle) < CYCLE_PAUSE_MS) {
        const waitMs = CYCLE_PAUSE_MS - (now - Number(lastCycle));
        console.log(`[Indexer] –ñ–¥—É ${Math.ceil(waitMs / 60000)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞.`);
        await new Promise(resolve => setTimeout(resolve, waitMs));
        continue;
      }

      const urls = await getUrlsToIndex();
      if (urls.length === 0) {
        console.log('[Indexer] –ù–µ—Ç –Ω–æ–≤—ã—Ö URL.');
        continue;
      }

      console.log(`[Indexer] –û–±—Ä–∞–±–æ—Ç–∫–∞ ${urls.length} URL.`);
      const limit = pLimit(PARALLEL_LIMIT);
      const tasks = urls.map(url => limit(() => processUrl(url)));
      const results = await Promise.all(tasks);

      const stats = results.reduce((acc, res) => ({ ...acc, [res]: (acc[res] || 0) + 1 }), { total: urls.length });
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${JSON.stringify(stats)}`);

      await redis.set('indexer_last_cycle', now);
    } catch (err) {
      console.error('[Indexer] –û—à–∏–±–∫–∞:', err);
    } finally {
      await new Promise(resolve => setTimeout(resolve, CYCLE_PAUSE_MS));
    }
  }
}

main().catch(err => {
  console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});