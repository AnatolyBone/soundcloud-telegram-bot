// indexer.js

import { Telegraf } from 'telegraf';
import ytdl from 'youtube-dl-exec';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { cacheTrack, findCachedTrack, pool } from './db.js';

const BOT_TOKEN = process.env.BOT_TOKEN;
const STORAGE_CHANNEL_ID = process.env.STORAGE_CHANNEL_ID;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const cacheDir = path.join(__dirname, 'cache');

if (!BOT_TOKEN || !STORAGE_CHANNEL_ID) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç BOT_TOKEN –∏–ª–∏ STORAGE_CHANNEL_ID');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);

// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL'–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
async function getUrlsToIndex() {
  console.log('[Indexer] –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ª–æ–≥–æ–≤...');
  const { rows } = await pool.query(`
    SELECT url, COUNT(url) as download_count
    FROM downloads_log
    WHERE url NOT IN (SELECT url FROM track_cache)
    GROUP BY url
    ORDER BY download_count DESC
    LIMIT 20;
  `);
  return rows.map(row => row.url);
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω URL
async function processUrl(url) {
  let tempFilePath = null;

  try {
    const isCached = await findCachedTrack(url);
    if (isCached) {
      console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: ${url} —É–∂–µ –≤ –∫—ç—à–µ.`);
      return 'cached';
    }

    console.log(`[Indexer] –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é: ${url}`);
    const info = await ytdl(url, { dumpSingleJson: true });

    if (!info || info._type === 'playlist' || Array.isArray(info.entries)) {
      console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: ${url} ‚Äî —ç—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç.`);
      return 'skipped';
    }

    const trackName = (info.title || 'track').slice(0, 100);
    const uploader = info.uploader || 'SoundCloud';

    if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir, { recursive: true });
    tempFilePath = path.join(cacheDir, `${info.id || Date.now()}.mp3`);

    await ytdl(url, {
      output: tempFilePath,
      extractAudio: true,
      audioFormat: 'mp3',
      embedMetadata: true,
      postprocessorArgs: `-metadata artist="${uploader}" -metadata title="${trackName}"`
    });

    if (!fs.existsSync(tempFilePath)) throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω');

    const message = await bot.telegram.sendAudio(
      STORAGE_CHANNEL_ID,
      { source: fs.createReadStream(tempFilePath) },
      {
        title: trackName,
        performer: uploader
      }
    );

    if (message?.audio?.file_id) {
      await cacheTrack(url, message.audio.file_id, trackName);
      console.log(`‚úÖ [Indexer] –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω: ${trackName}`);
      return 'success';
    } else {
      console.warn(`‚ö†Ô∏è [Indexer] Telegram –Ω–µ –≤–µ—Ä–Ω—É–ª file_id –¥–ª—è ${url}`);
      return 'error';
    }
  } catch (err) {
    console.error(`‚ùå [Indexer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${url}:`, err?.stderr || err?.stack || err);
    return 'error';
  } finally {
    if (tempFilePath && fs.existsSync(tempFilePath)) {
      await fs.promises.unlink(tempFilePath).catch(() => {});
    }
  }
}

// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞-–ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞...');
  if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir, { recursive: true });

  while (true) {
    try {
      const urls = await getUrlsToIndex();

      const stats = {
        total: urls.length,
        cached: 0,
        success: 0,
        failed: 0
      };

      if (urls.length > 0) {
        console.log(`[Indexer] –ù–∞–π–¥–µ–Ω–æ ${urls.length} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.`);

        for (const url of urls) {
          const result = await processUrl(url);

          if (result === 'cached') stats.cached++;
          else if (result === 'success') stats.success++;
          else stats.failed++;

          await new Promise(resolve => setTimeout(resolve, 5000)); // –ø–∞—É–∑–∞ 5 —Å–µ–∫
        }

        console.log(`üìä [–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω]
–í—Å–µ–≥–æ URL:     ${stats.total}
–í –∫—ç—à–µ:        ${stats.cached}
–£—Å–ø–µ—à–Ω–æ:       ${stats.success}
–û—à–∏–±–æ–∫:        ${stats.failed}`);
      } else {
        console.log('[Indexer] –ù–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –Ω–µ—Ç.');
      }
    } catch (e) {
      console.error('[Indexer] –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:', e);
    }

    console.log('[Indexer] –ü–∞—É–∑–∞ –Ω–∞ 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ—Ö–æ–¥–æ–º.');
    await new Promise(resolve => setTimeout(resolve, 60 * 60 * 1000)); // 1 —á–∞—Å
  }
}

main().catch(err => {
  console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞:', err?.stack || err);
  process.exit(1);
});