// indexer.js

import { Telegraf } from 'telegraf';
import ytdl from 'youtube-dl-exec';
import path from 'path';
import fs from 'fs/promises'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–∏—Å—ã –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
import { fileURLToPath } from 'url';
import { cacheTrack, findCachedTrack, pool } from './db.js';

const BOT_TOKEN = process.env.BOT_TOKEN;
const STORAGE_CHANNEL_ID = process.env.STORAGE_CHANNEL_ID;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const cacheDir = path.join(__dirname, 'cache');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!BOT_TOKEN || !STORAGE_CHANNEL_ID) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç BOT_TOKEN –∏–ª–∏ STORAGE_CHANNEL_ID');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–æ–º–∏—Å–æ–≤
const withTimeout = (promise, ms, errorMsg) =>
  Promise.race([
    promise,
    new Promise((_, reject) => setTimeout(() => reject(new Error(errorMsg)), ms)),
  ]);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ URL –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
async function getUrlsToIndex() {
  console.log('[Indexer] –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ª–æ–≥–æ–≤...');
  try {
    const { rows } = await pool.query(`
      SELECT url, COUNT(url) as download_count
      FROM downloads_log
      WHERE url NOT IN (SELECT url FROM track_cache)
      GROUP BY url
      ORDER BY download_count DESC
      LIMIT 20;
    `);
    return rows.map(row => row.url);
  } catch (err) {
    console.error('[Indexer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL:', err);
    return [];
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ URL
async function processUrl(url) {
  let tempFilePath = null;
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    const cached = await findCachedTrack(url);
    if (cached) {
      console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: ${url} —É–∂–µ –≤ –∫—ç—à–µ —Å file_id: ${cached.file_id}`);
      return 'cached';
    }

    console.log(`[Indexer] –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é: ${url}`);
    const info = await withTimeout(
      ytdl(url, { dumpSingleJson: true }),
      30000, // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
      `–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è ${url}`
    );

    if (!info || info._type === 'playlist' || Array.isArray(info.entries)) {
      console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: ${url} ‚Äî —ç—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç`);
      return 'skipped';
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const rawTitle = (info.title || '').trim() || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const rawUploader = (info.uploader || '').trim() || '–ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è';
    const titleHasUploader = rawTitle.toLowerCase().includes(rawUploader.toLowerCase());
    const trackName = rawTitle.slice(0, 100);
    const uploader = titleHasUploader ? '' : rawUploader.slice(0, 100);

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    await fs.mkdir(cacheDir, { recursive: true });
    tempFilePath = path.join(cacheDir, `${info.id || Date.now()}.mp3`);

    await withTimeout(
      ytdl(url, {
        output: tempFilePath,
        extractAudio: true,
        audioFormat: 'mp3',
        embedMetadata: true,
        postprocessorArgs: `-metadata artist="${uploader}" -metadata title="${trackName}"`,
      }),
      60000, // –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥
      `–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è ${url}`
    );

    const fileExists = await fs.access(tempFilePath).then(() => true).catch(() => false);
    if (!fileExists) throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    const message = await withTimeout(
      bot.telegram.sendAudio(
        STORAGE_CHANNEL_ID,
        { source: await fs.open(tempFilePath, 'r') },
        { title: trackName, ...(uploader ? { performer: uploader } : {}) }
      ),
      30000,
      `–¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ${url}`
    );

    if (!message?.audio?.file_id) throw new Error('Telegram –Ω–µ –≤–µ—Ä–Ω—É–ª file_id');

    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    await cacheTrack(url, message.audio.file_id, trackName);
    console.log(`‚úÖ [Indexer] –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω: ${trackName}`);
    return 'success';
  } catch (err) {
    console.error(`‚ùå [Indexer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${url}:`, err.message || err);
    return 'error';
  } finally {
    if (tempFilePath) {
      await fs.unlink(tempFilePath).catch(err =>
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${tempFilePath}:`, err)
      );
    }
  }
}

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
async function processBatch(urls, concurrency = 3) {
  const results = { cached: 0, success: 0, failed: 0 };
  for (let i = 0; i < urls.length; i += concurrency) {
    const batch = urls.slice(i, i + concurrency);
    const batchResults = await Promise.all(batch.map(url => processUrl(url)));
    batchResults.forEach(result => {
      if (result === 'cached') results.cached++;
      else if (result === 'success') results.success++;
      else results.failed++;
    });
  }
  return results;
}

// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞-–ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞...');
  await fs.mkdir(cacheDir, { recursive: true });

  while (true) {
    try {
      const urls = await getUrlsToIndex();
      if (urls.length === 0) {
        console.log('[Indexer] –ù–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –Ω–µ—Ç.');
      } else {
        console.log(`[Indexer] –ù–∞–π–¥–µ–Ω–æ ${urls.length} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.`);
        const stats = await processBatch(urls, 3); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 3 URL –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        console.log(`üìä [–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω]
–í—Å–µ–≥–æ URL:     ${urls.length}
–í –∫—ç—à–µ:        ${stats.cached}
–£—Å–ø–µ—à–Ω–æ:       ${stats.success}
–û—à–∏–±–æ–∫:        ${stats.failed}`);
      }
    } catch (err) {
      console.error('[Indexer] –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:', err);
    }
    console.log('[Indexer] –ü–∞—É–∑–∞ –Ω–∞ 1 —á–∞—Å...');
    await new Promise(resolve => setTimeout(resolve, 60 * 60 * 1000));
  }
}

main().catch(err => {
  console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});