// indexer.js (–ë–æ—Ç-–ø–∞—É–∫)

import { Telegraf } from 'telegraf';
import ytdl from 'youtube-dl-exec';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { cacheTrack, findCachedTrack, pool } from './db.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ DB-—Ñ—É–Ω–∫—Ü–∏–∏

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const STORAGE_CHANNEL_ID = process.env.STORAGE_CHANNEL_ID; // ID –≤–∞—à–µ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const cacheDir = path.join(__dirname, 'cache');

if (!BOT_TOKEN || !STORAGE_CHANNEL_ID) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç BOT_TOKEN –∏–ª–∏ STORAGE_CHANNEL_ID');
    process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL'–æ–≤ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.
 */
async function getUrlsToIndex() {
    console.log('[Indexer] –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ª–æ–≥–æ–≤...');
    const { rows } = await pool.query(`
        SELECT url, COUNT(url) as download_count
        FROM downloads_log
        WHERE url NOT IN (SELECT url FROM track_cache)
        GROUP BY url
        ORDER BY download_count DESC
        LIMIT 20;
    `);
    return rows.map(row => row.url);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω URL: —Å–∫–∞—á–∏–≤–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç file_id.
 */
async function processUrl(url) {
    let tempFilePath = null;
    try {
        const isCached = await findCachedTrack(url);
        if (isCached) {
            console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: ${url} —É–∂–µ –≤ –∫—ç—à–µ.`);
            return;
        }

        console.log(`[Indexer] –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é: ${url}`);
        const info = await ytdl(url, { dumpSingleJson: true });
        if (!info || Array.isArray(info.entries)) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã

        // <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ü–æ–ª—É—á–∞–µ–º –∏ –∏–º—è, –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è >>>
        const trackName = (info.title || 'track').slice(0, 100);
        const uploader = info.uploader || 'SoundCloud'; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        
        tempFilePath = path.join(cacheDir, `${info.id || Date.now()}.mp3`);
        
        // <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ MP3-—Ñ–∞–π–ª (—Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞) >>>
        await ytdl(url, { 
            output: tempFilePath, 
            extractAudio: true, 
            audioFormat: 'mp3',
            embedMetadata: true, // –í–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            postprocessorArgs: `-metadata artist="${uploader}" -metadata title="${trackName}"`
        });

        if (!fs.existsSync(tempFilePath)) throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω');

        // <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ >>>
        const message = await bot.telegram.sendAudio(
            STORAGE_CHANNEL_ID, 
            { source: fs.createReadStream(tempFilePath) }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º stream –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            { // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
                title: trackName,
                performer: uploader
                // –ú—ã –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º 'caption', —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            }
        );

        if (message?.audio?.file_id) {
            await cacheTrack(url, message.audio.file_id, trackName);
            console.log(`‚úÖ [Indexer] –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω: ${trackName}`);
        }
    } catch (err) {
        console.error(`‚ùå [Indexer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${url}:`, err.stderr || err.message);
    } finally {
        if (tempFilePath && fs.existsSync(tempFilePath)) {
            await fs.promises.unlink(tempFilePath).catch(() => {});
        }
    }
}

/**
 * –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞.
 */
async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞-–ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞...');
    if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

    while (true) {
        const urls = await getUrlsToIndex();
        if (urls.length > 0) {
            console.log(`[Indexer] –ù–∞–π–¥–µ–Ω–æ ${urls.length} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.`);
            for (const url of urls) {
                await processUrl(url);
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                await new Promise(resolve => setTimeout(resolve, 5000)); // 5 —Å–µ–∫—É–Ω–¥
            }
        } else {
            console.log('[Indexer] –ù–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –Ω–µ—Ç.');
        }

        console.log('[Indexer] –ü–∞—É–∑–∞ –Ω–∞ 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ—Ö–æ–¥–æ–º.');
        await new Promise(resolve => setTimeout(resolve, 60 * 60 * 1000)); // –ü–∞—É–∑–∞ 1 —á–∞—Å
    }
}

main().catch(err => {
    console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞:", err);
    process.exit(1);
});