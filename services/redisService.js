// services/redisService.js

import { createClient } from 'redis';

class RedisService {
  constructor() {
    this.client = null;
  }

  async connect() {
    if (this.client) {
      return this.client; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    }
    
    // <<< –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø >>>
    // Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ REDIS_URL.
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    const redisUrl = process.env.REDIS_URL;

    if (!redisUrl) {
      throw new Error('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è REDIS_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }
    
    console.log(`[Redis] –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫: ${redisUrl.split('@')[1] || '–ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ö–æ—Å—Ç—É'}`); // –õ–æ–≥–∏—Ä—É–µ–º —Ö–æ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    this.client = createClient({ url: redisUrl });
    // <<< –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø >>>

    this.client.on('error', (err) => console.error('üî¥ –û—à–∏–±–∫–∞ Redis:', err));
    await this.client.connect();
    
    return this.client;
  }

  getClient() {
    if (!this.client) {
      throw new Error('Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ connect() —Å–Ω–∞—á–∞–ª–∞.');
    }
    return this.client;
  }
}

export default new RedisService();