// services/redisService.js

import { createClient } from 'redis';

class RedisService {
  constructor() {
    this.client = null;
  }

  async connect() {
    if (this.client) {
      return this.client;
    }
    
    // <<< –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø >>>
    
    let redisUrl;

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (process.env.REDIS_URL && process.env.REDIS_URL.startsWith('redis://')) {
        redisUrl = process.env.REDIS_URL;
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç, —Å–æ–±–∏—Ä–∞–µ–º –µ–µ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π,
        // –∫–æ—Ç–æ—Ä—ã–µ Render —Ç–æ—á–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç.
        const host = process.env.REDIS_HOST;
        const port = process.env.REDIS_PORT;
        const password = process.env.REDIS_PASSWORD;
        const user = process.env.REDIS_USER || 'default'; // Redis 6+ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if (!host || !port || !password) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Redis (REDIS_HOST, REDIS_PORT, REDIS_PASSWORD)');
        }

        redisUrl = `redis://${user}:${password}@${host}:${port}`;
    }
    
    console.log(`[Redis] –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫: ${redisUrl.split('@')[1] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É —Ö–æ—Å—Ç—É'}`);

    this.client = createClient({ url: redisUrl });
    
    // <<< –ö–û–ù–ï–¶ –§–ò–ù–ê–õ–¨–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø >>>

    this.client.on('error', (err) => console.error('üî¥ –û—à–∏–±–∫–∞ Redis:', err));
    await this.client.connect();
    
    return this.client;
  }

  getClient() {
    if (!this.client) {
      throw new Error('Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ connect() —Å–Ω–∞—á–∞–ª–∞.');
    }
    return this.client;
  }
}

export default new RedisService();