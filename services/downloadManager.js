import path from 'path';
import fs from 'fs';
import util from 'util';
import NodeID3 from 'node-id3';
import ytdl from 'youtube-dl-exec';

import { TaskQueue } from '../lib/TaskQueue.js';
import { pool, getUser, logUserActivity, resetDailyLimitIfNeeded, incrementDownloads, saveTrackForUser } from '../db.js';
import { getRedisClient } from '../index.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–≥–µ—Ç—Ç–µ—Ä –∏–∑ index.js
import { texts } from '../index.js'; // –¢–µ–∫—Å—Ç—ã —Ç–æ–∂–µ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏, –Ω–æ –ø–æ–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ index
import { Markup } from 'telegraf';

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –∑–∞–≥—Ä—É–∑–∫–∞–º ---

const writeID3 = util.promisify(NodeID3.write);
const playlistTracker = new Map();

// ESM-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π __dirname
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(path.dirname(__filename)); // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ, –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
const cacheDir = path.join(__dirname, 'cache');


// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –û–î–ù–û–ì–û —Ç—Ä–µ–∫–∞ ---

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç, —Ç–µ–≥–∏—Ä—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –û–î–ò–ù —Ç—Ä–µ–∫ –∏ –∫—ç—à–∏—Ä—É–µ—Ç file_id.
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è "–≤–æ—Ä–∫–µ—Ä–æ–º" –¥–ª—è –Ω–∞—à–µ–π –æ—á–µ—Ä–µ–¥–∏.
 * @param {object} task - –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ { ctx, userId, url, playlistUrl }
 */
async function trackDownloadProcessor(task) {
  const { ctx, userId, url, playlistUrl } = task;
  const redisClient = getRedisClient();
  const start = Date.now();
  let trackName = 'track';

  console.log(`[Queue: ${downloadQueue.active}/${downloadQueue.maxConcurrent}] üöÄ –°—Ç–∞—Ä—Ç: ${url}`);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à file_id –≤ Redis
    const fileIdKey = `fileId:${url}`;
    const cachedFileId = await redisClient.get(fileIdKey);

    if (cachedFileId) {
      console.log(`üéØ –ö—ç—à file_id –Ω–∞–π–¥–µ–Ω –¥–ª—è ${url}. –û—Ç–ø—Ä–∞–≤–∫–∞.`);
      await ctx.telegram.sendAudio(userId, cachedFileId);
      await incrementDownloads(userId, 'cached_track'); // –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      await saveTrackForUser(userId, 'cached_track', cachedFileId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      return;
    }

    // 2. –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–∫–∞—á–∏–≤–∞–µ–º
    const info = await ytdl(url, { dumpSingleJson: true });
    trackName = (info.title || 'track').replace(/[\\/:*?"<>|]/g, '').slice(0, 64);
    const filePath = path.join(cacheDir, `${trackName}_${Date.now()}.mp3`);

    await ytdl(url, {
      extractAudio: true,
      audioFormat: 'mp3',
      output: filePath,
      preferFreeFormats: true,
      noCheckCertificates: true,
    });
    
    await writeID3({ title: trackName, artist: 'SoundCloud' }, filePath);

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const message = await ctx.telegram.sendAudio(
      userId,
      { source: fs.createReadStream(filePath) },
      { title: trackName, performer: 'SoundCloud' }
    );
    
    // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫—ç—à–∏—Ä—É–µ–º file_id
    if (message?.audio?.file_id) {
        const fileId = message.audio.file_id;
        await redisClient.setEx(fileIdKey, 30 * 24 * 60 * 60, fileId); // –ö—ç—à –Ω–∞ 30 –¥–Ω–µ–π
        await incrementDownloads(userId, trackName);
        await saveTrackForUser(userId, trackName, fileId);
    }

    const duration = ((Date.now() - start) / 1000).toFixed(1);
    console.log(`‚úÖ –¢—Ä–µ–∫ ${trackName} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${duration} —Å–µ–∫.`);

    // 5. –û—á–∏—Å—Ç–∫–∞
    await fs.promises.unlink(filePath);

    // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    if (playlistUrl) {
      const playlistKey = `${userId}:${playlistUrl}`;
      if (playlistTracker.has(playlistKey)) {
        let remaining = playlistTracker.get(playlistKey) - 1;
        if (remaining <= 0) {
          await ctx.telegram.sendMessage(userId, '‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
          playlistTracker.delete(playlistKey);
        } else {
          playlistTracker.set(playlistKey, remaining);
        }
      }
    }

  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${url} –¥–ª—è userId ${userId}:`, err);
    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
      await ctx.telegram.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞: ${url}\n–ü—Ä–∏—á–∏–Ω–∞: ${err.message.slice(0, 100)}`);
    } catch (sendErr) {
      console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, sendErr);
    }
    // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã TaskQueue –º–æ–≥ –µ–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
    throw err;
  }
}


// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ ---

export const downloadQueue = new TaskQueue({
  maxConcurrent: 8,
  taskProcessor: trackDownloadProcessor,
});


// --- –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ index.js) ---

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ª–∏–º–∏—Ç–∞–º–∏.
 * @param {object} ctx - Telegram-–∫–æ–Ω—Ç–µ–∫—Å—Ç
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} url - –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç
 */
export async function enqueue(ctx, userId, url) {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–∏–º–∏—Ç–æ–≤
    await logUserActivity(userId);
    await resetDailyLimitIfNeeded(userId);
    const user = await getUser(userId);
    const remainingLimit = user.premium_limit - user.downloads_today;

    if (remainingLimit <= 0) {
      await ctx.telegram.sendMessage(
        userId,
        texts.limitReached,
        Markup.inlineKeyboard([Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_subscription')])
      );
      return;
    }

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Å—ã–ª–∫–µ (—Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç)
    // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ ytdl –∑–¥–µ—Å—å - –∫–æ–º–ø—Ä–æ–º–∏—Å—Å. –û–Ω –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –∑–∞—Ä–∞–Ω–µ–µ —É–∑–Ω–∞—Ç—å
    // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã.
    await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...');
    const info = await ytdl(url, { dumpSingleJson: true });
    
    const isPlaylist = Array.isArray(info.entries);
    let entries = [];

    if (isPlaylist) {
      entries = info.entries.filter(e => e?.webpage_url).map(e => ({ url: e.webpage_url, title: e.title }));
      
      const playlistKey = `${userId}:${url}`;
      playlistTracker.set(playlistKey, entries.length);

      if (entries.length > remainingLimit) {
        await ctx.telegram.sendMessage(
          userId,
          `‚ö†Ô∏è –í –ø–ª–µ–π–ª–∏—Å—Ç–µ ${entries.length} —Ç—Ä–µ–∫–æ–≤, –Ω–æ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${remainingLimit}. –ó–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–≤—ã–µ ${remainingLimit}.`
        );
        entries = entries.slice(0, remainingLimit);
      }
      await ctx.reply(`–î–æ–±–∞–≤–ª—è—é ${entries.length} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å...`);
    } else {
      entries = [{ url, title: info.title }];
    }
    
    // 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å
    for (const entry of entries) {
      downloadQueue.add({
        ctx,
        userId,
        url: entry.url,
        playlistUrl: isPlaylist ? url : null,
        priority: user.premium_limit // –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      });
    }

    await ctx.telegram.sendMessage(
      userId,
      `‚úÖ –ì–æ—Ç–æ–≤–æ! ${entries.length} —Ç—Ä–µ–∫(–æ–≤) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å. \n–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ~${downloadQueue.size}.`
    );

  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ enqueue –¥–ª—è userId ${userId}:`, e);
    await ctx.reply(texts.error + '\n–í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
  }
}