import { TaskQueue } from '../lib/TaskQueue.js';
import { logTask } from '../utils/logger.js'; // –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø—É—Ç–∏
import { processTrackByUrl } from ./index.js'; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
import { resolveRedirect } from './urlResolver.js';
import { getUser, logUserActivity, resetDailyLimitIfNeeded } from './user.js';
import { texts } from '../constants/texts.js';
import { Markup } from 'telegraf';

// --- 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É ---

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –Ω–∞—à—É –æ—á–µ—Ä–µ–¥—å.
 * @param {object} task - –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ { ctx, userId, url, playlistUrl, priority }
 */
async function trackDownloadProcessor(task) {
  const { ctx, userId, url, playlistUrl } = task;
  const startTime = Date.now();

  await logTask(`üöÄ –°—Ç–∞—Ä—Ç: ${url} (userId: ${userId}, priority: ${task.priority})`);
  console.log(`[Queue: ${downloadQueue.active}/${downloadQueue.maxConcurrent}] üöÄ –°—Ç–∞—Ä—Ç: ${url}`);
  
  try {
    // –û—Å–Ω–æ–≤–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
    await processTrackByUrl(ctx, userId, url, playlistUrl);
    
    const duration = ((Date.now() - startTime) / 1000).toFixed(2);
    await logTask(`‚úÖ –£—Å–ø–µ—Ö: ${url} (–∑–∞ ${duration} —Å–µ–∫)`);
    console.log(`[Queue: ${downloadQueue.active}/${downloadQueue.maxConcurrent}] ‚úÖ –£—Å–ø–µ—Ö: ${url}`);

  } catch (err) {
    await logTask(`‚ùå –û—à–∏–±–∫–∞: ${url} ‚Äî ${err.message}`);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${url}:`, err);
    
    // –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
    try {
      await ctx.telegram.sendMessage(
        userId,
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞: ${url}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.`
      );
    } catch (sendErr) {
      console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, sendErr);
    }

    // –í–∞–∂–Ω–æ "–ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å" –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ TaskQueue –µ–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–ª
    throw err;
  }
}

// --- 2. –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–π –æ—á–µ—Ä–µ–¥–∏ ---

export const downloadQueue = new TaskQueue({
  maxConcurrent: 8, // –õ–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è
  taskProcessor: trackDownloadProcessor,
});


// --- 3. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è `enqueue` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á ---

let enqueueCounter = 0; // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ª–∏–º–∏—Ç–∞–º–∏.
 * @param {object} ctx - Telegram-–∫–æ–Ω—Ç–µ–∫—Å—Ç
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} url - –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç
 * @param {number} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –¥–ª—è –æ–±—ã—á–Ω—ã—Ö, 100 –¥–ª—è –ø—Ä–µ–º–∏—É–º)
 */
export async function enqueue(ctx, userId, url, priority = 10) {
  enqueueCounter++;
  const label = `enqueue:${userId}:${enqueueCounter}`;
  console.time(label);

  try {
    // –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    const resolvedUrl = await resolveRedirect(url);
    await logUserActivity(userId);
    await resetDailyLimitIfNeeded(userId);
    const user = await getUser(userId);
    const remainingLimit = user.premium_limit - user.downloads_today;

    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    if (remainingLimit <= 0) {
      await ctx.telegram.sendMessage(
        userId,
        texts.limitReached,
        Markup.inlineKeyboard([
          Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_subscription')
        ])
      );
      return; // –í–∞–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–ê–ì)
    const task = {
      ctx,
      userId,
      url: resolvedUrl,
      priority,
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      // playlistUrl: ... 
    };

    downloadQueue.add(task);

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
    await ctx.reply(`–í–∞—à —Ç—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É. –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ~${downloadQueue.size}`);

  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ enqueue –¥–ª—è ${url}:`, err);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.');
  } finally {
    console.timeEnd(label);
  }
}