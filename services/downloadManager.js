// services/downloadManager.js

import path from 'path';
import fs from 'fs';
import ytdl from 'youtube-dl-exec';
import { fileURLToPath } from 'url';
import { Markup } from 'telegraf';
import crypto from 'crypto';
import { fileTypeFromFile } from 'file-type';

import { TaskQueue } from '../lib/TaskQueue.js';
import { getRedisClient, texts } from '../index.js';
import { pool, getUser, resetDailyLimitIfNeeded, incrementDownloads, saveTrackForUser, logEvent, logUserActivity } from '../db.js';

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(path.dirname(__filename));
const cacheDir = path.join(__dirname, 'cache');
const TELEGRAM_FILE_LIMIT_MB = 49;
const MAX_PLAYLIST_TRACKS_FREE = 10;
const TRACK_TITLE_LIMIT = 100;

function sanitizeFilename(name) {
    return (name || 'track').replace(/[<>:"/\\|?*]+/g, '').trim();
}

// --- –ù–æ–≤—ã–π, "—É–º–Ω—ã–π" –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á ---
async function trackDownloadProcessor(task) {
    const { ctx, userId, url, priority } = task; // –ó–∞–¥–∞—á–∞ —Ç–µ–ø–µ—Ä—å –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è
    const redisClient = getRedisClient();
    let tempFilePath = null;

    try {
        // --- –®–ê–ì 1: –ü–û–õ–£–ß–ï–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–• (—Ç–µ–ø–µ—Ä—å –∑–¥–µ—Å—å) ---
        console.log(`[Worker] –ê–Ω–∞–ª–∏–∑: ${url}`);
        const info = await ytdl(url, { dumpSingleJson: true, retries: 3 });

        // --- –®–ê–ì 2: –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ï–ô–õ–ò–°–¢–ê ---
        if (Array.isArray(info.entries)) {
            console.log(`[Worker] –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç —Å ${info.entries.length} —Ç—Ä–µ–∫–∞–º–∏.`);
            let trackInfos = info.entries.filter(e => e?.webpage_url);
            
            const user = await getUser(userId); // –ù—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
            let remainingLimit = user.premium_limit - user.downloads_today;
            
            if (user.premium_limit <= 10 && trackInfos.length > MAX_PLAYLIST_TRACKS_FREE) {
                await ctx.telegram.sendMessage(userId, `‚ÑπÔ∏è –ù–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ ${MAX_PLAYLIST_TRACKS_FREE} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞.`);
                trackInfos = trackInfos.slice(0, MAX_PLAYLIST_TRACKS_FREE);
            }
            if (trackInfos.length > remainingLimit) {
                await ctx.telegram.sendMessage(userId, `‚ö†Ô∏è –í –ø–ª–µ–π–ª–∏—Å—Ç–µ ${trackInfos.length} —Ç—Ä–µ–∫–æ–≤, –Ω–æ –≤–∞—à –ª–∏–º–∏—Ç ${remainingLimit}. –î–æ–±–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.`);
                trackInfos = trackInfos.slice(0, remainingLimit);
            }

            if (trackInfos.length > 0) {
                 await ctx.telegram.sendMessage(userId, `‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç –ø—Ä–∏–Ω—è—Ç. –î–æ–±–∞–≤–ª—è—é ${trackInfos.length} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å...`);
                 // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–µ—Å–Ω—é –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é, –∞—Ç–æ–º–∞—Ä–Ω—É—é –∑–∞–¥–∞—á—É
                 for (const entry of trackInfos) {
                    // –ê—Ç–æ–º–∞—Ä–Ω–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                    const updatedUser = await incrementDownloads(userId, entry.title || '–¢—Ä–µ–∫ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞');
                    if (!updatedUser) {
                        await ctx.telegram.sendMessage(userId, `üö´ –í–∞—à –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ù–µ –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.`);
                        break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –∫–æ–Ω—á–∏–ª—Å—è
                    }
                    downloadQueue.add({ ctx, userId, url: entry.webpage_url, priority });
                 }
            }
            return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É "–º–∞—Å—Ç–µ—Ä-–∑–∞–¥–∞—á–∏" –ø–ª–µ–π–ª–∏—Å—Ç–∞
        }

        // --- –®–ê–ì 3: –û–ë–†–ê–ë–û–¢–ö–ê –û–î–ò–ù–û–ß–ù–û–ì–û –¢–†–ï–ö–ê ---
        const trackUrl = info.webpage_url || url;
        const trackName = sanitizeFilename(info.title).slice(0, TRACK_TITLE_LIMIT);
        const trackId = info.id || trackName.replace(/\s/g, '');
        const uploader = info.uploader || 'SoundCloud';

        const fileIdKey = `fileId:${trackUrl}`;
        const cachedFileId = await redisClient.get(fileIdKey);
        if (cachedFileId) {
            console.log(`‚ö°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫—ç—à–∞ (–≤ –≤–æ—Ä–∫–µ—Ä–µ): ${trackName}`);
            await ctx.telegram.sendAudio(userId, cachedFileId);
            await saveTrackForUser(userId, trackName, cachedFileId);
            return;
        }
        
        console.log(`[Worker] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${trackName}`);
        tempFilePath = path.join(cacheDir, `${trackId}-${crypto.randomUUID()}.mp3`);
        await ytdl(trackUrl, {
            extractAudio: true, audioFormat: 'mp3', output: tempFilePath,
            embedMetadata: true, postprocessorArgs: `-metadata artist="${uploader}"`, retries: 3,
        });
        
        const fileType = await fileTypeFromFile(tempFilePath);
        if (fileType?.mime !== 'audio/mpeg') throw new Error('–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è MP3');

        if ((await fs.promises.stat(tempFilePath)).size / (1024*1024) > TELEGRAM_FILE_LIMIT_MB) {
            await ctx.telegram.sendMessage(userId, `‚ùå –¢—Ä–µ–∫ "${trackName}" —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>50–ú–ë).`);
            return;
        }

        const message = await ctx.telegram.sendAudio(userId, { source: fs.createReadStream(tempFilePath) }, { title: trackName, performer: uploader });
        
        if (message?.audio?.file_id) {
            await redisClient.setEx(fileIdKey, 30 * 24 * 60 * 60, message.audio.file_id);
            await saveTrackForUser(userId, trackName, message.audio.file_id);
        }

    } catch (err) {
        if (err.stderr?.includes('404')) {
            await ctx.telegram.sendMessage(userId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –ø–æ —Å—Å—ã–ª–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π.`);
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ –¥–ª—è ${url}:`, err);
        }
        // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∏ Telegraf'–∞
    } finally {
        if (tempFilePath && fs.existsSync(tempFilePath)) {
            await fs.promises.unlink(tempFilePath);
        }
    }
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ ---
export const downloadQueue = new TaskQueue({
    maxConcurrent: 8,
    taskProcessor: trackDownloadProcessor,
});

// --- –ù–û–í–ê–Ø, –°–£–ü–ï–†-–ë–´–°–¢–†–ê–Ø enqueue ---
export async function enqueue(ctx, userId, url) {
    try {
        await logUserActivity(userId);
        
        // –ê—Ç–æ–º–∞—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
        const updatedUser = await incrementDownloads(userId, url); // –ü–µ—Ä–µ–¥–∞–µ–º URL –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è
        if (!updatedUser) {
            // –ï—Å–ª–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –Ω–µ —É–¥–∞–ª—Å—è (–ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω), —Å–æ–æ–±—â–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
            return ctx.telegram.sendMessage(userId, texts.limitReached, Markup.inlineKeyboard([/*...*/]));
        }

        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        downloadQueue.add({
            ctx,
            userId,
            url,
            priority: updatedUser.premium_limit,
        });

        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.reply(`‚úÖ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ~${downloadQueue.size}. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.`);

    } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ enqueue –¥–ª—è ${userId}:`, e);
        await ctx.reply(texts.error);
    }
}