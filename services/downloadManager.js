// services/downloadManager.js

import path from 'path';
import fs from 'fs';
import ytdl from 'youtube-dl-exec';
import { fileURLToPath } from 'url';
import { Markup } from 'telegraf';
import crypto from 'crypto';

import { TaskQueue } from '../lib/TaskQueue.js';
import { getRedisClient, texts, bot } from '../index.js';
import {
    pool,
    getUser,
    resetDailyLimitIfNeeded,
    saveTrackForUser,
    logEvent,
    logUserActivity,
    incrementDownloads,
    updateUserField,
    findCachedTrack, // <<< –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏—è –≤ db.js –æ–±–Ω–æ–≤–ª–µ–Ω–∞
    cacheTrack      // <<< –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
} from '../db.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(path.dirname(__filename));
const cacheDir = path.join(__dirname, 'cache');

const TELEGRAM_FILE_LIMIT_MB = 49;
const MAX_PLAYLIST_TRACKS_FREE = 10;
const TRACK_TITLE_LIMIT = 100;

function sanitizeFilename(name) {
    return (name || 'track').replace(/[<>:"/\\|?*]+/g, '').trim();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function safeSendMessage(ctx, userId, text, extra = {}) {
    try {
        await bot.telegram.sendMessage(userId, text, extra);
    } catch (e) {
        if (e.response?.error_code === 403) {
            console.warn(`[SafeSend] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
            await updateUserField(userId, 'active', false);
        } else {
            console.error(`[SafeSend] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${userId}:`, e.message);
        }
    }
}

// --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ ---
async function trackDownloadProcessor(task) {
    const { userId, url, trackName, trackId, uploader, playlistUrl } = task;
    let tempFilePath = null;
    
    try {
        console.log(`[Worker] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${trackName}`);
        
        tempFilePath = path.join(cacheDir, `${trackId}-${crypto.randomUUID()}.mp3`);
        
        await ytdl(url, {
            extractAudio: true,
            audioFormat: 'mp3',
            output: tempFilePath,
            embedMetadata: true,
            postprocessorArgs: `-metadata artist="${uploader || 'SoundCloud'}"`,
            retries: 3
        });
        
        const stats = await fs.promises.stat(tempFilePath);
        const fileSizeInMB = stats.size / (1024 * 1024);
        
        if (fileSizeInMB > TELEGRAM_FILE_LIMIT_MB) {
            await safeSendMessage(null, userId, `‚ùå –¢—Ä–µ–∫ "${trackName}" —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${fileSizeInMB.toFixed(2)} –ú–ë).`);
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –ø–æ–¥–ø–∏—Å—å—é (caption)
        const message = await bot.telegram.sendAudio(userId, { source: fs.createReadStream(tempFilePath) }, {
            caption: trackName, // <<< –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï
            title: trackName,
            performer: uploader || 'SoundCloud'
        });
        
        if (message?.audio?.file_id) {
            // –ö—ç—à–∏—Ä—É–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –≤ Redis!
            await cacheTrack(url, message.audio.file_id, trackName);
            await saveTrackForUser(userId, message.audio.file_id, trackName);
        }
        
        if (playlistUrl) {
            const redisClient = getRedisClient();
            const playlistKey = `playlist:${userId}:${playlistUrl}`;
            const remaining = await redisClient.decr(playlistKey);
            if (remaining <= 0) {
                await safeSendMessage(null, userId, '‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
                await redisClient.del(playlistKey);
            }
        }
        
    } catch (err) {
        if (err.response?.error_code === 403) {
            console.warn(`[UserDisconnected] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
            await updateUserField(userId, 'active', false);
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ "${trackName}":`, err.stderr || err.message);
            await safeSendMessage(null, userId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫: "${trackName}"`);
        }
    } finally {
        if (tempFilePath && fs.existsSync(tempFilePath)) {
            await fs.promises.unlink(tempFilePath);
        }
    }
}

// --- –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á ---
export const downloadQueue = new TaskQueue({
    maxConcurrent: 8,
    taskProcessor: trackDownloadProcessor
});

// --- –û—Å–Ω–æ–≤–Ω–æ–π –≤—Ö–æ–¥–Ω–æ–π –º–µ—Ç–æ–¥ ---
export async function enqueue(ctx, userId, url) {
    try {
        await logUserActivity(userId);
        await resetDailyLimitIfNeeded(userId);
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await safeSendMessage(ctx, userId, 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ytdl –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ ytdl –±—ã—Å—Ç—Ä—ã–π)
        const info = await ytdl(url, { dumpSingleJson: true, retries: 2 });
        if (!info) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ');
        
        const isPlaylist = Array.isArray(info.entries);
        let tracks = [];
        
        if (isPlaylist) {
            tracks = info.entries
                .filter(e => e?.webpage_url)
                .map(e => ({
                    url: e.webpage_url,
                    trackId: e.id || e.title.replace(/\s/g, ''),
                    trackName: sanitizeFilename(e.title).slice(0, TRACK_TITLE_LIMIT),
                    uploader: e.uploader || 'SoundCloud'
                }));
        } else {
            tracks = [{
                url: info.webpage_url || url,
                trackId: info.id || info.title.replace(/\s/g, ''),
                trackName: sanitizeFilename(info.title).slice(0, TRACK_TITLE_LIMIT),
                uploader: info.uploader || 'SoundCloud'
            }];
        }
        
        const user = await getUser(userId);
        let remainingLimit = user.premium_limit - user.downloads_today;
        
        if (remainingLimit <= 0) {
            return await safeSendMessage(ctx, userId, texts.limitReached, Markup.inlineKeyboard([]));
        }
        
        if (isPlaylist && user.premium_limit <= 10 && tracks.length > MAX_PLAYLIST_TRACKS_FREE) {
            await safeSendMessage(ctx, userId, `‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: –º–∞–∫—Å–∏–º—É–º ${MAX_PLAYLIST_TRACKS_FREE} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞.`);
            tracks = tracks.slice(0, MAX_PLAYLIST_TRACKS_FREE);
        }
        
        if (tracks.length > remainingLimit) {
            await safeSendMessage(ctx, userId, `‚ö†Ô∏è –í –ø–ª–µ–π–ª–∏—Å—Ç–µ ${tracks.length} —Ç—Ä–µ–∫–æ–≤, –Ω–æ –≤–∞—à –ª–∏–º–∏—Ç: ${remainingLimit}. –î–æ–±–∞–≤–ª—è—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ.`);
            tracks = tracks.slice(0, remainingLimit);
        }
        
        const tasksFromCache = [];
        const tasksToDownload = [];
        
        // –†–∞–∑–¥–µ–ª—è–µ–º —Ç—Ä–µ–∫–∏ –Ω–∞ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –∏ —Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å
        for (const track of tracks) {
            const cachedTrack = await findCachedTrack(track.url); // <<< –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
            if (cachedTrack) {
                tasksFromCache.push(cachedTrack);
            } else {
                tasksToDownload.push(track);
            }
        }
        
        // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ –∫—ç—à–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        let sentFromCacheCount = 0;
        for (const track of tasksFromCache) {
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–¥–ø–∏—Å—å—é!
                await bot.telegram.sendAudio(userId, track.fileId, {
                    caption: track.trackName,
                    title: track.trackName,
                    performer: track.uploader || 'SoundCloud'
                });
                await saveTrackForUser(userId, track.fileId, track.trackName);
                await incrementDownloads(userId);
                sentFromCacheCount++;
            } catch (err) {
                 if (err.response?.error_code === 403) {
                    await updateUserField(userId, 'active', false);
                    break; // –ï—Å–ª–∏ —é–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
                } else if (err.description?.includes('FILE_REFERENCE_EXPIRED')) {
                    console.warn(`[Cache Expired] –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –¥–ª—è ${track.url} –∏—Å—Ç–µ–∫–ª–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.`);
                    tasksToDownload.push(track); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                } else {
                    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞ –¥–ª—è ${userId}: ${err.message}`);
                }
            }
        }
        
        if (sentFromCacheCount > 0) {
            await safeSendMessage(ctx, userId, `‚úÖ ${sentFromCacheCount} —Ç—Ä–µ–∫(–æ–≤) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏–∑ –∫—ç—à–∞.`);
        }
        
        // 2. –°—Ç–∞–≤–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        if (tasksToDownload.length > 0) {
            const userAfterCache = await getUser(userId);
            const currentLimit = userAfterCache.premium_limit - userAfterCache.downloads_today;

            if (currentLimit <= 0) {
                 return await safeSendMessage(ctx, userId, 'üö´ –í–∞—à –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω —Ç—Ä–µ–∫–∞–º–∏ –∏–∑ –∫—ç—à–∞.');
            }

            const tasksToReallyDownload = tasksToDownload.slice(0, currentLimit);
            
            if (tasksToReallyDownload.length < tasksToDownload.length) {
                 await safeSendMessage(ctx, userId, `‚ö†Ô∏è –í–∞—à –ª–∏–º–∏—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å –µ—â–µ ${tasksToReallyDownload.length} —Ç—Ä–µ–∫–æ–≤. –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.`);
            }
            
            if (tasksToReallyDownload.length > 0) {
                await safeSendMessage(ctx, userId, `‚è≥ ${tasksToReallyDownload.length} —Ç—Ä–µ–∫(–æ–≤) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.`);
                
                if (isPlaylist) {
                    const redisClient = getRedisClient();
                    const playlistKey = `playlist:${userId}:${url}`;
                    await redisClient.setEx(playlistKey, 3600, tasksToReallyDownload.length.toString());
                    await logEvent(userId, 'download_playlist');
                }
                
                for (const track of tasksToReallyDownload) {
                    await incrementDownloads(userId);
                    downloadQueue.add({
                        userId,
                        ...track,
                        playlistUrl: isPlaylist ? url : null,
                        priority: user.premium_limit
                    });
                    await logEvent(userId, 'download');
                }
            }
        }
        
    } catch (err) {
        console.error(`‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ enqueue –¥–ª—è userId ${userId}:`, err.message);
        await safeSendMessage(ctx, userId, texts.error);
    }
}