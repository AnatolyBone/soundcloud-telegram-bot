// services/downloadManager.js (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

import path from 'path';
import fs from 'fs';
import util from 'util';
import NodeID3 from 'node-id3';
import ytdl from 'youtube-dl-exec';
import { fileURLToPath } from 'url';
import { Markup } from 'telegraf';

import { TaskQueue } from '../lib/TaskQueue.js';
import { getRedisClient, texts } from '../index.js';
import { getUser, logUserActivity, resetDailyLimitIfNeeded, incrementDownloads, saveTrackForUser, logEvent } from '../db.js';

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã ---
const writeID3 = util.promisify(NodeID3.write);
const playlistTracker = new Map();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(path.dirname(__filename));
const cacheDir = path.join(__dirname, 'cache');
const TELEGRAM_FILE_LIMIT_MB = 49;

function sanitizeFilename(name) {
    if (!name) return 'track';
    return name.replace(/[<>:"/\\|?*]+/g, '').trim();
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –û–î–ù–û–ì–û —Ç—Ä–µ–∫–∞ (–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å) ---
// –õ–æ–≥–∏–∫–∞ –∑–¥–µ—Å—å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ
async function trackDownloadProcessor(task) {
    const { ctx, userId, url, playlistUrl, trackName, trackId } = task;
    const redisClient = getRedisClient();
    let tempFilePath = null;

    console.log(`[Queue: ${downloadQueue.active}/${downloadQueue.maxConcurrent}] üöÄ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${trackName}`);

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –∑–¥–µ—Å—å –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ "–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—É–±–µ–∂", –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏
        // –¥–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø—Ä–æ—Å—è—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ç—Ä–µ–∫.
        const fileIdKey = `fileId:${url}`;
        const cachedFileId = await redisClient.get(fileIdKey);

        if (cachedFileId) {
            console.log(`üéØ –ö—ç—à file_id –Ω–∞–π–¥–µ–Ω (–≤ –≤–æ—Ä–∫–µ—Ä–µ) –¥–ª—è "${trackName}". –û—Ç–ø—Ä–∞–≤–∫–∞.`);
            await ctx.telegram.sendAudio(userId, cachedFileId);
            await incrementDownloads(userId, 'cached_track_worker');
            return;
        }

        tempFilePath = path.join(cacheDir, `${trackName}_${trackId}_${Date.now()}.mp3`);

        await ytdl(url, {
            extractAudio: true,
            audioFormat: 'mp3',
            output: tempFilePath,
            preferFreeFormats: true,
            noCheckCertificates: true,
        });
        
        await writeID3({ title: trackName, artist: 'SoundCloud' }, tempFilePath);
        
        const stats = await fs.promises.stat(tempFilePath);
        const fileSizeInMB = stats.size / (1024 * 1024);

        if (fileSizeInMB > TELEGRAM_FILE_LIMIT_MB) {
            console.warn(`‚ö†Ô∏è –§–∞–π–ª "${trackName}" —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${fileSizeInMB.toFixed(2)} MB).`);
            await ctx.telegram.sendMessage(userId, `‚ùå –¢—Ä–µ–∫ "${trackName}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ —Ä–∞–∑–º–µ—Ä (${fileSizeInMB.toFixed(2)} –ú–ë) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram –≤ 50 –ú–ë.`);
            return;
        }

        const message = await ctx.telegram.sendAudio(userId, { source: fs.createReadStream(tempFilePath) }, { title: trackName, performer: 'SoundCloud' });
        
        if (message?.audio?.file_id) {
            const fileId = message.audio.file_id;
            await redisClient.setEx(fileIdKey, 30 * 24 * 60 * 60, fileId); // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 30 –¥–Ω–µ–π
            await incrementDownloads(userId, trackName);
            await saveTrackForUser(userId, trackName, fileId);
        }

        if (playlistUrl) {
            const playlistKey = `${userId}:${playlistUrl}`;
            if (playlistTracker.has(playlistKey)) {
                let remaining = playlistTracker.get(playlistKey) - 1;
                if (remaining <= 0) {
                    await ctx.telegram.sendMessage(userId, '‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
                    playlistTracker.delete(playlistKey);
                } else {
                    playlistTracker.set(playlistKey, remaining);
                }
            }
        }
    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ "${trackName}" –¥–ª—è userId ${userId}:`, err);
        try {
            await ctx.telegram.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞: ${trackName}`);
        } catch (sendErr) {
            console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, sendErr);
        }
        throw err;
    } finally {
        if (tempFilePath && fs.existsSync(tempFilePath)) {
            await fs.promises.unlink(tempFilePath);
        }
    }
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ ---
export const downloadQueue = new TaskQueue({
    maxConcurrent: 8,
    taskProcessor: trackDownloadProcessor,
});

// --- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å ---
export async function enqueue(ctx, userId, url) {
    try {
        await logUserActivity(userId);
        await resetDailyLimitIfNeeded(userId);
        const user = await getUser(userId);
        let remainingLimit = user.premium_limit - user.downloads_today;

        if (remainingLimit <= 0) {
            await ctx.telegram.sendMessage(userId, texts.limitReached, Markup.inlineKeyboard([Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_subscription')]));
            return;
        }

        await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É, –∏—â—É —Ç—Ä–µ–∫–∏ –≤ –∫—ç—à–µ...');
        
        const info = await ytdl(url, { dumpSingleJson: true });
        
        const isPlaylist = Array.isArray(info.entries);
        let trackInfos = [];

        if (isPlaylist) {
            trackInfos = info.entries
                .filter(e => e?.webpage_url)
                .map(e => ({
                    url: e.webpage_url,
                    trackName: sanitizeFilename(e.title).slice(0, 64) || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                    trackId: e.id
                }));
            if (trackInfos.length > remainingLimit) {
                await ctx.telegram.sendMessage(userId, `‚ö†Ô∏è –í –ø–ª–µ–π–ª–∏—Å—Ç–µ ${trackInfos.length} —Ç—Ä–µ–∫–æ–≤, –Ω–æ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${remainingLimit}. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ ${remainingLimit}.`);
                trackInfos = trackInfos.slice(0, remainingLimit);
            }
        } else {
            trackInfos = [{
                url: info.webpage_url || url,
                trackName: sanitizeFilename(info.title).slice(0, 64) || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                trackId: info.id
            }];
        }

        const redisClient = getRedisClient();
        let tasksForQueue = []; 
        let sentFromCacheCount = 0;

        for (const track of trackInfos) {
            const fileIdKey = `fileId:${track.url}`;
            const cachedFileId = await redisClient.get(fileIdKey);

            if (cachedFileId) {
                // –ë–´–°–¢–†–´–ô –ü–£–¢–¨: –Ω–∞—à–ª–∏ –≤ –∫—ç—à–µ
                console.log(`‚ö°Ô∏è –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫—ç—à–∞ –¥–ª—è "${track.trackName}"`);
                try {
                    await ctx.telegram.sendAudio(userId, cachedFileId);
                    await incrementDownloads(userId, track.trackName);
                    await saveTrackForUser(userId, track.trackName, cachedFileId);
                    sentFromCacheCount++;
                    remainingLimit--; // –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç, —Ç.–∫. —Ç—Ä–µ–∫ –≤—ã–¥–∞–Ω
                } catch (e) {
                    // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ file_id –Ω–µ —É–¥–∞–ª–∞—Å—å (—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ TG), —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É file_id –¥–ª—è ${track.url}. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ª–∏–≤.`);
                    await redisClient.del(fileIdKey); // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
                    tasksForQueue.push(track);
                }
            } else {
                // –ú–ï–î–õ–ï–ù–ù–´–ô –ü–£–¢–¨: –Ω–µ –Ω–∞—à–ª–∏, –≥–æ—Ç–æ–≤–∏–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
                tasksForQueue.push(track);
            }
        }

        if (sentFromCacheCount > 0) {
             await ctx.reply(`‚úÖ ${sentFromCacheCount} —Ç—Ä–µ–∫(–æ–≤) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏–∑ –∫—ç—à–∞!`);
        }

        if (tasksForQueue.length > 0) {
            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, –Ω–µ —Å—Ç–∞–≤–∏–º –Ω–∏—á–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å
            if (remainingLimit <= 0) {
                await ctx.reply(`üö´ –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –Ω–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.`);
                return;
            }

            // –û–±—Ä–µ–∑–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
            if (tasksForQueue.length > remainingLimit) {
                await ctx.telegram.sendMessage(userId, `‚ÑπÔ∏è –í–∞—à –ª–∏–º–∏—Ç –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω. –í –æ—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${remainingLimit} –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è ${tasksForQueue.length} —Ç—Ä–µ–∫–æ–≤.`);
                tasksForQueue = tasksForQueue.slice(0, remainingLimit);
            }

            if (isPlaylist) {
                const playlistKey = `${userId}:${url}`;
                playlistTracker.set(playlistKey, tasksForQueue.length); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, —á—Ç–æ –ø–æ—à–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å
                await logEvent(userId, 'download_playlist');
            }

            for (const track of tasksForQueue) {
                downloadQueue.add({
                    ctx, userId,
                    url: track.url,
                    playlistUrl: isPlaylist ? url : null,
                    priority: user.premium_limit,
                    trackName: track.trackName,
                    trackId: track.trackId
                });
                await logEvent(userId, 'download');
            }
            await ctx.telegram.sendMessage(userId, `‚è≥ ${tasksForQueue.length} —Ç—Ä–µ–∫(–æ–≤) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.`);
        }

    } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ enqueue –¥–ª—è userId ${userId}:`, e);
        await ctx.reply(texts.error + '\n–í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.');
    }
}