// services/downloadManager.js

import path from 'path';
import fs from 'fs';
import ytdl from 'youtube-dl-exec';
import { fileURLToPath } from 'url';
import crypto from 'crypto';

import { TaskQueue } from '../lib/TaskQueue.js';
import { getRedisClient, texts, bot } from '../index.js';
import {
    getUser,
    resetDailyLimitIfNeeded,
    saveTrackForUser,
    logEvent,
    logUserActivity,
    incrementDownloads,
    updateUserField,
    // <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: findCachedTrack –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–æ–≤—ã–π
    findCachedTracksByUrls, 
    cacheTrack
} from '../db.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(path.dirname(__filename));
const cacheDir = path.join(__dirname, 'cache');

// <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≤—ã–Ω–æ—Å–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–∞–≤–µ—Ä—Ö –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
const TELEGRAM_FILE_LIMIT_MB = 49;
const MAX_PLAYLIST_TRACKS_FREE = 10;
const TRACK_TITLE_LIMIT = 100;
const MAX_CONCURRENT_DOWNLOADS = 8; // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏

function sanitizeFilename(name) {
    return (name || 'track').replace(/[<>:"/\\|?*]+/g, '').trim().slice(0, TRACK_TITLE_LIMIT);
}

async function safeSendMessage(userId, text, extra = {}) {
    try {
        return await bot.telegram.sendMessage(userId, text, extra);
    } catch (e) {
        if (e.response?.error_code === 403) {
            console.warn(`[SafeSend] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
            await updateUserField(userId, 'active', false);
        } else {
            console.error(`[SafeSend] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${userId}:`, e.message);
        }
        return null;
    }
}

// --- –í–æ—Ä–∫–µ—Ä (`trackDownloadProcessor`) ---
// <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω. –ù–µ—Ç –ª–∏—à–Ω–∏—Ö API-–≤—ã–∑–æ–≤–æ–≤.
async function trackDownloadProcessor(task) {
    const { userId, url, trackName, uploader, playlistUrl } = task;
    const tempFilename = `${sanitizeFilename(trackName)}-${crypto.randomUUID()}.mp3`;
    const tempFilePath = path.join(cacheDir, tempFilename);

    try {
        console.log(`[Worker] –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${trackName}`);
        
        await ytdl(url, {
            extractAudio: true,
            audioFormat: 'mp3',
            output: tempFilePath,
            embedMetadata: true,
            postprocessorArgs: `-metadata artist="${uploader || 'SoundCloud'}" -metadata title="${trackName}"`,
            retries: 3,
            "socket-timeout": 120
        });

        if (!fs.existsSync(tempFilePath)) {
            throw new Error(`–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${tempFilePath}`);
        }

        const stats = await fs.promises.stat(tempFilePath);
        if (stats.size / (1024 * 1024) > TELEGRAM_FILE_LIMIT_MB) {
            throw new Error(`–¢—Ä–µ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø—Ä–æ–ø—É—â–µ–Ω: ${trackName}`);
        }
        
        const sentMessage = await bot.telegram.sendAudio(userId, { source: fs.createReadStream(tempFilePath) }, {
            caption: trackName,
            title: trackName,
            performer: uploader || 'SoundCloud'
        });
        
        // –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ô –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (sentMessage?.audio?.file_id) {
            console.log(`[Worker] –¢—Ä–µ–∫ "${trackName}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∫—ç—à–∏—Ä—É—é...`);
            await cacheTrack(url, sentMessage.audio.file_id, trackName);
            await saveTrackForUser(userId, trackName, sentMessage.audio.file_id);
            await incrementDownloads(userId);
        }
        
        // –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è, –æ–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞
        if (playlistUrl) {
            const redisClient = getRedisClient();
            const playlistKey = `playlist:${userId}:${playlistUrl}`;
            const remaining = await redisClient.decr(playlistKey);
            if (remaining <= 0) {
                await safeSendMessage(userId, '‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
                await redisClient.del(playlistKey);
            }
        }
        
    } catch (err) {
        if (err.response?.error_code === 403) {
            await updateUserField(userId, 'active', false);
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ "${trackName}":`, err.stderr || err.message || err);
            await safeSendMessage(userId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–µ–∫: "${trackName}"`);
        }
    } finally {
        if (fs.existsSync(tempFilePath)) {
            await fs.promises.unlink(tempFilePath).catch(e => console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ${tempFilePath}:`, e));
        }
    }
}

// --- –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á ---
export const downloadQueue = new TaskQueue({
    maxConcurrent: MAX_CONCURRENT_DOWNLOADS,
    taskProcessor: trackDownloadProcessor
});

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è `enqueue` ---

async function getTracksInfo(url) {
    const info = await ytdl(url, { dumpSingleJson: true, retries: 2, "socket-timeout": 120 });
    if (!info) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Å—ã–ª–∫–µ.');

    const isPlaylist = Array.isArray(info.entries) && info.entries.length > 0;
    let tracksToProcess = [];

    if (isPlaylist) {
        tracksToProcess = info.entries
            .filter(e => e?.webpage_url && e?.id)
            .map(e => ({
                url: e.webpage_url,
                trackName: sanitizeFilename(e.title),
                uploader: e.uploader || 'SoundCloud'
            }));
    } else {
        tracksToProcess = [{
            url: info.webpage_url || url,
            trackName: sanitizeFilename(info.title),
            uploader: info.uploader || 'SoundCloud'
        }];
    }
    
    return { tracks: tracksToProcess, isPlaylist };
}

async function processTracksFromCache(userId, tracks) {
    const urls = tracks.map(t => t.url);
    const cachedTracksMap = await findCachedTracksByUrls(urls);

    const tasksToDownload = [];
    let sentFromCacheCount = 0;

    for (const track of tracks) {
        const cached = cachedTracksMap.get(track.url);
        if (cached) {
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                await bot.telegram.sendAudio(userId, cached.fileId, { caption: track.trackName, title: track.trackName });
                await saveTrackForUser(userId, track.trackName, cached.fileId);
                await incrementDownloads(userId);
                sentFromCacheCount++;
            } catch (err) {
                if (err.response?.error_code === 403) {
                    await updateUserField(userId, 'active', false);
                    return { tasksToDownload: [], sentFromCacheCount, wasBlocked: true };
                }
                if (err.description?.includes('FILE_REFERENCE_EXPIRED')) {
                    // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –∏—Å—Ç–µ–∫–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                    tasksToDownload.push(track);
                } else {
                    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞ –¥–ª—è ${userId}: ${err.message}`);
                }
            }
        } else {
            // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            tasksToDownload.push(track);
        }
    }

    if (sentFromCacheCount > 0) {
        await safeSendMessage(userId, `‚úÖ ${sentFromCacheCount} —Ç—Ä–µ–∫(–æ–≤) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏–∑ –∫—ç—à–∞.`);
    }

    return { tasksToDownload, sentFromCacheCount, wasBlocked: false };
}


// --- –û—Å–Ω–æ–≤–Ω–æ–π –≤—Ö–æ–¥–Ω–æ–π –º–µ—Ç–æ–¥ ---
export async function enqueue(ctx, userId, url) {
    try {
        await logUserActivity(userId);
        await resetDailyLimitIfNeeded(userId);

        const processingMessage = await safeSendMessage(userId, 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...');
        
        const { tracks, isPlaylist } = await getTracksInfo(url);
        
        if (processingMessage) {
            await bot.telegram.deleteMessage(userId, processingMessage.message_id).catch(() => {});
        }

        if (tracks.length === 0) {
            return await safeSendMessage(userId, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.');
        }

        // <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ï–¥–∏–Ω–∞—è, –±–æ–ª–µ–µ —á–∏—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        let user = await getUser(userId);
        let remainingLimit = user.premium_limit - user.downloads_today;

        if (remainingLimit <= 0) {
            return await safeSendMessage(userId, texts.limitReached);
        }
        
        let tracksToProcess = tracks;
        
        if (isPlaylist && user.premium_limit <= 10 && tracksToProcess.length > MAX_PLAYLIST_TRACKS_FREE) {
            await safeSendMessage(userId, `‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –¥–æ ${MAX_PLAYLIST_TRACKS_FREE} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞.`);
            tracksToProcess = tracksToProcess.slice(0, MAX_PLAYLIST_TRACKS_FREE);
        }
        
        // <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–¥–µ–ª—è–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∞
        const { tasksToDownload, wasBlocked } = await processTracksFromCache(userId, tracksToProcess);
        
        if (wasBlocked) return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –≤—ã—Ö–æ–¥–∏–º
        if (tasksToDownload.length === 0) return; // –í—Å–µ —Ç—Ä–µ–∫–∏ –±—ã–ª–∏ –≤ –∫—ç—à–µ

        // <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –∫—ç—à–∞
        user = await getUser(userId); // –í–∞–∂–Ω–æ! –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
        remainingLimit = user.premium_limit - user.downloads_today;

        if (remainingLimit <= 0) {
            return await safeSendMessage(userId, 'üö´ –í–∞—à –ª–∏–º–∏—Ç –±—ã–ª –∏—Å—á–µ—Ä–ø–∞–Ω —Ç—Ä–µ–∫–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–∑ –∫—ç—à–∞.');
        }

        const finalTasks = tasksToDownload.slice(0, remainingLimit);

        if (finalTasks.length < tasksToDownload.length) {
            await safeSendMessage(userId, `‚ö†Ô∏è –í–∞—à –ª–∏–º–∏—Ç: ${remainingLimit}. –î–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤.`);
        }
        
        if (finalTasks.length > 0) {
            await safeSendMessage(userId, `‚è≥ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å ${finalTasks.length} —Ç—Ä–µ–∫(–æ–≤). –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.`);
            
            if (isPlaylist) {
                const redisClient = getRedisClient();
                const playlistKey = `playlist:${userId}:${url}`;
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ Redis –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
                await redisClient.setEx(playlistKey, 3600, finalTasks.length.toString());
                await logEvent(userId, 'download_playlist');
            }
            
            for (const track of finalTasks) {
                downloadQueue.add({
                    userId,
                    ...track,
                    playlistUrl: isPlaylist ? url : null,
                    priority: user.premium_limit // –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                });
                await logEvent(userId, 'download');
            }
        }

    } catch (err) {
        if (err.message.includes('timed out')) {
            console.error(`‚ùå TimeoutError –≤ enqueue –¥–ª—è userId ${userId}:`, err.message);
            await safeSendMessage(userId, '‚ùå –û—à–∏–±–∫–∞: SoundCloud (–∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å) –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } else {
            console.error(`‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ enqueue –¥–ª—è userId ${userId}:`, err.stderr || err.message || err);
            await safeSendMessage(userId, texts.error + ' –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É.');
        }
    }
}