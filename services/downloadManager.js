// services/downloadManager.js (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import path from 'path';
import fs from 'fs';
import ytdl from 'youtube-dl-exec';
import { fileURLToPath } from 'url';
import crypto from 'crypto';

import { config } from '../config.js';
import { TaskQueue } from '../lib/TaskQueue.js';
import { getRedisClient, texts } from '../index.js';
import { getUser, incrementDownloads, saveTrackForUser, findCachedTrack, cacheTrack } from '../db.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(path.dirname(__filename));
const cacheDir = path.join(__dirname, 'cache');

function sanitizeFilename(name) { return (name || 'track').replace(/[<>:"/\\|?*]+/g, '').trim(); }

// --- –í–æ—Ä–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –¢–û–õ–¨–ö–û –º–µ–¥–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É: —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –∫—ç—à ---
async function trackDownloadProcessor(task) {
    const { ctx, userId, url } = task;
    let tempFilePath = null;
    
    try {
        console.log(`[Worker] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ (–ø—Ä–æ–º–∞—Ö –∫—ç—à–∞): ${url}`);
        
        const info = await ytdl(url, { dumpSingleJson: true });
        if (!info || Array.isArray(info.entries)) return; // –í–æ—Ä–∫–µ—Ä –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç—ã
        
        const trackName = sanitizeFilename(info.title).slice(0, config.TRACK_TITLE_LIMIT);
        const uploader = info.uploader || 'SoundCloud';
        tempFilePath = path.join(cacheDir, `${info.id || Date.now()}.mp3`);
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –û–î–ù–ò–ú –≤—ã–∑–æ–≤–æ–º ytdl
        await ytdl(url, {
            output: tempFilePath,
            extractAudio: true,
            audioFormat: 'mp3',
            embedMetadata: true,
            postprocessorArgs: `-metadata artist="${uploader}"`
        });
        
        if (!fs.existsSync(tempFilePath)) throw new Error('ytdl –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª');
        if ((await fs.promises.stat(tempFilePath)).size / (1024 * 1024) > config.TELEGRAM_FILE_LIMIT_MB) {
            await ctx.telegram.sendMessage(userId, `‚ùå –¢—Ä–µ–∫ "${trackName}" —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>50–ú–ë).`);
            return;
        }
        
        const message = await ctx.telegram.sendAudio(userId, { source: fs.createReadStream(tempFilePath) }, { title: trackName, performer: uploader });
        
        if (message?.audio?.file_id) {
            // –ì–õ–ê–í–ù–´–ô –ú–û–ú–ï–ù–¢: –ü–æ–ø–æ–ª–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await cacheTrack(url, message.audio.file_id, trackName);
            await saveTrackForUser(userId, trackName, message.audio.file_id);
        }
    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ –¥–ª—è ${url}:`, err.stderr || err.message);
        await ctx.telegram.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞.').catch(() => {});
    } finally {
        if (tempFilePath) await fs.promises.unlink(tempFilePath).catch(() => {});
    }
}

export const downloadQueue = new TaskQueue({
    maxConcurrent: config.MAX_CONCURRENT_DOWNLOADS,
    taskProcessor: trackDownloadProcessor,
});

// --- "–£–º–Ω–∞—è" enqueue —Å –¥–≤—É–º—è –∫–æ–Ω—Ç—É—Ä–∞–º–∏ ---
export async function enqueue(ctx, userId, url) {
    try {
        const user = await getUser(userId);
        if (user.downloads_today >= user.premium_limit) {
            return ctx.telegram.sendMessage(userId, texts.limitReached);
        }
        
        // --- –ö–û–ù–¢–£–† 1: –ë–´–°–¢–†–´–ô –ü–£–¢–¨ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞) ---
        const cachedFileId = await findCachedTrack(url);
        if (cachedFileId) {
            console.log(`‚ö°Ô∏è –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –ë–î-–∫—ç—à–∞: ${url}`);
            const updatedUser = await incrementDownloads(userId, "—Ç—Ä–µ–∫ –∏–∑ –∫—ç—à–∞", url);
            if (!updatedUser) return ctx.telegram.sendMessage(userId, texts.limitReached);
            
            await ctx.telegram.sendAudio(userId, cachedFileId);
            await saveTrackForUser(userId, "—Ç—Ä–µ–∫ –∏–∑ –∫—ç—à–∞", cachedFileId);
            return;
        }
        
        // --- –ö–û–ù–¢–£–† 2: –ú–ï–î–õ–ï–ù–ù–´–ô –ü–£–¢–¨ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏) ---
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        if (url.includes('/sets/')) {
            await ctx.reply('‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–ª–µ–π–ª–∏—Å—Ç...');
            const info = await ytdl(url, { flatPlaylist: true, dumpSingleJson: true });
            if (!info.entries) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç');
            
            const currentUser = await getUser(userId); // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∏–º–∏—Ç–∞–º
            let tracksToProcess = info.entries.slice(0, currentUser.premium_limit - currentUser.downloads_today);
            
            if (tracksToProcess.length < info.entries.length) {
                await ctx.reply(`‚ÑπÔ∏è –í–∞—à –ª–∏–º–∏—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ ${tracksToProcess.length} —Ç—Ä–µ–∫–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.`);
            }
            if (tracksToProcess.length === 0) {
                return ctx.reply(`üö´ –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.`);
            }
            
            await ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª—è—é ${tracksToProcess.length} —Ç—Ä–µ–∫–æ–≤. –û–Ω–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ —Ç—É –∂–µ enqueue
            for (const entry of tracksToProcess) {
                // –í—ã–∑—ã–≤–∞–µ–º enqueue –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ—à–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É –∫—ç—à–∞
                // –≠—Ç–æ –Ω–µ —Ä–µ–∫—É—Ä—Å–∏—è, –∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤
                await enqueue(ctx, userId, entry.url);
            }
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ (–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –∫—ç—à–µ)
        const updatedUser = await incrementDownloads(userId, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫", url);
        if (!updatedUser) {
            return ctx.telegram.sendMessage(userId, texts.limitReached);
        }
        await ctx.reply(`‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ. –ü–æ–∑–∏—Ü–∏—è: ~${downloadQueue.size}`);
        downloadQueue.add({ ctx, userId, url, priority: user.premium_limit });
        
    } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ enqueue –¥–ª—è ${userId}:`, e);
        await ctx.reply(texts.error);
    }
}