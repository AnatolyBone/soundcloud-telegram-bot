// services/downloadManager.js

import path from 'path';
import fs from 'fs';
import ytdl from 'youtube-dl-exec';
import { fileURLToPath } from 'url';
import { Markup } from 'telegraf';

import { TaskQueue } from '../lib/TaskQueue.js';
import { getRedisClient, texts } from '../index.js';
import { getUser, resetDailyLimitIfNeeded, incrementDownloads, saveTrackForUser, logEvent, logUserActivity } from '../db.js';

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(path.dirname(__filename));
const cacheDir = path.join(__dirname, 'cache');
const TELEGRAM_FILE_LIMIT_MB = 49;

function sanitizeFilename(name) {
    return (name || 'track').replace(/[<>:"/\\|?*]+/g, '').trim();
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –û–î–ù–û–ì–û —Ç—Ä–µ–∫–∞ (–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å) ---
async function trackDownloadProcessor(task) {
    const { ctx, userId, url, playlistUrl, trackName, trackId, uploader } = task;
    const redisClient = getRedisClient();
    let tempFilePath = null;

    console.log(`[Queue: ${downloadQueue.active}/${downloadQueue.maxConcurrent}] üöÄ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${trackName}`);

    try {
        const fileIdKey = `fileId:${url}`;
        tempFilePath = path.join(cacheDir, `${trackName}_${trackId}_${Date.now()}.mp3`);

        await ytdl(url, {
            extractAudio: true,
            audioFormat: 'mp3',
            output: tempFilePath,
            embedMetadata: true,
            // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è ffmpeg, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
            postprocessorArgs: `-metadata artist="${uploader || 'SoundCloud'}"`
        });
        
        const stats = await fs.promises.stat(tempFilePath);
        const fileSizeInMB = stats.size / (1024 * 1024);

        if (fileSizeInMB > TELEGRAM_FILE_LIMIT_MB) {
            console.warn(`‚ö†Ô∏è –§–∞–π–ª "${trackName}" —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${fileSizeInMB.toFixed(2)} MB).`);
            await ctx.telegram.sendMessage(userId, `‚ùå –¢—Ä–µ–∫ "${trackName}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ —Ä–∞–∑–º–µ—Ä (${fileSizeInMB.toFixed(2)} –ú–ë) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram –≤ 50 –ú–ë.`);
            return;
        }

        const message = await ctx.telegram.sendAudio(userId, { source: fs.createReadStream(tempFilePath) }, {
            title: trackName,
            performer: uploader || 'SoundCloud'
        });
        
        if (message?.audio?.file_id) {
            const fileId = message.audio.file_id;
            await redisClient.setEx(fileIdKey, 30 * 24 * 60 * 60, fileId); // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 30 –¥–Ω–µ–π
            await saveTrackForUser(userId, trackName, fileId);
        }

        // –õ–æ–≥–∏–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        if (playlistUrl) {
            const playlistKey = `playlist:${userId}:${playlistUrl}`;
            const remaining = await redisClient.decr(playlistKey);
            if (remaining <= 0) {
                await ctx.telegram.sendMessage(userId, '‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
                await redisClient.del(playlistKey);
            }
        }
    } catch (err) {
        if (err.response?.error_code === 403) {
            console.warn(`[UserDisconnectedError] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏.`);
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ "${trackName}":`, err);
            try {
                await ctx.telegram.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞: ${trackName}`);
            } catch (sendErr) { /* ignore if can't send */ }
        }
        throw err;
    } finally {
        if (tempFilePath && fs.existsSync(tempFilePath)) {
            await fs.promises.unlink(tempFilePath);
        }
    }
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ ---
export const downloadQueue = new TaskQueue({
    maxConcurrent: 8,
    taskProcessor: trackDownloadProcessor,
});

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
// services/downloadManager.js

// ... (trackDownloadProcessor, downloadQueue –∏ —É—Ç–∏–ª–∏—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

export async function enqueue(ctx, userId, url) {
    try {
        await logUserActivity(userId);
        await resetDailyLimitIfNeeded(userId);
        const user = await getUser(userId);
        let remainingLimit = user.premium_limit - user.downloads_today;

        if (remainingLimit <= 0) {
            return ctx.telegram.sendMessage(userId, texts.limitReached, Markup.inlineKeyboard([/*...*/]));
        }

        await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É, –∏—â—É —Ç—Ä–µ–∫–∏ –≤ –∫—ç—à–µ...');
        const info = await ytdl(url, { dumpSingleJson: true });
        
        const isPlaylist = Array.isArray(info.entries);
        let trackInfos = [];

        if (isPlaylist) {
            trackInfos = info.entries.filter(e => e?.webpage_url).map(e => ({
                url: e.webpage_url,
                trackId: e.id || e.title.replace(/\s/g, ''),
                trackName: sanitizeFilename(e.title).slice(0, 64),
                uploader: e.uploader || 'SoundCloud'
            }));
        } else {
            trackInfos = [{ url: info.webpage_url || url, trackId: info.id || info.title.replace(/\s/g, ''), trackName: sanitizeFilename(info.title).slice(0, 64), uploader: info.uploader || 'SoundCloud' }];
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
        if (trackInfos.length > remainingLimit) {
            await ctx.telegram.sendMessage(userId, `‚ö†Ô∏è –í –ø–ª–µ–π–ª–∏—Å—Ç–µ ${trackInfos.length} —Ç—Ä–µ–∫–æ–≤, –Ω–æ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${remainingLimit}. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ ${remainingLimit}.`);
            trackInfos = trackInfos.slice(0, remainingLimit);
        }

        const redisClient = getRedisClient();
        const tasksForQueue = []; 
        const tasksFromCache = [];

        // –†–∞–∑–¥–µ–ª—è–µ–º —Ç—Ä–µ–∫–∏ –Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –Ω–µ–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        await Promise.all(trackInfos.map(async (track) => {
            const fileIdKey = `fileId:${track.url}`;
            const cachedFileId = await redisClient.get(fileIdKey);
            if (cachedFileId) {
                tasksFromCache.push({ ...track, fileId: cachedFileId });
            } else {
                tasksForQueue.push(track);
            }
        }));

        // === –ë–´–°–¢–†–´–ô –ü–£–¢–¨: –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –∫—ç—à–∞ –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 10 ===
        if (tasksFromCache.length > 0) {
            console.log(`‚ö°Ô∏è –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: ${tasksFromCache.length} —Ç—Ä–µ–∫–æ–≤. –û—Ç–ø—Ä–∞–≤–ª—è—é –≥—Ä—É–ø–ø–∞–º–∏.`);
            
            // –ê—Ç–æ–º–∞—Ä–Ω–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –í–°–ï–• –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
            await pool.query(
                `UPDATE users SET downloads_today = downloads_today + $1, total_downloads = total_downloads + $1 WHERE id = $2`,
                [tasksFromCache.length, userId]
            );
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ 10
            const CHUNK_SIZE = 10;
            for (let i = 0; i < tasksFromCache.length; i += CHUNK_SIZE) {
                const chunk = tasksFromCache.slice(i, i + CHUNK_SIZE);
                const mediaGroup = chunk.map(track => ({
                    type: 'audio',
                    media: track.fileId,
                    title: track.trackName,
                    performer: track.uploader
                }));
                
                try {
                    await ctx.telegram.sendMediaGroup(userId, mediaGroup);
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await Promise.all(chunk.map(track => saveTrackForUser(userId, track.trackName, track.fileId)));
                } catch (e) {
                     console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ MediaGroup, –ø—Ä–æ–±—É—é –ø–æ –æ–¥–Ω–æ–º—É.`, e.message);
                     // –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –ø–æ –æ–¥–Ω–æ–º—É
                     for(const track of chunk) {
                        try { await ctx.telegram.sendAudio(userId, track.fileId); } catch(e) {}
                     }
                }
            }
            await ctx.reply(`‚úÖ ${tasksFromCache.length} —Ç—Ä–µ–∫(–æ–≤) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏–∑ –∫—ç—à–∞!`);
        }
        
        // === –ú–ï–î–õ–ï–ù–ù–´–ô –ü–£–¢–¨: –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ===
        if (tasksForQueue.length > 0) {
            if (isPlaylist) {
                const playlistKey = `playlist:${userId}:${url}`;
                await redisClient.setEx(playlistKey, 3600, tasksForQueue.length);
                await logEvent(userId, 'download_playlist');
            }

            // –ê—Ç–æ–º–∞—Ä–Ω–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö, –∫—Ç–æ –∏–¥–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å
            await pool.query(
                `UPDATE users SET downloads_today = downloads_today + $1, total_downloads = total_downloads + $1 WHERE id = $2`,
                [tasksForQueue.length, userId]
            );

            for (const track of tasksForQueue) {
                downloadQueue.add({
                    ctx, userId, ...track,
                    playlistUrl: isPlaylist ? url : null,
                    priority: user.premium_limit,
                });
                await logEvent(userId, 'download');
            }
            
            await ctx.telegram.sendMessage(userId, `‚è≥ ${tasksForQueue.length} —Ç—Ä–µ–∫(–æ–≤) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.`);
        }

    } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ enqueue –¥–ª—è userId ${userId}:`, e);
        await ctx.reply(texts.error + '\n–í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.');
    }
}