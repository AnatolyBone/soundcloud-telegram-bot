// services/downloadManager.js

import path from 'path';
import fs from 'fs';
import ytdl from 'youtube-dl-exec';
import { fileURLToPath } from 'url';
import { Markup } from 'telegraf';
import crypto from 'crypto';
import { fileTypeFromFile } from 'file-type';

import { TaskQueue } from '../lib/TaskQueue.js';
import { getRedisClient, texts } from '../index.js';
import { pool, getUser, resetDailyLimitIfNeeded, saveTrackForUser, logEvent, logUserActivity } from '../db.js';

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(path.dirname(__filename));
const cacheDir = path.join(__dirname, 'cache');
const TELEGRAM_FILE_LIMIT_MB = 49;
const MAX_PLAYLIST_TRACKS_FREE = 10;
const TRACK_TITLE_LIMIT = 100;

function sanitizeFilename(name) {
    return (name || 'track').replace(/[<>:"/\\|?*]+/g, '').trim();
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –û–î–ù–û–ì–û —Ç—Ä–µ–∫–∞ (–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å) ---
async function trackDownloadProcessor(task) {
    const { ctx, userId, url, playlistUrl, trackName, trackId, uploader } = task;
    const redisClient = getRedisClient();
    let tempFilePath = null;

    console.log(`[Queue: ${downloadQueue.active}/${downloadQueue.maxConcurrent}] üöÄ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${trackName}`);

    try {
        const fileIdKey = `fileId:${url}`;
        tempFilePath = path.join(cacheDir, `${trackId}-${crypto.randomUUID()}.mp3`);

        await ytdl(url, {
            extractAudio: true,
            audioFormat: 'mp3',
            output: tempFilePath,
            embedMetadata: true,
            postprocessorArgs: `-metadata artist="${uploader || 'SoundCloud'}"`
        });
        
        const stats = await fs.promises.stat(tempFilePath);
        const fileSizeInMB = stats.size / (1024 * 1024);

        if (fileSizeInMB > TELEGRAM_FILE_LIMIT_MB) {
            console.warn(`‚ö†Ô∏è –§–∞–π–ª "${trackName}" —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${fileSizeInMB.toFixed(2)} MB).`);
            await ctx.telegram.sendMessage(userId, `‚ùå –¢—Ä–µ–∫ "${trackName}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ —Ä–∞–∑–º–µ—Ä (${fileSizeInMB.toFixed(2)} –ú–ë) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram –≤ 50 –ú–ë.`);
            return;
        }

        const message = await ctx.telegram.sendAudio(userId, { source: fs.createReadStream(tempFilePath) }, {
            title: trackName,
            performer: uploader || 'SoundCloud'
        });
        
        if (message?.audio?.file_id) {
            // Redis-–∫–ª–∏–µ–Ω—Ç v4 –æ–∂–∏–¥–∞–µ—Ç (key: string, seconds: number, value: string)
            await redisClient.setEx(fileIdKey, 30 * 24 * 60 * 60, message.audio.file_id);
            await saveTrackForUser(userId, trackName, message.audio.file_id);
        }

        if (playlistUrl) {
            const playlistKey = `playlist:${userId}:${playlistUrl}`;
            const remaining = await redisClient.decr(playlistKey);
            if (remaining <= 0) {
                await ctx.telegram.sendMessage(userId, '‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
                await redisClient.del(playlistKey);
            }
        }
    } catch (err) {
        if (err.response?.error_code === 403) {
            console.warn(`[UserDisconnectedError] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ "${trackName}":`, err.stderr || err.message);
        }
        throw err;
    } finally {
        if (tempFilePath && fs.existsSync(tempFilePath)) {
            await fs.promises.unlink(tempFilePath);
        }
    }
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ ---
export const downloadQueue = new TaskQueue({
    maxConcurrent: 8,
    taskProcessor: trackDownloadProcessor,
});

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
export async function enqueue(ctx, userId, url) {
    try {
        await logUserActivity(userId);
        await resetDailyLimitIfNeeded(userId);
        const user = await getUser(userId);
        let remainingLimit = user.premium_limit - user.downloads_today;

        if (remainingLimit <= 0) {
            return ctx.telegram.sendMessage(userId, texts.limitReached, Markup.inlineKeyboard([/*...*/]));
        }

        await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É, –∏—â—É —Ç—Ä–µ–∫–∏ –≤ –∫—ç—à–µ...');
        
        const redisClient = getRedisClient();
        const infoKey = `meta:${url}`;
        let info;
        const cachedInfo = await redisClient.get(infoKey);

        if (cachedInfo) {
            console.log(`[Cache] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è ${url} –≤–∑—è—Ç—ã –∏–∑ Redis.`);
            info = JSON.parse(cachedInfo);
        } else {
            info = await ytdl(url, { dumpSingleJson: true });
            if (info) {
                let infoString;
                try {
                    infoString = JSON.stringify(info);
                } catch (e) {
                    console.error(`[Cache] –û—à–∏–±–∫–∞ JSON.stringify –¥–ª—è ${url}:`, e);
                    infoString = null;
                }
                if (infoString && infoString !== '{}') {
                    // TTL - —á–∏—Å–ª–æ, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å—Ç—Ä–æ–∫–∞. –í—Å–µ –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ.
                    await redisClient.setEx(infoKey, 300, infoString);
                }
            }
        }
        
        if (!info) {
             throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è ${url}`);
        }

        const isPlaylist = Array.isArray(info.entries);
        let trackInfos = [];

        if (isPlaylist) {
            trackInfos = info.entries.filter(e => e?.webpage_url).map(e => ({
                url: e.webpage_url,
                trackId: e.id || e.title.replace(/\s/g, ''),
                trackName: sanitizeFilename(e.title).slice(0, TRACK_TITLE_LIMIT),
                uploader: e.uploader || 'SoundCloud'
            }));
        } else {
            trackInfos = [{ url: info.webpage_url || url, trackId: info.id || info.title.replace(/\s/g, ''), trackName: sanitizeFilename(info.title).slice(0, TRACK_TITLE_LIMIT), uploader: info.uploader || 'SoundCloud' }];
        }
        
        if (isPlaylist && user.premium_limit <= 10 && trackInfos.length > MAX_PLAYLIST_TRACKS_FREE) {
            await ctx.telegram.sendMessage(userId, `‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ ${MAX_PLAYLIST_TRACKS_FREE} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞.`);
            trackInfos = trackInfos.slice(0, MAX_PLAYLIST_TRACKS_FREE);
        }
        
        if (trackInfos.length > remainingLimit) {
            await ctx.telegram.sendMessage(userId, `‚ö†Ô∏è –í –ø–ª–µ–π–ª–∏—Å—Ç–µ ${trackInfos.length} —Ç—Ä–µ–∫–æ–≤, –Ω–æ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${remainingLimit}.`);
            trackInfos = trackInfos.slice(0, remainingLimit);
        }

        const tasksForQueue = []; 
        const tasksFromCache = [];

        await Promise.all(trackInfos.map(async (track) => {
            const cachedFileId = await redisClient.get(`fileId:${track.url}`);
            if (cachedFileId) {
                tasksFromCache.push({ ...track, fileId: cachedFileId });
            } else {
                tasksForQueue.push(track);
            }
        }));

        if (tasksFromCache.length > 0) {
            await pool.query(`UPDATE users SET downloads_today = downloads_today + $1, total_downloads = total_downloads + $1 WHERE id = $2`, [tasksFromCache.length, userId]);
            
            const CHUNK_SIZE = 10;
            for (let i = 0; i < tasksFromCache.length; i += CHUNK_SIZE) {
                const chunk = tasksFromCache.slice(i, i + CHUNK_SIZE);
                const mediaGroup = chunk.map(track => ({ type: 'audio', media: track.fileId, title: track.trackName, performer: track.uploader }));
                try {
                    await ctx.telegram.sendMediaGroup(userId, mediaGroup);
                } catch (e) {
                    for (const track of chunk) {
                        try {
                            await ctx.telegram.sendAudio(userId, track.fileId, { title: track.trackName, performer: track.uploader });
                        } catch (err) {
                            if (err.description?.includes('FILE_REFERENCE_EXPIRED')) {
                                await redisClient.del(`fileId:${track.url}`);
                                tasksForQueue.push(track);
                            }
                        }
                    }
                }
            }
            
            tasksFromCache.forEach(track => saveTrackForUser(userId, track.trackName, track.fileId).catch(console.warn));
            await ctx.reply(`‚úÖ ${tasksFromCache.length} —Ç—Ä–µ–∫(–æ–≤) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏–∑ –∫—ç—à–∞!`);
        }
        
        if (tasksForQueue.length > 0) {
            if (isPlaylist) {
                const playlistKey = `playlist:${userId}:${url}`;
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è Redis v4
                await redisClient.setEx(playlistKey, 3600, tasksForQueue.length.toString());
                await logEvent(userId, 'download_playlist');
            }
            await pool.query(`UPDATE users SET downloads_today = downloads_today + $1, total_downloads = total_downloads + $1 WHERE id = $2`, [tasksForQueue.length, userId]);
            for (const track of tasksForQueue) {
                downloadQueue.add({ ctx, userId, ...track, playlistUrl: isPlaylist ? url : null, priority: user.premium_limit });
                await logEvent(userId, 'download');
            }
            await ctx.telegram.sendMessage(userId, `‚è≥ ${tasksForQueue.length} —Ç—Ä–µ–∫(–æ–≤) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.`);
        }

    } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ enqueue:`, e);
        await ctx.reply(texts.error);
    }
}