<%# views/dashboard.ejs %>
<% title = '–ê–¥–º–∏–Ω–∫–∞'; page = 'dashboard'; %>

<section class="content-header">
  <div class="container-fluid d-flex justify-content-between align-items-center mb-3">
    <h1>üìä –ê–¥–º–∏–Ω–∫–∞</h1>
    <small>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <%= user ? (user.username || user.first_name) : '–ì–æ—Å—Ç—å' %></small>
  </div>
</section>

<form id="filtersForm" class="mb-3 d-flex gap-2 align-items-center flex-wrap">
  <label for="periodSelectMain" class="form-label mb-0">–ü–µ—Ä–∏–æ–¥:</label>
  <select id="periodSelectMain" name="period" class="form-select form-select-sm" style="width: auto;">
    <option value="7" <%= period === '7' ? 'selected' : '' %>>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</option>
    <option value="30" <%= period === '30' ? 'selected' : '' %>>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π</option>
    <% lastMonths.forEach(m => { %>
      <option value="<%= m.value %>" <%= period === m.value ? 'selected' : '' %>><%= m.label %></option>
    <% }) %>
    <option value="all" <%= period === 'all' ? 'selected' : '' %>>–í–µ—Å—å –ø–µ—Ä–∏–æ–¥</option>
  </select>
  
  <div class="form-check ms-3">
    <input class="form-check-input" type="checkbox" id="showInactive" name="showInactive" value="true" <%= showInactive ? 'checked' : '' %>>
    <label class="form-check-label" for="showInactive">–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö</label>
  </div>

  <a href="/export?period=<%= encodeURIComponent(period) %>" id="exportLink" class="btn btn-outline-secondary ms-2">–í—ã–≥—Ä—É–∑–∏—Ç—å CSV</a>
</form>

<section class="content">
  <div class="container-fluid">
    <div class="tab-content mt-3" id="dashboardTabsContent">
      <div class="tab-pane fade show active" id="stats" role="tabpanel" aria-labelledby="stats-tab">
        <div class="row mb-3">
            <div class="col-md-6">
                <div class="info-box bg-primary shadow-sm"><span class="info-box-icon"><i class="fas fa-cogs"></i></span>
                    <div class="info-box-content"><span class="info-box-text">–ó–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ</span><span class="info-box-number" id="queueActive">...</span></div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="info-box bg-secondary shadow-sm"><span class="info-box-icon"><i class="fas fa-hourglass-half"></i></span>
                    <div class="info-box-content"><span class="info-box-text">–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏</span><span class="info-box-number" id="queueSize">...</span></div>
                </div>
            </div>
        </div>
        <div class="row mb-3">
          <div class="col-md-4">
            <div class="info-box bg-info"><span class="info-box-icon"><i class="fas fa-users"></i></span>
              <div class="info-box-content"><span class="info-box-text">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</span><span class="info-box-number" data-stat="totalUsers">...</span></div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="info-box bg-success"><span class="info-box-icon"><i class="fas fa-download"></i></span>
              <div class="info-box-content"><span class="info-box-text">–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫</span><span class="info-box-number" data-stat="totalDownloads">...</span></div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="info-box bg-warning"><span class="info-box-icon"><i class="fas fa-star"></i></span>
              <div class="info-box-content"><span class="info-box-text">–¢–∞—Ä–∏—Ñ—ã (F/P/P/U)</span>
                <span class="info-box-number" data-stat="tariffs">... / ... / ... / ...</span>
              </div>
            </div>
          </div>
        </div>
        <div class="card card-primary card-outline">
          <div class="card-header"><h3 class="card-title">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ó–∞–≥—Ä—É–∑–∫–∏, –ê–∫—Ç–∏–≤–Ω—ã–µ</h3></div>
          <div class="card-body"><canvas id="combinedChart" style="height: 250px;"></canvas></div>
        </div>
      </div>
    </div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    let charts = {};

    function initializeOrUpdateChart(id, type, data, options) {
        const ctx = document.getElementById(id)?.getContext('2d');
        if (!ctx) return;
        if (charts[id]) charts[id].destroy();
        charts[id] = new Chart(ctx, { type, data, options });
    }
    
    const filtersForm = document.getElementById('filtersForm');

    async function updateDashboard() {
        const formData = new FormData(filtersForm);
        const params = new URLSearchParams(formData);
        document.body.style.cursor = 'wait';
        
        try {
            const statsResponse = await fetch(`/api/dashboard-data?${params.toString()}`);
            if (!statsResponse.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            const statsData = await statsResponse.json();

            document.querySelector('[data-stat="totalUsers"]').textContent = statsData.stats.totalUsers;
            document.querySelector('[data-stat="totalDownloads"]').textContent = statsData.stats.totalDownloads;
            document.querySelector('[data-stat="tariffs"]').textContent = `${statsData.stats.free}/${statsData.stats.plus}/${statsData.stats.pro}/${statsData.stats.unlimited}`;
            initializeOrUpdateChart('combinedChart', 'line', statsData.chartDataCombined, { responsive: true, scales: { y: { beginAtZero: true } } });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } finally {
            document.body.style.cursor = 'default';
        }
    }
    
    updateDashboard();
    filtersForm.addEventListener('change', updateDashboard);
    
    const queueActiveEl = document.getElementById('queueActive');
    const queueSizeEl = document.getElementById('queueSize');
    async function updateQueueStatus() {
        try {
            const response = await fetch('/api/queue-status');
            if (!response.ok) return;
            const data = await response.json();
            queueActiveEl.textContent = data.active;
            queueSizeEl.textContent = data.size;
        } catch (e) {
            queueActiveEl.textContent = 'err';
            queueSizeEl.textContent = 'err';
        }
    }
    updateQueueStatus();
    setInterval(updateQueueStatus, 5000);
  });
</script>