// db.js

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');

// Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// PostgreSQL pool
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
async function query(text, params) {
  const start = Date.now();
  const res = await pool.query(text, params);
  const duration = Date.now() - start;
  console.log('executed query', { text, duration, rows: res.rowCount });
  return res;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createUser(id, username, first_name) {
  await query(`
    INSERT INTO users (id, username, first_name, downloads_today, premium_limit, total_downloads, has_reviewed)
    VALUES ($1, $2, $3, 0, 10, 0, false)
    ON CONFLICT (id) DO NOTHING
  `, [id, username, first_name]);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUser(id) {
  const res = await query('SELECT * FROM users WHERE id = $1', [id]);
  return res.rows[0];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
async function updateUserField(id, field, value) {
  return (await query(`UPDATE users SET ${field} = $1 WHERE id = $2`, [value, id])).rowCount;
}

// –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–æ–∫ –∏ –æ–±—â–µ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞
async function incrementDownloads(id, trackTitle) {
  await query(`
    UPDATE users SET 
      downloads_today = downloads_today + 1,
      total_downloads = total_downloads + 1
    WHERE id = $1
  `, [id]);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –ø–æ–ª–µ tracks_today
async function saveTrackForUser(id, title) {
  const user = await getUser(id);
  let updated = user.tracks_today || '';
  updated = updated ? `${updated},${title}` : title;
  await query('UPDATE users SET tracks_today = $1 WHERE id = $2', [updated, id]);
}

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å—Ä–æ–∫–æ–º
async function setPremium(id, limit, days = null) {
  await query('UPDATE users SET premium_limit = $1 WHERE id = $2', [limit, id]);
  if (days) {
    const until = new Date(Date.now() + days * 86400000).toISOString();
    await query('UPDATE users SET premium_until = $1 WHERE id = $2', [until, id]);
  }
}

// –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
async function resetDailyLimitIfNeeded(userId) {
  const { rows } = await pool.query('SELECT downloads_today, last_checked FROM users WHERE id = $1', [userId]);
  if (!rows.length) return;

  const user = rows[0];
  const now = new Date();
  const lastChecked = new Date(user.last_checked);

  const hoursPassed = (now - lastChecked) / (1000 * 60 * 60);

  if (hoursPassed >= 24) {
    await pool.query(`
      UPDATE users
      SET downloads_today = 0,
          tracks_today = $1,
          last_checked = NOW()
      WHERE id = $2
    `, [JSON.stringify([]), userId]);
    console.log(`üïõ –°—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getAllUsers() {
  const res = await query('SELECT * FROM users');
  return res.rows;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
async function addReview(userId, text) {
  const time = new Date().toISOString();

  const { error } = await supabase
    .from('reviews')
    .insert([{ user_id: userId, text, time }]);

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ –≤ Supabase:', error);
  }

  await query('UPDATE users SET has_reviewed = true WHERE id = $1', [userId]);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –æ—Ç–∑—ã–≤
async function hasLeftReview(userId) {
  const res = await query('SELECT has_reviewed FROM users WHERE id = $1', [userId]);
  return res.rows[0]?.has_reviewed;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ Supabase
async function getLatestReviews(limit = 10) {
  const { data, error } = await supabase
    .from('reviews')
    .select('*')
    .order('time', { ascending: false })
    .limit(limit);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
    return [];
  }

  return data;
}

module.exports = {
  createUser,
  getUser,
  updateUserField,
  incrementDownloads,
  setPremium,
  getAllUsers,
  resetDailyStats,
  addReview,
  saveTrackForUser,
  hasLeftReview,
  getLatestReviews,
  resetDailyLimitIfNeeded
};