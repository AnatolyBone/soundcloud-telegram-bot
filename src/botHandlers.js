// src/botHandlers.js

import { Markup } from 'telegraf';
import { T } from '../config/texts.js';
import { getUser, updateUserField, setPremium, getAllUsers } from '../db.js';
import { enqueue, downloadQueue } from '../services/downloadManager.js';
import { formatMenuMessage, isSubscribed, extractUrl } from './utils.js';
import { ADMIN_ID, WEBHOOK_URL } from '../config.js';

const kb = () => Markup.keyboard([[T('menu'), T('upgrade')], [T('mytracks'), T('help')]]).resize();

export function setupTelegramHandlers(bot) {
    bot.use(async (ctx, next) => {
        const userId = ctx.from?.id;
        if (!userId) return next();
        try {
            ctx.state.user = await getUser(userId, ctx.from.first_name, ctx.from.username);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –≤ –º–∏–¥–ª–≤–∞—Ä–µ –¥–ª—è userId ${userId}:`, error);
        }
        return next();
    });

    const getBonusKeyboard = (user) => {
        const keyboard = [];
        if (!user.subscribed_bonus_used) {
            keyboard.push([{ text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!', callback_data: 'check_subscription' }]);
        }
        return { inline_keyboard: keyboard };
    };

    bot.action('check_subscription', async (ctx) => {
        try {
            const user = ctx.state.user || await getUser(ctx.from.id);
            if (user.subscribed_bonus_used) {
                return await ctx.answerCbQuery('–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —ç—Ç–æ—Ç –±–æ–Ω—É—Å. –°–ø–∞—Å–∏–±–æ!', { show_alert: true });
            }
            const channel = '@SCM_BLOG';
            if (await isSubscribed(ctx.from.id, channel, bot)) {
                await setPremium(ctx.from.id, 30, 7);
                await updateUserField(ctx.from.id, 'subscribed_bonus_used', true);
                await ctx.editMessageText(
                    'üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: *7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus*.\n\n–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –Ω–∞–∂–º–∏—Ç–µ /menu.',
                    { parse_mode: 'Markdown' }
                );
            } else {
                await ctx.answerCbQuery('–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.', { show_alert: true });
                await ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ${channel}, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑.`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/SCM_BLOG' }],
                            [{ text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!', callback_data: 'check_subscription' }]
                        ]
                    }
                });
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ check_subscription:', e);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
        }
    });

    bot.start(async (ctx) => {
        try {
            const user = ctx.state.user || await getUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
            const messageText = formatMenuMessage(user, ctx, T);
            await ctx.reply(messageText, { reply_markup: getBonusKeyboard(user) });
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', kb());
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –≤ /start:', e);
        }
    });

    bot.hears(T('menu'), async (ctx) => {
        try {
            const user = ctx.state.user || await getUser(ctx.from.id);
            const messageText = formatMenuMessage(user, ctx, T);
            await ctx.reply(messageText, { reply_markup: getBonusKeyboard(user) });
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –≤ hears(menu):', e);
        }
    });

    bot.hears(T('upgrade'), async (ctx) => {
        try {
            await ctx.replyWithMarkdown(T('upgradeInfo'), { disable_web_page_preview: true });
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –≤ hears(upgrade):', e);
        }
    });

    bot.hears(T('help'), (ctx) => ctx.reply(T('helpInfo'), kb()));
    bot.hears(T('mytracks'), (ctx) => ctx.reply("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", kb()));

    bot.command('admin', async (ctx) => {
        if (ctx.from.id.toString() !== ADMIN_ID.toString()) return;
        try {
            const stats = await getDashboardStats(); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            const dashboardUrl = WEBHOOK_URL.replace(/\/$/, '');
            
            const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞</b>
üë§ –í—Å–µ–≥–æ: <i>${stats.totalUsers}</i>
üì• –ó–∞–≥—Ä—É–∑–æ–∫: <i>${stats.totalDownloads}</i>
‚öôÔ∏è –û—á–µ—Ä–µ–¥—å: <i>${downloadQueue.active} / ${downloadQueue.size}</i>
üîó <a href="${dashboardUrl}/admin">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</a>`;
            
            await ctx.replyWithHTML(message.trim());
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin:', e);
        }
    });

    bot.on('text', async (ctx) => {
        try {
            const url = extractUrl(ctx.message.text);
            if (url) {
                await enqueue(ctx, ctx.from.id, url);
            } else {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                const commandTexts = Object.values(allTextsSync());
                if (!commandTexts.includes(ctx.message.text)) {
                    await ctx.reply(T('start'));
                }
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –≤ on(text):', e);
        }
    });
}