import path from 'path';
import fs from 'fs';
import { supabase } from '../db.js';  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à Supabase —ç–∫–∑–µ–º–ø–ª—è—Ä

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
export function getTariffName(limit) {
  if (limit >= 1000) return 'Unlimited (‚àû/–¥–µ–Ω—å)';
  if (limit === 100) return 'Pro (100/–¥–µ–Ω—å)';
  if (limit === 30) return 'Plus (30/–¥–µ–Ω—å)';
  return 'Free (5/–¥–µ–Ω—å)';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏
export function getDaysLeft(premiumUntil) {
  if (!premiumUntil) return 0;
  const diff = new Date(premiumUntil) - new Date();
  return Math.max(Math.ceil(diff / 86400000), 0);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ —Å SoundCloud –∏–∑ —Ç–µ–∫—Å—Ç–∞
export const extractUrl = (text = '') => {
  const regex = /(https?:\/\/[^\s]+)/g;
  const matches = text.match(regex);
  return matches ? matches.find(url => url.includes('soundcloud.com')) : null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
export const isSubscribed = async (userId, channelUsername, bot) => {
  try {
    const chatMember = await bot.telegram.getChatMember(channelUsername, userId);
    return ['creator', 'administrator', 'member'].includes(chatMember.status);
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ ${channelUsername}:`, e.message);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function formatMenuMessage(user, ctx) {
  const tariffLabel = getTariffName(user.premium_limit);
  const downloadsToday = user.downloads_today || 0;
  const refLink = `https://t.me/${ctx.botInfo.username}?start=${user.id}`;
  const daysLeft = getDaysLeft(user.premium_until);

  let message = `
üîπ –ü—Ä–∏–≤–µ—Ç, ${user.first_name || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

üìà –ë–æ—Ç –∫–∞—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏ –ø—Ä–µ–≤–æ–¥–∏—Ç –∏—Ö –≤ MP3 ‚Äî –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ —Å SoundCloud.

üîî –ù–æ–≤–æ—Å—Ç–∏, —Ç–µ–∫—Å—Ç—ã –∏ –±–æ–Ω—É—Å—ã: @SCM_BLOG

üåç –¢–∞—Ä–∏—Ñ: ${tariffLabel}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft > 999 ? '‚àû' : daysLeft}
üîã –°–∫–∞—á–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${downloadsToday} –∏–∑ ${user.premium_limit}

üõ† –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
${refLink}
`.trim();

  if (!user.subscribed_bonus_used) {
    message += `

üí• –ë–æ–Ω—É—Å! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @SCM_BLOG –∏ –ø–æ–ª—É—á–∏—Ç–µ 7 –¥–Ω–µ–π Plus –±–µ—Å–ø–ª–∞—Ç–Ω–æ.`;
  }

  return message;
}

// ===== –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ =====
export async function cleanupCache(directory, maxAgeMinutes = 60) {
  try {
    const now = Date.now();
    const files = await fs.promises.readdir(directory);
    let cleaned = 0;
    for (const file of files) {
      try {
        const filePath = path.join(directory, file);
        const stat = await fs.promises.stat(filePath);
        if ((now - stat.mtimeMs) / 60000 > maxAgeMinutes) {
          await fs.promises.unlink(filePath);
          cleaned++;
        }
      } catch {}
    }
    if (cleaned > 0) console.log(`[Cache Cleanup] –£–¥–∞–ª–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤.`);
  } catch (e) {
    if (e.code !== 'ENOENT') console.error('[Cache Cleanup] –û—à–∏–±–∫–∞:', e);
  }
}

// –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è
// –í utils.js
export async function startIndexer() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞...');
  await new Promise(resolve => setTimeout(resolve, 60 * 1000));  // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
  while (true) {
    try {
      const urls = await getUrlsToIndex();
      if (urls.length > 0) {
        console.log(`[Indexer] –ù–∞–π–¥–µ–Ω–æ ${urls.length} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —É–ø—Ä–µ–∂–¥–∞—é—â–µ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.`);
        for (const url of urls) {
          await processUrlForIndexing(url);
          await new Promise(resolve => setTimeout(resolve, 30 * 1000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 30 —Å–µ–∫—É–Ω–¥
        }
      }
      console.log('[Indexer] –ü–∞—É–∑–∞ –Ω–∞ 1 —á–∞—Å.');
      await new Promise(resolve => setTimeout(resolve, 60 * 60 * 1000)); // –ü–∞—É–∑–∞ 1 —á–∞—Å
    } catch (err) {
      console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç:", err);
      await new Promise(resolve => setTimeout(resolve, 5 * 60 * 1000)); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ URL-–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
export async function getUrlsToIndex() {
  // –í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL-–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const { data, error } = await supabase
    .from('tracks')  // –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
    .select('url')   // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª–µ URL
    .eq('status', 'pending');  // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –≤ —Å—Ç–∞—Ç—É—Å–µ 'pending'

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL-–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:', error);
    return [];
  }

  return data.map(item => item.url);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ URL –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
export async function processUrlForIndexing(url) {
  try {
    // –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é URL: ${url}`);
    // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL ${url}:`, err);
  }
}