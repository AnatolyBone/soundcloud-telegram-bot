import path from 'path';
import fs from 'fs';
import { supabase } from './db.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
export function getTariffName(limit) {
  if (limit >= 1000) return 'Unlimited (‚àû/–¥–µ–Ω—å)';
  if (limit === 100) return 'Pro (100/–¥–µ–Ω—å)';
  if (limit === 30) return 'Plus (30/–¥–µ–Ω—å)';
  return 'Free (5/–¥–µ–Ω—å)';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞
export function getDaysLeft(premiumUntil) {
  if (!premiumUntil) return 0;
  const diff = new Date(premiumUntil) - new Date();
  return Math.max(Math.ceil(diff / 86400000), 0);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
export const extractUrl = (text = '') => {
  const regex = /(https?:\/\/[^\s]+)/g;
  const matches = text.match(regex);
  return matches ? matches.find(url => url.includes('soundcloud.com')) : null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
export const isSubscribed = async (userId, channelUsername, bot) => {
  try {
    const chatMember = await bot.telegram.getChatMember(channelUsername, userId);
    return ['creator', 'administrator', 'member'].includes(chatMember.status);
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${userId} –Ω–∞ ${channelUsername}:`, e.message);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é
export function formatMenuMessage(user, ctx) {
  const tariffLabel = getTariffName(user.premium_limit);
  const downloadsToday = user.downloads_today || 0;
  const refLink = `https://t.me/${ctx.botInfo.username}?start=${user.id}`;
  const daysLeft = getDaysLeft(user.premium_until);

  let message = `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name || user.username || '–¥—Ä—É–≥'}!

üì• –ë–æ—Ç –∫–∞—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å SoundCloud –≤ MP3 ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É.

üì£ –ù–æ–≤–æ—Å—Ç–∏, —Ñ–∏—à–∫–∏ –∏ –±–æ–Ω—É—Å—ã: @SCM_BLOG

üíº –¢–∞—Ä–∏—Ñ: ${tariffLabel}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft > 999 ? '‚àû' : daysLeft}
üéß –°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ: ${downloadsToday} –∏–∑ ${user.premium_limit}

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
${refLink}
`.trim();

  if (!user.subscribed_bonus_used) {
    message += `

üéÅ –ë–æ–Ω—É—Å! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @SCM_BLOG –∏ –ø–æ–ª—É—á–∏ 7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus –±–µ—Å–ø–ª–∞—Ç–Ω–æ.`;
  }

  return message;
}

// ===== –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ =====
export async function cleanupCache(directory, maxAgeMinutes = 60) {
  try {
    const now = Date.now();
    const files = await fs.promises.readdir(directory);
    let cleaned = 0;
    for (const file of files) {
      try {
        const filePath = path.join(directory, file);
        const stat = await fs.promises.stat(filePath);
        if ((now - stat.mtimeMs) / 60000 > maxAgeMinutes) {
          await fs.promises.unlink(filePath);
          cleaned++;
        }
      } catch {}
    }
    if (cleaned > 0) console.log(`[Cache Cleanup] –£–¥–∞–ª–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤.`);
  } catch (e) {
    if (e.code !== 'ENOENT') console.error('[Cache Cleanup] –û—à–∏–±–∫–∞:', e);
  }
}

// –ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä
export async function getUrlsToIndex() {
  try {
    const { data, error } = await supabase
      .from('track_cache')
      .select('url, file_id')
      .is('file_id', null)
      .not('url', 'is', null)
      .limit(20);

    if (error) {
      console.error('[Indexer] –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ track_cache:', error.message);
      return [];
    }

    const urls = (data || [])
      .map(r => r.url)
      .filter(u => typeof u === 'string' && u.includes('soundcloud.com'));

    return Array.from(new Set(urls));
  } catch (e) {
    console.error('[Indexer] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ getUrlsToIndex:', e);
    return [];
  }
}