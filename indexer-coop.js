// indexer-coop.js
import fs from 'fs';
import path from 'path';
import ytdl from 'youtube-dl-exec';
import { fileURLToPath } from 'url';
import { bot } from './index.js';
import {
  cacheTrack,
  findCachedTrack,
  getUrlsToIndex,
  downloadQueue
} from './db.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const cacheDir = path.join(__dirname, 'cache');

let shuttingDown = false;
process.once('SIGTERM', () => { shuttingDown = true; });
process.once('SIGINT',  () => { shuttingDown = true; });

async function processOneUrl(url, STORAGE_CHANNEL_ID) {
  let tempFilePath = null;
  try {
    const isCached = await findCachedTrack(url);
    if (isCached) {
      console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: —É–∂–µ –≤ –∫—ç—à–µ: ${url}`);
      return;
    }

    console.log(`[Indexer] –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é: ${url}`);
    let info = await ytdl(url, { dumpSingleJson: true, 'no-playlist': true });

    if (!info) {
      console.log(`[Indexer] –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è: ${url}`);
      return;
    }

    // fallback: –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –ø–ª–µ–π–ª–∏—Å—Ç ‚Äî –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫
    if (info._type === 'playlist' || Array.isArray(info.entries)) {
      if (Array.isArray(info.entries) && info.entries.length >= 1) {
        info = info.entries[0];
      } else {
        console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: –ø–ª–µ–π–ª–∏—Å—Ç –±–µ–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${url}`);
        return;
      }
    }

    const trackName = (info.title || 'track').slice(0, 100);
    const uploader  = info.uploader || 'SoundCloud';
    tempFilePath = path.join(cacheDir, `indexer_${info.id || Date.now()}.mp3`);

    await ytdl(url, {
      output: tempFilePath,
      extractAudio: true,
      audioFormat: 'mp3',
      embedMetadata: true,
      'no-playlist': true,
      postprocessorArgs: [
        '-metadata', `artist=${uploader}`,
        '-metadata', `title=${trackName}`
      ],
    });

    const fileExists = await fs.promises
      .access(tempFilePath)
      .then(() => true)
      .catch(() => false);
    if (!fileExists) throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω');

    const message = await bot.telegram.sendAudio(
      process.env.STORAGE_CHANNEL_ID,
      { source: fs.createReadStream(tempFilePath) },
      { title: trackName, performer: uploader }
    );

    if (message?.audio?.file_id) {
      await cacheTrack(url, message.audio.file_id, trackName);
      console.log(`‚úÖ [Indexer] –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω: ${trackName}`);
    }
  } catch (err) {
    console.error(`‚ùå [Indexer] –û—à–∏–±–∫–∞ ${url}:`,
      err.response?.description || err.stderr || err.message || err);
  } finally {
    if (tempFilePath) {
      await fs.promises.unlink(tempFilePath).catch(() => {
        console.warn(`[Indexer] –ù–µ —É–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFilePath}`);
      });
    }
  }
}

export async function startIndexer() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞ (–∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)...');

  async function tick() {
    if (shuttingDown) return;

    try {
      // –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ‚Äî –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä –ø–æ–¥–æ–∂–¥—ë—Ç
      if (downloadQueue?.active > 0) {
        console.log('[Indexer] –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–∞—É–∑–∞ 2 –º–∏–Ω.');
        return setTimeout(tick, 2 * 60 * 1000);
      }

      const urls = await getUrlsToIndex(); // –¥–æ 10 URL
      if (urls.length === 0) {
        console.log('[Indexer] –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–∞—É–∑–∞ 10 –º–∏–Ω—É—Ç.');
        return setTimeout(tick, 10 * 60 * 1000);
      }

      // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 2 –∑–∞ —Ü–∏–∫–ª
      const batch = urls.slice(0, 2);
      for (const url of batch) {
        if (shuttingDown) break;
        await processOneUrl(url, process.env.STORAGE_CHANNEL_ID);
        await new Promise(r => setTimeout(r, 5000)); // –¥–∞—ë–º –≤–µ–±—É –ø–æ–¥—ã—à–∞—Ç—å
      }

      setTimeout(tick, 60 * 1000); // —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥–æ–Ω
    } catch (err) {
      console.error('üî¥ –ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –†–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç:', err);
      setTimeout(tick, 5 * 60 * 1000);
    }
  }

  // —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –≤–µ–± —É—Å–ø–µ–ª –ø–æ–¥–Ω—è—Ç—å—Å—è
  setTimeout(tick, 60 * 1000);
}