// ESM
import { Telegraf, Markup } from 'telegraf';
import compression from 'compression';
import express from 'express';
import session from 'express-session';
import ejs from 'ejs';
import fs from 'fs';
import path from 'path';
import ytdl from 'youtube-dl-exec';
import multer from 'multer';
import axios from 'axios';
import util from 'util';
import NodeID3 from 'node-id3';
import pgSessionFactory from 'connect-pg-simple';
import { pool } from './db.js';
import json2csv from 'json-2-csv';
import { supabase } from './db.js'; // —É–∫–∞–∑—ã–≤–∞–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ!
import expressLayouts from 'express-ejs-layouts';
import https from 'https';
import { createClient } from 'redis';
import { getFunnelData } from './db.js';  // –∏–ª–∏ –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É –º–æ–¥—É–ª—é —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏

const upload = multer({ dest: 'uploads/' });

const playlistTracker = new Map();

// –£—Ç–∏–ª–∏—Ç—ã
const writeID3 = util.promisify(NodeID3.write);

async function resolveRedirect(url) {
  try {
    const response = await axios.head(url, {
      maxRedirects: 5,
      validateStatus: status => status >= 200 && status < 400
    });
    return response.request?.res?.responseUrl || url;
  } catch (err) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:', err.message);
    return url;
  }
}

import {
  createUser, getUser, updateUserField, incrementDownloads, setPremium,
  getAllUsers, resetDailyStats, addReview, saveTrackForUser, hasLeftReview,
  getLatestReviews, resetDailyLimitIfNeeded, getRegistrationsByDate,
  getDownloadsByDate, getActiveUsersByDate, getExpiringUsers, getReferralSourcesStats,
  markSubscribedBonusUsed, getUserActivityByDayHour, logUserActivity, getUserById,
  getExpiringUsersCount, getExpiringUsersPaginated
} from './db.js';

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = Number(process.env.ADMIN_ID);
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const WEBHOOK_PATH = '/telegram';
const PORT = process.env.PORT ?? 3000;
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ
global.redisClient = null;
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ
(async () => {
  try {
    const redisUrl = process.env.REDIS_URL;
    if (!redisUrl) {
      console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è REDIS_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      process.exit(1);
    }
    
    const client = createClient({
      url: redisUrl,
      socket: {
        connectTimeout: 10000,
        retryStrategy: (times) => {
          if (times > 5) return null;
          return Math.min(times * 1000, 3000);
        }
      }
    });
    
    client.on('error', (err) => {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:', err);
    });
    
    await client.connect();
    console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á—ë–Ω');
    
    global.redisClient = client;
    
    setInterval(async () => {
      try {
        await global.redisClient.ping();
        console.log('üîç Redis –¥–æ—Å—Ç—É–ø–µ–Ω');
      } catch (err) {
        console.warn('‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis:', err);
      }
    }, 60000);
    
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis:', err);
    process.exit(1);
  }
})();
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ Redis –∫–ª–∏–µ–Ω—Ç—É
export function getRedisClient() {
  if (!global.redisClient) {
    throw new Error('Redis –∫–ª–∏–µ–Ω—Ç –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
  return global.redisClient;
}
// –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Redis
async function getTrackInfo(url) {
  try {
    const cached = await global.redisClient.get(url);
    if (cached) return JSON.parse(cached);
    
    const info = await ytdl(url, { dumpSingleJson: true });
    await global.redisClient.setEx(url, 3600, JSON.stringify(info));
    return info;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Redis:', err);
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async function logEvent(userId, event) {
  try {
    await global.redisClient.rPush(
      `log:${userId}`,
      JSON.stringify({ event, timestamp: Date.now() })
    );
    
    await supabase.from('events').insert({
      user_id: userId,
      event,
      created_at: new Date().toISOString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error);
  }
}
// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–∞—Ö
if (!BOT_TOKEN || !ADMIN_ID || !process.env.ADMIN_LOGIN || !process.env.ADMIN_PASSWORD) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

if (isNaN(ADMIN_ID)) {
  console.error('‚ùå ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
const app = express();


// –ö–µ—à —Ç—Ä–µ–∫–æ–≤ ‚Äî –¥–ª—è ESM –∏—Å–ø–æ–ª—å–∑—É–µ–º import.meta.url
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const cacheDir = path.join(__dirname, 'cache');
if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

async function cleanCache() {
  const cutoff = Date.now() - 7 * 86400 * 1000;
  
  try {
    const files = await fs.promises.readdir(cacheDir);
    
    for (const file of files) {
      const filePath = path.join(cacheDir, file);
      
      try {
        const stats = await fs.promises.stat(filePath);
        if (stats.mtimeMs < cutoff) {
          await fs.promises.unlink(filePath);
          console.log(`üóë [cache-cleaner] –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: ${file}`);
        }
      } catch (err) {
        console.warn(`‚ö†Ô∏è [cache-cleaner] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, err);
      }
    }
  } catch (err) {
    console.error('‚ö†Ô∏è [cache-cleaner] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–µ—à–∞:', err);
  }
}

setInterval(cleanCache, 3600 * 1000);
setInterval(() => resetDailyStats(), 24 * 3600 * 1000);


const texts = {
  start: 'üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ —Å SoundCloud.',
  menu: 'üìã –ú–µ–Ω—é',
  upgrade: 'üîì –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç',
  mytracks: 'üéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏',
  help: '‚ÑπÔ∏è –ü–æ–º–æ—â—å',
  downloading: 'üéß –ó–∞–≥—Ä—É–∂–∞—é...',
  error: '‚ùå –û—à–∏–±–∫–∞',
  noTracks: '–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.',
  limitReached: `üö´ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚ùå

üí° –ß—Ç–æ–±—ã –∫–∞—á–∞—Ç—å –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ Plus –∏–ª–∏ –≤—ã—à–µ –∏ –∫–∞—á–∞–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

üÜì Free ‚Äî 5 üü¢
üéØ Plus ‚Äî 20 (59‚ÇΩ)
üí™ Pro ‚Äî 50 (119‚ÇΩ)
üíé Unlimited ‚Äî –±–µ–∑–ª–∏–º–∏—Ç (199‚ÇΩ)

üëâ –î–æ–Ω–∞—Ç: boosty.to/anatoly_bone/donate
‚úâÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏: @anatolybone

üéÅ –ë–æ–Ω—É—Å
üì£ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª @SCM_BLOG –∏ –ø–æ–ª—É—á–∏ 7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus –±–µ—Å–ø–ª–∞—Ç–Ω–æ!`,
  upgradeInfo: `üöÄ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤?

üÜì Free ‚Äî 5 üü¢  
Plus ‚Äî 20 üéØ (59‚ÇΩ)  
Pro ‚Äî 50 üí™ (119‚ÇΩ)  
Unlimited ‚Äî üíé (199‚ÇΩ)

üëâ –î–æ–Ω–∞—Ç: https://boosty.to/anatoly_bone/donate  
‚úâÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏: @anatolybone

üì£ –ù–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–∏—à–∫–∏: @SCM_BLOG`,
  helpInfo: `‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∏—à—å mp3.  
üîì –†–∞—Å—à–∏—Ä–∏—Ç—å ‚Äî –æ–ø–ª–∞—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏.  
üéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.  
üìã –ú–µ–Ω—é ‚Äî —Ç–∞—Ä–∏—Ñ, –ª–∏–º–∏—Ç—ã, —Ä–µ—Ñ–µ—Ä–∞–ª—ã.  
üì£ –ö–∞–Ω–∞–ª: @SCM_BLOG`,
  queuePosition: pos => `‚è≥ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (#${pos})`,
  adminCommands: '\n\nüìã –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:\n/admin ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
};

const kb = () =>
  Markup.keyboard([
    [texts.menu, texts.upgrade],
    [texts.mytracks, texts.help]
  ]).resize();

const isSubscribed = async userId => {
  try {
    const res = await bot.telegram.getChatMember('@SCM_BLOG', userId);
    return ['member', 'creator', 'administrator'].includes(res.status);
  } catch {
    return false;
  }
};


// –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
async function sendAudioSafe(ctx, userId, filePath, title) {
  if (!userId || !filePath || !title) {
    throw new Error('–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: userId, filePath, title');
  }
  
  try {
    if (!fs.existsSync(filePath)) {
      throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const stats = await fs.promises.stat(filePath);
    if (stats.size > 50 * 1024 * 1024) {
      throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB)');
    }
    
    const message = await ctx.telegram.sendAudio(
      userId,
      {
        source: fs.createReadStream(filePath),
        filename: `${title}.mp3`
      },
      {
        title,
        performer: 'SoundCloud'
      }
    );
    
    return message.audio.file_id;
  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, e);
    
    if (e.description === 'Forbidden: bot was blocked by the user') {
      console.warn(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ inactive.`);
      try {
        await pool.query('UPDATE users SET active = false WHERE telegram_id = $1', [userId]);
      } catch (dbErr) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', dbErr);
      }
    } else {
      await handleErrorNotification(ctx, userId, e);
    }
    
    return null;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function handleErrorNotification(ctx, userId, error) {
  try {
    await ctx.telegram.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞.');
  } catch (innerErr) {
    console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, innerErr);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞
async function processTrackByUrl(ctx, userId, url, playlistUrl = null) {
  const start = Date.now();
  let fp = null;
  let trackName = 'track';
  
  try {
    const processedUrl = await resolveRedirect(url);
    const fileIdKey = `fileId:${processedUrl}`;
    const cachedFileId = await redisClient.get(fileIdKey);
    
    if (cachedFileId) {
      console.log(`üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É file_id: ${cachedFileId}`);
      await ctx.replyWithAudio(cachedFileId, {
        title: trackName,
        performer: 'SoundCloud'
      });
      return;
    }
    
    const info = await ytdl(processedUrl, { dumpSingleJson: true });
    trackName = sanitizeFilename(info.title || trackName).slice(0, 64);
    fp = path.join(cacheDir, `${trackName}.mp3`);
    
    if (!fs.existsSync(fp)) {
      await downloadAndTagTrack(fp, processedUrl, trackName);
    }
    
    await incrementDownloads(userId, trackName);
    
    const fileId = await sendAudioSafe(ctx, userId, fp, trackName);
    
    if (fileId) {
      await redisClient.setEx(fileIdKey, 30 * 24 * 60 * 60, fileId); // 30 –¥–Ω–µ–π
      await handleSuccessfulDownload(userId, trackName, fileId);
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å fileId –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ');
    }
    
    const duration = ((Date.now() - start) / 1000).toFixed(1);
    console.log(`‚úÖ –¢—Ä–µ–∫ ${trackName} –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ ${duration} —Å–µ–∫.`);
    
    if (playlistUrl) {
      await handlePlaylistProgress(ctx, userId, playlistUrl);
    }
    
  } catch (error) {
    await handleError(ctx, userId, error, trackName);
  } finally {
    // –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–¥–∞–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ:
    // await cleanupTemporaryFile(fp);
  }
}
// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –∏ –∑–∞–ø–∏—Å–∏ ID3 —Ç–µ–≥–æ–≤
async function downloadAndTagTrack(filePath, url, trackName) {
  try {
    await ytdl(url, {
      extractAudio: true,
      audioFormat: 'mp3',
      output: filePath,
      preferFreeFormats: true,
      noCheckCertificates: true,
    });
    
    await writeID3({ title: trackName, artist: 'SoundCloud' }, filePath);
    console.log(`üéµ ID3 —Ç–µ–≥–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–ª—è ${trackName}`);
    
  } catch (err) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞: ${err.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
async function handleSuccessfulDownload(userId, trackName, fileId) {
  try {
    await saveTrackForUser(userId, trackName, fileId);
    await pool.query(
      'INSERT INTO downloads_log (user_id, track_title) VALUES ($1, $2)',
      [userId, trackName]
    );
  } catch (err) {
    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleError(ctx, userId, error, trackName = '') {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞ ${trackName}:`, error);
  try {
    await ctx.telegram.sendMessage(userId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞.');
  } catch (sendErr) {
    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, sendErr);
  }
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
async function handlePlaylistProgress(ctx, userId, playlistUrl) {
  const playlistKey = `${userId}:${playlistUrl}`;
  if (playlistTracker.has(playlistKey)) {
    let remaining = playlistTracker.get(playlistKey) - 1;
    
    if (remaining <= 0) {
      try {
        await ctx.telegram.sendMessage(userId, '‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
      } catch (err) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, err);
      }
      playlistTracker.delete(playlistKey);
    } else {
      playlistTracker.set(playlistKey, remaining);
    }
  }
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
async function cleanupTemporaryFile(filePath) {
  if (!filePath) return;
  
  try {
    await fs.promises.access(filePath, fs.constants.F_OK);
    await fs.promises.unlink(filePath);
    console.log(`üóë –£–¥–∞–ª—ë–Ω –∫–µ—à: ${path.basename(filePath)}`);
  } catch (err) {
    if (err.code === 'ENOENT') {
      console.log(`‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —É–¥–∞–ª—ë–Ω: ${path.basename(filePath)}`);
    } else {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, err);
    }
  }
}
// === –û—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤ ===

const QUEUE_CHECK_INTERVAL = 1000;
const globalQueue = [];
let activeDownloadsCount = 0;
const MAX_CONCURRENT_DOWNLOADS = 8;
let enqueueCounter = 0;

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
function addToGlobalQueue(task) {
  if (!task || typeof task.priority !== 'number') {
    throw new Error('–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç');
  }
  
  globalQueue.push(task);
  globalQueue.sort((a, b) => b.priority - a.priority);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞
 * @param {Object} task - –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ { ctx, userId, url, playlistUrl }
 */
import { logTask } from './utils/logger.js'; // –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø—É—Ç—å

async function processTask(task) {
  const { ctx, userId, url, playlistUrl } = task;
  
  const label = `‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ ${url}`;
  const startTime = Date.now();
  
  await logTask(`üöÄ –°—Ç–∞—Ä—Ç –∑–∞–¥–∞—á–∏: ${url} (userId: ${userId})`);
  console.log(`üöÄ –°—Ç–∞—Ä—Ç –∑–∞–¥–∞—á–∏: ${url} (userId: ${userId})`);
  
  try {
    await processTrackByUrl(ctx, userId, url, playlistUrl);
    const duration = ((Date.now() - startTime) / 1000).toFixed(2);
    await logTask(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${url} (–∑–∞ ${duration} —Å–µ–∫)`);
    console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${url}`);
  } catch (err) {
    await logTask(`‚ùå –û—à–∏–±–∫–∞: ${url} ‚Äî ${err.message}`);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ processTask –¥–ª—è ${url}:`, err);
    throw err;
  } finally {
    console.timeEnd(label); // –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è stdout
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
 */
async function processNextInQueue() {
  while (
    activeDownloadsCount < MAX_CONCURRENT_DOWNLOADS &&
    globalQueue.length > 0
  ) {
    const task = globalQueue.shift();
    activeDownloadsCount++;
    
    (async () => {
      try {
        await processTask(task);
      } catch (err) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ (userId: ${task.userId}, url: ${task.url}):`,
          err
        );
        try {
          await task.ctx.telegram.sendMessage(
            task.userId,
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞.'
          );
        } catch (sendErr) {
          console.error(
            `‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${task.userId}:`,
            sendErr
          );
        }
      } finally {
        activeDownloadsCount--;
        processNextInQueue(); // –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ—Ç–∞
      }
    })();
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ—Å—Ç–∞–∏–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
  setTimeout(processNextInQueue, QUEUE_CHECK_INTERVAL);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞
processNextInQueue();

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π, –ª–∏–º–∏—Ç–∞–º–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @param {Object} ctx - Telegram-–∫–æ–Ω—Ç–µ–∫—Å—Ç
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} url - –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç
 */
export async function enqueue(ctx, userId, url) {
  enqueueCounter++;
  const label = `enqueue:${userId}:${enqueueCounter}`;
  console.time(label);
  
  try {
    const resolveLabel = `resolve:${userId}:${enqueueCounter}`;
    console.time(resolveLabel);
    url = await resolveRedirect(url);
    console.timeEnd(resolveLabel);
    
    await logUserActivity(userId);
    await resetDailyLimitIfNeeded(userId);
    const user = await getUser(userId);
    const remainingLimit = user.premium_limit - user.downloads_today;
    
    if (remainingLimit <= 0) {
      await ctx.telegram.sendMessage(
        userId,
        texts.limitReached,
        Markup.inlineKeyboard([
          Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_subscription')
        ])
      );
      console.timeEnd(label);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ/–ø–ª–µ–π–ª–∏—Å—Ç–µ
    const ytdlLabel = `ytdl:${userId}:${enqueueCounter}`;
    console.time(ytdlLabel);
    const info = await ytdl(url, { dumpSingleJson: true });
    console.timeEnd(ytdlLabel);
    
    const isPlaylist = Array.isArray(info.entries);
    let entries = [];
    
    if (isPlaylist) {
      const playlistParseLabel = `playlistParse:${userId}:${enqueueCounter}`;
      console.time(playlistParseLabel);
      
      entries = info.entries
        .filter(e => e?.webpage_url)
        .map(e => e.webpage_url);
      
      const playlistKey = `${user.id}:${url}`;
      playlistTracker.set(playlistKey, entries.length);
      
      if (entries.length > remainingLimit) {
        await ctx.telegram.sendMessage(
          userId,
          `‚ö†Ô∏è –í –ø–ª–µ–π–ª–∏—Å—Ç–µ ${entries.length} —Ç—Ä–µ–∫–æ–≤, –Ω–æ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${remainingLimit}. –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–≤—ã–µ ${remainingLimit}.`
        );
        entries = entries.slice(0, remainingLimit);
      }
      
      await logEvent(userId, 'download_playlist');
      console.timeEnd(playlistParseLabel);
    } else {
      entries = [url];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    for (const entryUrl of entries) {
      const queueAddLabel = `queueAdd:${entryUrl}:${enqueueCounter}`;
      console.time(queueAddLabel);
      addToGlobalQueue({
        ctx,
        userId,
        url: entryUrl,
        playlistUrl: isPlaylist ? url : null,
        priority: user.premium_limit
      });
      await logEvent(userId, 'download');
      console.timeEnd(queueAddLabel);
    }
    
    await ctx.telegram.sendMessage(
      userId,
      texts.queuePosition(
        globalQueue.filter(task => task.userId === userId).length
      )
    );
    
  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ enqueue –¥–ª—è userId ${userId}:`, e);
    try {
      await ctx.telegram.sendMessage(userId, texts.error);
    } catch (sendErr) {
      console.error(
        `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
        sendErr
      );
    }
  } finally {
    console.timeEnd(label);
  }
}
// –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º
async function broadcastMessage(bot, pool, message) {
  const users = await getAllUsers();
  let successCount = 0;
  let errorCount = 0;

  for (const user of users) {
    if (!user.active) continue;
    try {
      await bot.telegram.sendMessage(user.id, message);
      successCount++;
      await new Promise(r => setTimeout(r, 150));
    } catch (e) {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, e.description || e.message);
      errorCount++;
      try {
        await pool.query('UPDATE users SET active = FALSE WHERE id = $1', [user.id]);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      }
    }
  }

  return { successCount, errorCount };
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
async function addOrUpdateUserInSupabase(id, first_name, username, referralSource) {
  if (!id) return;
  if (!supabase) {
    console.error('Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return;
  }
  try {
    const { error } = await supabase
      .from('users')
      .upsert([{ id, first_name, username, referred_by: referralSource || null }]);
    if (error) {
      console.error('–û—à–∏–±–∫–∞ upsert –≤ Supabase:', error);
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ Supabase:', e);
  }
}

function getPersonalMessage(user) {
  const tariffName = getTariffName(user.premium_limit);
  
  return `
üòé –ü—Ä–∏–≤–µ—Ç!
–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –Ω–µ —Å—Ç–∞—Ä—Ç–∞–ø –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
–Ø –¥–µ–ª–∞—é –µ–≥–æ –æ–¥–∏–Ω ‚Äî —á—Ç–æ–±—ã –±—ã–ª –ø—Ä–æ—Å—Ç–æ–π, —á–µ—Å—Ç–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.
–ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã, –±–µ–∑ —Å–ª–µ–∂–∫–∏, –±–µ–∑ –Ω–∞–≤–æ—Ä–æ—Ç–æ–≤ ‚Äî –≤—Å—ë –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏.

üíº –¢–≤–æ–π —Ç–∞—Ä–∏—Ñ: ${tariffName}

‚ö†Ô∏è –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ª–∏–º–∏—Ç—ã –Ω–µ–º–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—Ç–∏–º, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ.
–ü—Ä–æ–µ–∫—Ç –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ –º–æ–∏—Ö –ª–∏—á–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö ‚Äî –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –∏–¥—Ç–∏ –Ω–∞ —Ç–∞–∫–∏–µ —à–∞–≥–∏.
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ üôè

üéÅ –°–µ–π—á–∞—Å –∏–¥—ë—Ç –∞–∫—Ü–∏—è 1+1 –Ω–∞ –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã ‚Äî –æ–ø–ª–∞—á–∏–≤–∞–µ—à—å –º–µ—Å—è—Ü, –ø–æ–ª—É—á–∞–µ—à—å –¥–≤–∞.
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 20 –∏—é–ª—è. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: @SCM_BLOG`;
}
function getTariffName(limit) {
  if (limit >= 1000) return 'Unlim (‚àû/–¥–µ–Ω—å)';
  if (limit >= 100) return 'Pro (100/–¥–µ–Ω—å)';
  if (limit >= 50) return 'Plus (50/–¥–µ–Ω—å)';
  return 'Free (10/–¥–µ–Ω—å)';
}
function getReferralLink(userId) {
  return `https://t.me/SCloudMusicBot?start=${userId}`;
}
function getDaysLeft(premiumUntil) {
  if (!premiumUntil) return 0;
  const now = new Date();
  const until = new Date(premiumUntil);
  const diff = until - now;
  return Math.max(Math.ceil(diff / (1000 * 60 * 60 * 24)), 0);
}
// –§–æ—Ä–º–∞—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function formatMenuMessage(user) {
  const tariffLabel = getTariffName(user.premium_limit);
  const downloadsToday = user.downloads_today || 0;
  const invited = user.invited_count || 0;
  const bonusDays = user.bonus_days || 0;
  const refLink = getReferralLink(user.id);
  const daysLeft = getDaysLeft(user.premium_until);

  return `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!

üì• –ë–æ—Ç –∫–∞—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å SoundCloud –≤ MP3.  
–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É ‚Äî –∏ –≤—Å—ë üßô‚Äç‚ôÇÔ∏è

üì£ –•–æ—á–µ—à—å –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π, —Ñ–∏—à–µ–∫ –∏ –±–æ–Ω—É—Å–æ–≤?
–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª üëâ @SCM_BLOG

üéÅ –ë–æ–Ω—É—Å: 7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ PLUS –±–µ—Å–ø–ª–∞—Ç–Ω–æ
(—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)


üîÑ –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ —Ç—ã —É–≤–∏–¥–∏—à—å —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏.  
üéØ –ü–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏–¥—É—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ‚Äî –∏—Ö —Ç—Ä–µ–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏.  
üì• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–∂–µ –ø–æ–ª—É—á–∞—é—Ç —Ç—Ä–µ–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —á—É—Ç—å –ø–æ–∑–∂–µ.

üíº –¢–∞—Ä–∏—Ñ: ${tariffLabel}  
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}

üéß –°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ: ${downloadsToday} –∏–∑ ${user.premium_limit}

üë´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${invited}  
üéÅ –ü–æ–ª—É—á–µ–Ω–æ –¥–Ω–µ–π Plus –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: ${bonusDays}

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:  
${refLink}
  `.trim();
}
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ SoundCloud –∏–∑ —Ç–µ–∫—Å—Ç–∞
function extractUrl(text) {
  const regex = /(https?:\/\/[^\s]+)/g;
  const matches = text.match(regex);
  if (!matches) return null;
  return matches.find(url => url.includes('soundcloud.com')) || matches[0];
}
// // === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express ===
app.use((req, res, next) => {
  res.locals.user = req.user || null;
  res.locals.page = null;        // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ
  res.locals.title = '–ê–¥–º–∏–Ω–∫–∞';
  next();
});

app.use(compression());
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(expressLayouts); // –ò—Å–ø–æ–ª—å–∑—É–µ–º layout
app.set('view engine', 'ejs'); // –£–∫–∞–∑—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
app.set('views', path.join(__dirname, 'views')); // –ü–∞–ø–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
app.set('layout', 'layout');
const pgSession = pgSessionFactory(session);

app.use(session({
  store: new pgSession({ pool, tableName: 'session', createTableIfMissing: true }),
  secret: process.env.SESSION_SECRET || 'secret',
  resave: false,
  saveUninitialized: false,
  cookie: { maxAge: 30 * 24 * 60 * 60 * 1000 }
}));

app.use(async (req, res, next) => {
  if (req.session.authenticated && req.session.userId === ADMIN_ID) {
    try {
      const user = await getUserById(req.session.userId);
      if (user) {
        req.user = user;
        res.locals.user = user;  // –≤–∞–∂–Ω–æ –¥–ª—è ejs import { Parser } from '@json2csv/node';tials
      } else {
        res.locals.user = null;
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤:', e);
      res.locals.user = null;
    }
  } else {
    res.locals.user = null;
  }
  next();
});
// Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏
async function requireAuth(req, res, next) {
  if (req.session.authenticated && req.session.userId === ADMIN_ID) {
    return next();
  }
  res.redirect('/admin');
}
// activityByDayHour ‚Äî –æ–±—ä–µ–∫—Ç –≤–∏–¥–∞ { "2025-07-01": {0: 5, 1: 3, ...}, "2025-07-02": {...} }
function computeActivityByHour(activityByDayHour) {
  const hours = Array(24).fill(0);
  for (const day in activityByDayHour) {
    const hoursData = activityByDayHour[day];
    for (let h = 0; h < 24; h++) {
      hours[h] += hoursData[h] || 0;
    }
  }
  return hours;
}

function computeActivityByWeekday(activityByDayHour) {
  const weekdays = Array(7).fill(0); // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 0, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 1 –∏ —Ç.–¥.
  for (const dayStr in activityByDayHour) {
    const date = new Date(dayStr);
    const weekday = date.getDay();
    const hoursData = activityByDayHour[dayStr];
    const dayTotal = Object.values(hoursData).reduce((a,b) => a+b, 0);
    weekdays[weekday] += dayTotal;
  }
  return weekdays;
}
// === –ú–∞—Ä—à—Ä—É—Ç—ã Express ===

// –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
app.get('/admin', (req, res) => {
  if (req.session.authenticated && req.session.userId === ADMIN_ID) {
    return res.redirect('/dashboard');
  }
  res.locals.page = 'admin';
  res.render('login', { title: '–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É', error: null });
});

app.post('/admin', (req, res) => {
  const { username, password } = req.body;
  if (username === process.env.ADMIN_LOGIN && password === process.env.ADMIN_PASSWORD) {
    req.session.authenticated = true;
    req.session.userId = ADMIN_ID;
    res.redirect('/dashboard');
  } else {
    res.locals.page = 'admin';
    res.render('login', { title: '–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É', error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
  }
});
// ===== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ =====

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ {date: count, ...} –≤ –º–∞—Å—Å–∏–≤ [{date, count}, ...]
function convertObjToArray(dataObj) {
  if (!dataObj) return [];
  return Object.entries(dataObj).map(([date, count]) => ({ date, count }));
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É (—á–∏—Å–ª–æ –¥–Ω–µ–π –∏–ª–∏ 'YYYY-MM')
function filterStatsByPeriod(data, period) {
  if (!Array.isArray(data)) return [];

  const now = new Date();

  // –ï—Å–ª–∏ period ‚Äî —á–∏—Å–ª–æ –¥–Ω–µ–π
  if (!isNaN(period)) {
    const days = parseInt(period);
    const cutoff = new Date(now.getTime() - days * 86400000);
    return data.filter(item => new Date(item.date) >= cutoff);
  }

  // –ï—Å–ª–∏ period ‚Äî —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM'
  if (/^\d{4}-\d{2}$/.test(period)) {
    return data.filter(item => item.date && item.date.startsWith(period));
  }

  // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  return data;
}

// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ Chart.js –∏–∑ —Ç—Ä—ë—Ö –º–∞—Å—Å–∏–≤–æ–≤ —Å –¥–∞—Ç–∞–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
function prepareChartData(registrations, downloads, active) {
  const dateSet = new Set([
    ...registrations.map(r => r.date),
    ...downloads.map(d => d.date),
    ...active.map(a => a.date)
  ]);
  const dates = Array.from(dateSet).sort();

  const regMap = new Map(registrations.map(r => [r.date, r.count]));
  const dlMap = new Map(downloads.map(d => [d.date, d.count]));
  const actMap = new Map(active.map(a => [a.date, a.count]));

  return {
    labels: dates,
    datasets: [
      {
        label: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        data: dates.map(d => regMap.get(d) || 0),
        borderColor: 'rgba(75, 192, 192, 1)',
        backgroundColor: 'rgba(75, 192, 192, 0.2)',
        fill: false,
      },
      {
        label: '–ó–∞–≥—Ä—É–∑–∫–∏',
        data: dates.map(d => dlMap.get(d) || 0),
        borderColor: 'rgba(255, 99, 132, 1)',
        backgroundColor: 'rgba(255, 99, 132, 0.2)',
        fill: false,
      },
      {
        label: '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
        data: dates.map(d => actMap.get(d) || 0),
        borderColor: 'rgba(54, 162, 235, 1)',
        backgroundColor: 'rgba(54, 162, 235, 0.2)',
        fill: false,
      }
    ]
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –º–µ—Å—è—Ü–µ–≤ –≤ –≤–∏–¥–µ [{value: 'YYYY-MM', label: '–ú–µ—Å—è—Ü –ì–æ–¥'}, ...]
function getLastMonths(count = 6) {
  const months = [];
  const now = new Date();
  for (let i = 0; i < count; i++) {
    const d = new Date(now.getFullYear(), now.getMonth() - i, 1);
    const value = d.toISOString().slice(0, 7); // 'YYYY-MM'
    const label = d.toLocaleString('ru-RU', { month: 'long', year: 'numeric' });
    months.push({ value, label });
  }
  return months;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –ø–æ –ø–µ—Ä–∏–æ–¥—É (—á–∏—Å–ª–æ –¥–Ω–µ–π –∏–ª–∏ 'YYYY-MM')
// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –ø–æ –ø–µ—Ä–∏–æ–¥—É (—á–∏—Å–ª–æ –¥–Ω–µ–π –∏–ª–∏ 'YYYY-MM')
function getFromToByPeriod(period) {
  const now = new Date();
  
  if (!period) {
    console.warn('[getFromToByPeriod] –ü–µ—Ä–∏–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "all"');
    return { from: new Date('2000-01-01'), to: now };
  }
  
  if (period === 'all') {
    return { from: new Date('2000-01-01'), to: now };
  }
  
  if (/^\d+$/.test(period)) {
    const days = parseInt(period, 10);
    if (days <= 0 || days > 3650) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: ${days}`);
    }
    return {
      from: new Date(now.getTime() - days * 86400000),
      to: now
    };
  }
  
  if (/^\d{4}-\d{2}$/.test(period)) {
    const [year, month] = period.split('-').map(Number);
    if (year < 2000 || month < 1 || month > 12) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞: ${period}`);
    }
    const from = new Date(year, month - 1, 1);
    const to = new Date(year, month, 1);
    return { from, to };
  }
  
  console.error('[getFromToByPeriod] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:', period);
  throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π "all", —á–∏—Å–ª–æ –¥–Ω–µ–π –∏–ª–∏ YYYY-MM');
}
// –î–∞—à–±–æ—Ä–¥
app.get('/health', (req, res) => res.send('OK'));
app.get('/dashboard', requireAuth, async (req, res) => {
  try {
    res.locals.page = 'dashboard';

    const showInactive = req.query.showInactive === 'true';
    const period = req.query.period || '30';
    const expiringLimit = parseInt(req.query.expiringLimit) || 10;
    const expiringOffset = parseInt(req.query.expiringOffset) || 0;

    const expiringSoon = await getExpiringUsersPaginated(expiringLimit, expiringOffset);
    const expiringCount = await getExpiringUsersCount();
    const users = await getAllUsers(showInactive);

    const downloadsByDateRaw = await getDownloadsByDate();
    const registrationsByDateRaw = await getRegistrationsByDate();
    const activeByDateRaw = await getActiveUsersByDate();

    const filteredRegistrations = filterStatsByPeriod(convertObjToArray(registrationsByDateRaw), period);
    const filteredDownloads = filterStatsByPeriod(convertObjToArray(downloadsByDateRaw), period);
    const filteredActive = filterStatsByPeriod(convertObjToArray(activeByDateRaw), period);

    const chartDataCombined = prepareChartData(filteredRegistrations, filteredDownloads, filteredActive);

    const stats = {
      totalUsers: users.length,
      totalDownloads: users.reduce((sum, u) => sum + (u.total_downloads || 0), 0),
      free: users.filter(u => u.premium_limit === 5).length,
      plus: users.filter(u => u.premium_limit === 25).length,
      pro: users.filter(u => u.premium_limit === 50).length,
      unlimited: users.filter(u => u.premium_limit >= 1000).length,
      registrationsByDate: filteredRegistrations,
      downloadsByDate: filteredDownloads,
      activeByDate: filteredActive
    };

    const activityByDayHour = await getUserActivityByDayHour();
    const activityByHour = computeActivityByHour(activityByDayHour);
    const activityByWeekday = computeActivityByWeekday(activityByDayHour);

    const referralStats = await getReferralSourcesStats();

    const { from: fromDate, to: toDate } = getFromToByPeriod(period);
    const funnelCounts = await getFunnelData(fromDate.toISOString(), toDate.toISOString());

    const chartDataFunnel = {
      labels: ['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', '–°–∫–∞—á–∞–ª–∏', '–û–ø–ª–∞—Ç–∏–ª–∏'],
      datasets: [{
        label: '–í–æ—Ä–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        data: [
          funnelCounts.registrationCount || 0,
          funnelCounts.firstDownloadCount || 0,
          funnelCounts.subscriptionCount || 0
        ],
        backgroundColor: ['#2196f3', '#4caf50', '#ff9800']
      }]
    };

    const chartDataHourActivity = {
      labels: [...Array(24).keys()].map(h => `${h}:00`),
      datasets: [{
        label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º',
        data: activityByHour,
        backgroundColor: 'rgba(54, 162, 235, 0.7)',
      }]
    };

    const chartDataWeekdayActivity = {
      labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
      datasets: [{
        label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏',
        data: activityByWeekday,
        backgroundColor: 'rgba(255, 206, 86, 0.7)',
      }]
    };

    const chartDataDownloads = {
      labels: chartDataCombined.labels,
      datasets: [chartDataCombined.datasets[1]] // –¢–æ–ª—å–∫–æ "–ó–∞–≥—Ä—É–∑–∫–∏"
    };

    const lastMonths = getLastMonths(6);
    const retentionResult = await pool.query(`
  WITH cohorts AS (
    SELECT
      id AS user_id,
      DATE(created_at) AS cohort_date
    FROM users
    WHERE created_at IS NOT NULL
  ),
  activities AS (
    SELECT DISTINCT
      user_id,
      DATE(downloaded_at) AS activity_day
    FROM downloads_log
  ),
  cohort_activity AS (
    SELECT
      c.cohort_date,
      a.activity_day,
      COUNT(DISTINCT c.user_id) AS active_users
    FROM cohorts c
    JOIN activities a ON c.user_id = a.user_id
    WHERE a.activity_day >= c.cohort_date
    GROUP BY c.cohort_date, a.activity_day
  ),
  cohort_sizes AS (
    SELECT
      cohort_date,
      COUNT(*) AS cohort_size
    FROM cohorts
    GROUP BY cohort_date
  ),
  retention AS (
    SELECT
      ca.cohort_date,
      (ca.activity_day - ca.cohort_date) AS days_since_signup,
      ca.active_users,
      cs.cohort_size,
      ROUND((ca.active_users::decimal / cs.cohort_size) * 100, 2) AS retention_percent
    FROM cohort_activity ca
    JOIN cohort_sizes cs ON ca.cohort_date = cs.cohort_date
    WHERE (ca.activity_day - ca.cohort_date) IN (0, 1, 3, 7, 14)
    ORDER BY ca.cohort_date, days_since_signup
  )
  SELECT * FROM retention;
`);
const retentionRows = retentionResult.rows;

const cohortsMap = {};
retentionRows.forEach(row => {
  const date = row.cohort_date.toISOString().split('T')[0];
  if (!cohortsMap[date]) {
    cohortsMap[date] = { label: date, data: { 0: null, 1: null, 3: null, 7: null, 14: null } };
  }
  cohortsMap[date].data[row.days_since_signup] = row.retention_percent;
});

const chartDataRetention = {
  labels: ['Day 0', 'Day 1', 'Day 3', 'Day 7', 'Day 14'],
  datasets: Object.values(cohortsMap).map(cohort => ({
    label: cohort.label,
    data: [cohort.data[0], cohort.data[1], cohort.data[3], cohort.data[7], cohort.data[14]],
    fill: false,
    borderColor: `hsl(${Math.random() * 360}, 70%, 60%)`,
    tension: 0.1
  }))
};
    res.render('dashboard', {
      title: '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
      stats,
      users,
      referralStats,
      expiringSoon,
      expiringCount,
      expiringOffset,
      expiringLimit,
      activityByHour,
      activityByWeekday,
      chartDataCombined,
      chartDataHourActivity,
      chartDataWeekdayActivity,
      showInactive,
      period,
      retentionData: [],
      funnelData: funnelCounts,
      chartDataFunnel,
      chartDataRetention,
      chartDataUserFunnel: {},
      chartDataDownloads,
      lastMonths,
      customStyles: '',
      customScripts: '',
      chartDataHeatmap: {},
      taskLogs: []
    });

  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ dashboard:', e);
    res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});
// –í—ã—Ö–æ–¥
app.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.redirect('/admin');
  });
});

// –†–∞—Å—Å—ã–ª–∫–∞
app.get('/broadcast', requireAuth, (req, res) => {
  res.locals.page = 'broadcast';
  res.render('broadcast-form', { title: '–†–∞—Å—Å—ã–ª–∫–∞', error: null });
});
// ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ Telegram API
async function safeTelegramCall(method, ...args) {
  try {
    return await bot.telegram[method](...args);
  } catch (err) {
    const chatId = args?.[0];
    if (err?.response?.error_code === 403) {
      console.warn(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
      return null;
    }
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ ${method} ${chatId}:`, err.message);
    return null;
  }
}
app.post('/broadcast', requireAuth, upload.single('audio'), async (req, res) => {
  const { message } = req.body;
  const audio = req.file;

  if (!message && !audio) {
    res.locals.page = 'broadcast';
    return res.status(400).render('broadcast-form', { error: '–¢–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  const users = await getAllUsers();
  let success = 0, error = 0;
  let audioBuffer = null;

  if (audio) {
    try {
      audioBuffer = fs.readFileSync(audio.path);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞:', err);
      res.locals.page = 'broadcast';
      return res.status(500).render('broadcast-form', { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞' });
    }
  }

  for (const u of users) {
    if (!u.active) continue;

    let sent = null;
    if (audioBuffer) {
      sent = await safeTelegramCall('sendAudio', u.id, {
        source: audioBuffer,
        filename: audio.originalname
      }, { caption: message || '' });
    } else {
      sent = await safeTelegramCall('sendMessage', u.id, message);
    }

    if (sent) {
      success++;
    } else {
      error++;
      try {
        await pool.query('UPDATE users SET active = FALSE WHERE id = $1', [u.id]);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      }
    }

    await new Promise(r => setTimeout(r, 150)); // –∞–Ω—Ç–∏–ø–µ—Ä–µ–±–æ—Ä
  }

// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
if (audio) {
  try {
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
    fs.unlink(audio.path, err => {
      if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—É–¥–∏–æ:', err);
      else console.log(`üóë –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª —Ä–∞—Å—Å—ã–ª–∫–∏: ${audio.originalname}`);
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err);
  }
}

  try {
    await bot.telegram.sendMessage(ADMIN_ID, `üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}\n‚ùå –û—à–∏–±–æ–∫: ${error}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', err);
  }

  res.locals.page = 'broadcast';
  res.render('broadcast-form', {
    title: '–†–∞—Å—Å—ã–ª–∫–∞',
    success,
    error,
    errorMessage: null,
  });
});
// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π CSV
app.get('/export', requireAuth, async (req, res) => {
  try {
    res.locals.page = 'export';
    const allUsers = await getAllUsers(true);
    const period = req.query.period || 'all';
    
    const filteredUsers = allUsers.filter(user => {
      if (period === 'all') return true;
      if (period === '7' || period === '30') {
        const from = new Date(Date.now() - parseInt(period) * 86400000);
        return new Date(user.created_at) >= from;
      }
      if (period.startsWith('month:')) {
        const ym = period.split(':')[1]; // 'YYYY-MM'
        return user.created_at.startsWith(ym);
      }
      return true;
    });
    
    const fields = ['id', 'username', 'first_name', 'total_downloads', 'premium_limit', 'created_at', 'last_active'];
    
    const csv = await json2csv(filteredUsers, {
      keys: fields,
      expandNestedObjects: true,
      wrap: '"',
      eol: '\n',
    });
    
    res.header('Content-Type', 'text/csv');
    res.attachment(`users_${period}.csv`);
    res.send(csv);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV:', e);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});
// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Ç–∞—Ä–∏—Ñ–æ–º
app.get('/expiring-users', requireAuth, async (req, res) => {
  res.locals.page = 'expiring-users';
  const page = parseInt(req.query.page) || 1;
  const perPage = parseInt(req.query.perPage) || 10;

  try {
    const total = await getExpiringUsersCount();
    const users = await getExpiringUsersPaginated(perPage, (page - 1) * perPage);
    const totalPages = Math.ceil(total / perPage);

    res.render('expiring-users', {
      title: '–ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏',
      users,
      page,
      perPage,
      totalPages
    });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ expiring-users:', e);
    res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

app.post('/set-tariff', express.urlencoded({ extended: true }), requireAuth, async (req, res) => {
  const { userId, limit } = req.body;
  if (!userId || !limit) return res.status(400).send('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');

  let limitNum = parseInt(limit);
  if (![10, 50, 100, 1000].includes(limitNum)) {
    return res.status(400).send('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ');
  }

  try {
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ 30 –¥–Ω–µ–π ‚Äî –º–æ–∂–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    const bonusApplied = await setPremium(userId, limitNum, 30);

    // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥–∞—Ä–∫–µ:
    const user = await getUserById(userId);
    if (user) {
      let msg = '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.\n';
      if (bonusApplied) msg += 'üéÅ +30 –¥–Ω–µ–π –≤ –ø–æ–¥–∞—Ä–æ–∫! –ê–∫—Ü–∏—è 1+1 –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.';
      await bot.telegram.sendMessage(userId, msg);
    }

    res.redirect('/dashboard');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞—Ä–∏—Ñ–∞:', e);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});
// === Telegraf –±–æ—Ç ===
app.post('/admin/reset-promo/:id', requireAuth, async (req, res) => {
  const userId = req.params.id;
  await updateUserField(userId, 'promo_1plus1_used', false);
  res.redirect('/dashboard');
});
// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.start(async ctx => {
  const user = ctx.from;

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await createUser(user.id, user.first_name, user.username);
  await addOrUpdateUserInSupabase(user.id, user.first_name, user.username);

  // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
  await logEvent(user.id, 'registered');

  const fullUser = await getUser(user.id);

  await ctx.reply(getPersonalMessage(fullUser));

  // ‚è≥ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É ~1.5 —Å–µ–∫—É–Ω–¥—ã
  await ctx.replyWithChatAction('typing');
  await new Promise(resolve => setTimeout(resolve, 2000));

  await ctx.reply(formatMenuMessage(fullUser), kb());
});

bot.hears(texts.menu, async ctx => {
  const user = await getUser(ctx.from.id);
  await ctx.reply(formatMenuMessage(user), kb());

  // –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –±–æ–Ω—É—Å –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
  if (!user.subscribed_bonus_used) {
    await ctx.reply(
      '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏:',
      Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_subscription')
      ])
    );
  }
});

bot.hears(texts.help, async ctx => {
  await ctx.reply(texts.helpInfo, kb());
});

bot.hears(texts.upgrade, async ctx => {
  await ctx.reply(texts.upgradeInfo, kb());
});

function sanitizeFilename(name) {
  return name.replace(/[<>:"/\\|?*]+/g, '').trim();
}

bot.hears(texts.mytracks, async ctx => {
  const user = await getUser(ctx.from.id);
  if (!user) return ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

  let tracks = [];
  try {
    tracks = user.tracks_today ? JSON.parse(user.tracks_today) : [];
  } catch (e) {
    console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ tracks_today:', e);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }

  if (!tracks.length) return ctx.reply('–°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞—á–∏–≤–∞–ª.');

  await ctx.reply(`–°–∫–∞—á–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è ${tracks.length} –∏–∑ ${user.premium_limit || 10}`);

  for (let i = 0; i < tracks.length; i += 5) {
    const chunk = tracks.slice(i, i + 5);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º fileId
    const mediaGroup = chunk
      .filter(t => t.fileId && typeof t.fileId === 'string' && t.fileId.trim().length > 0)
      .map(t => ({
        type: 'audio',
        media: t.fileId
      }));

    if (mediaGroup.length > 0) {
      try {
        await ctx.replyWithMediaGroup(mediaGroup);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ-–ø–∞—á–∫–∏:', e);

        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Ç—Ä–µ–∫—É –±–µ–∑ caption
        for (let t of chunk) {
          try {
            await ctx.replyWithAudio(t.fileId);
          } catch {
            // –ï—Å–ª–∏ fileId –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            const filePath = path.join(cacheDir, `${sanitizeFilename(t.title)}.mp3`);
            if (fs.existsSync(filePath)) {
              const msg = await ctx.replyWithAudio({ source: fs.createReadStream(filePath) });
              const newFileId = msg.audio.file_id;

              // –û–±–Ω–æ–≤–ª—è–µ–º fileId –≤ –±–∞–∑–µ
              await saveTrackForUser(ctx.from.id, t.title, newFileId);

              console.log(`–û–±–Ω–æ–≤–ª–µ–Ω fileId –¥–ª—è —Ç—Ä–µ–∫–∞ "${t.title}" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
            } else {
              console.warn(`–§–∞–π–ª –¥–ª—è —Ç—Ä–µ–∫–∞ "${t.title}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ.`);
              await ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ "${t.title}". –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            }
          }
        }
      }
    } else {
      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ fileId –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
      for (let t of chunk) {
        const filePath = path.join(cacheDir, `${sanitizeFilename(t.title)}.mp3`);
        if (fs.existsSync(filePath)) {
          const msg = await ctx.replyWithAudio({ source: fs.createReadStream(filePath) });
          const newFileId = msg.audio.file_id;

          await saveTrackForUser(ctx.from.id, t.title, newFileId);

          console.log(`–û–±–Ω–æ–≤–ª–µ–Ω fileId –¥–ª—è —Ç—Ä–µ–∫–∞ "${t.title}" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        } else {
          console.warn(`–§–∞–π–ª –¥–ª—è —Ç—Ä–µ–∫–∞ "${t.title}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ.`);
          await ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ "${t.title}". –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
      }
    }
  }
});

bot.command('admin', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
  }

  try {
    const users = await getAllUsers();
    const totalUsers = users.length;
    const totalDownloads = users.reduce((sum, u) => sum + (u.total_downloads || 0), 0);

    const activeToday = users.filter(u => {
      if (!u.last_active) return false;
      const last = new Date(u.last_active);
      const now = new Date();
      return last.toDateString() === now.toDateString();
    }).length;

    await ctx.reply(
`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}
üì• –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: ${totalDownloads}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${activeToday}

ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.
üß≠ –ü–∞–Ω–µ–ª—å: https://soundcloud-telegram-bot.onrender.com/dashboard`
    );
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ /admin:', e);
    await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});
bot.action('check_subscription', async ctx => {
  const subscribed = await isSubscribed(ctx.from.id);
  if (subscribed) {
    const user = await getUser(ctx.from.id);
    if (user.subscribed_bonus_used) {
      await ctx.reply('–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ–Ω—É—Å –ø–æ–¥–ø–∏—Å–∫–∏.');
    } else {
      const until = Date.now() + 7 * 24 * 3600 * 1000;
      await setPremium(ctx.from.id, 50, 7);
      await updateUserField(ctx.from.id, 'subscribed_bonus_used', true);
      await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: 7 –¥–Ω–µ–π Plus.');
    }
  } else {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @SCM_BLOG –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.');
  }
  await ctx.answerCbQuery();
});
bot.on('text', async ctx => {
  const url = extractUrl(ctx.message.text);
  if (!url) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç SoundCloud.');
    return;
  }

  try {
    await ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç.');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
  }

  enqueue(ctx, ctx.from.id, url).catch(async e => {
    console.error('–û—à–∏–±–∫–∞ –≤ enqueue:', e);
    try {
      await bot.telegram.sendMessage(ctx.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.');
    } catch {}
  });
});
// Telegram webhook
app.post(WEBHOOK_PATH, express.json(), (req, res) => {
  res.sendStatus(200);
  bot.handleUpdate(req.body).catch(err => console.error('–û—à–∏–±–∫–∞ handleUpdate:', err));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ webhook –±–æ—Ç–∞
(async () => {
  try {
    await bot.telegram.setWebhook(`${WEBHOOK_URL}${WEBHOOK_PATH}`);
    
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
      
      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏
      setInterval(() => {
        console.log(`‚è≥ –û—á–µ—Ä–µ–¥—å: ${globalQueue.length} –∑–∞–¥–∞—á`);
      }, 30000);
    });
    
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:', e);
    process.exit(1);
  }
})();