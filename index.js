require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const scdl = require('soundcloud-downloader').default;
const fs = require('fs');
const express = require('express');

const token = process.env.BOT_TOKEN;
const baseUrl = process.env.BASE_URL;
const clientId = 'vF3vRMFpTgZzqzDzsdgJ7zD4gmZTY4vK';

if (!token || !baseUrl) {
  throw new Error('‚ùå BOT_TOKEN –∏–ª–∏ BASE_URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
}

const bot = new TelegramBot(token);
bot.setWebHook(`${baseUrl}/bot${token}`);

// Express-—Å–µ—Ä–≤–µ—Ä
const app = express();
app.use(express.json());

app.post(`/bot${token}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const url = msg.text?.trim();

  if (!url || !url.includes('soundcloud.com')) {
    return bot.sendMessage(chatId, 'üìé –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç SoundCloud');
  }

  bot.sendMessage(chatId, '‚è¨ –ó–∞–≥—Ä—É–∂–∞—é...');

  try {
    const info = await scdl.getInfo(url, clientId);

    if (info.kind === 'playlist') {
      for (const track of info.tracks) {
        try {
          const stream = await scdl.download(track.permalink_url, clientId);
          const fileName = `track_${Date.now()}.mp3`;
          const writeStream = fs.createWriteStream(fileName);
          stream.pipe(writeStream);

          await new Promise((resolve, reject) => {
            writeStream.on('finish', resolve);
            writeStream.on('error', reject);
          });

          await bot.sendAudio(chatId, fileName, {
            title: track.title,
            performer: track.user.username || 'SoundCloud'
          });

          fs.unlinkSync(fileName);
        } catch (e) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å —Ç—Ä–µ–∫–æ–º –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞:', e.message);
        }
      }
    } else {
      const fileName = `track_${Date.now()}.mp3`;
      const stream = await scdl.download(url, clientId);
      const writeStream = fs.createWriteStream(fileName);

      stream.pipe(writeStream);

      writeStream.on('finish', async () => {
        await bot.sendAudio(chatId, fileName, {
          title: info.title,
          performer: info.user?.username || 'SoundCloud',
        });
        fs.unlinkSync(fileName);
      });

      writeStream.on('error', (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.');
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err.message || err);
    bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.');
  }
});
