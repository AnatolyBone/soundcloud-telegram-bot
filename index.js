const { Telegraf, Markup } = require('telegraf');
const compression = require('compression');
const express = require('express');
const session = require('express-session');
const ejs = require('ejs');
const fs = require('fs');
const path = require('path');
const ytdl = require('youtube-dl-exec');
const multer = require('multer');
const axios = require('axios');
const util = require('util');
const NodeID3 = require('node-id3');
const writeID3 = util.promisify(NodeID3.write);
const upload = multer({ dest: 'uploads/' });
const pgSession = require('connect-pg-simple')(session);
const { Pool } = require('pg');
const { Parser } = require('json2csv');
const playlistTracker = new Map();
const { supabase } = require('./db');
const expressLayouts = require('express-ejs-layouts');
const https = require('https');

async function resolveRedirect(url) {
  try {
    const response = await axios.head(url, {
      maxRedirects: 5,
      validateStatus: status => status >= 200 && status < 400
    });
    return response.request?.res?.responseUrl || url;
  } catch (err) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:', err.message);
    return url;
  }
}

const {
  createUser, getUser, updateUserField, incrementDownloads, setPremium,
  getAllUsers, resetDailyStats, addReview, saveTrackForUser, hasLeftReview,
  getLatestReviews, resetDailyLimitIfNeeded, getRegistrationsByDate,
  getDownloadsByDate, getActiveUsersByDate, getExpiringUsers, getReferralSourcesStats,
  markSubscribedBonusUsed, getUserActivityByDayHour, logUserActivity, getUserById,
  getExpiringUsersCount, getExpiringUsersPaginated
} = require('./db');

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = parseInt(process.env.ADMIN_ID, 10);
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const WEBHOOK_PATH = '/telegram';
const PORT = process.env.PORT || 3000;

if (!BOT_TOKEN || !ADMIN_ID || !process.env.ADMIN_LOGIN || !process.env.ADMIN_PASSWORD) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

if (isNaN(ADMIN_ID)) {
  console.error('‚ùå ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
const app = express();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –ö–µ—à —Ç—Ä–µ–∫–æ–≤
const cacheDir = path.join(__dirname, 'cache');
if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

// –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
setInterval(() => {
  const cutoff = Date.now() - 7 * 86400 * 1000;
  fs.readdir(cacheDir, (err, files) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞:', err);
      return;
    }
    files.forEach(file => {
      const filePath = path.join(cacheDir, file);
      fs.stat(filePath, (err, stats) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ stat —Ñ–∞–π–ª–∞:', err);
          return;
        }
        if (stats.mtimeMs < cutoff) {
          fs.unlink(filePath, err => {
            if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–µ—à–∞:', err);
            else console.log(`üóë –£–¥–∞–ª—ë–Ω –∫–µ—à: ${file}`);
          });
        }
      });
    });
  });
}, 3600 * 1000);

// –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
setInterval(() => resetDailyStats(), 24 * 3600 * 1000);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ç–µ–∫—Å—Ç—ã
const MAX_CONCURRENT_DOWNLOADS = 5;

let globalQueue = [];
let activeDownloadsCount = 0;

const texts = {
  start: 'üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ —Å SoundCloud.',
  menu: 'üìã –ú–µ–Ω—é',
  upgrade: 'üîì –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç',
  mytracks: 'üéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏',
  help: '‚ÑπÔ∏è –ü–æ–º–æ—â—å',
  downloading: 'üéß –ó–∞–≥—Ä—É–∂–∞—é...',
  error: '‚ùå –û—à–∏–±–∫–∞',
  noTracks: '–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.',
  limitReached: `üö´ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚ùå

üîî –ü–æ–ª—É—á–∏ 7 –¥–Ω–µ–π Plus!
–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @BAZAproject –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å.`,
  upgradeInfo: `üöÄ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤?

üÜì Free ‚Äî 5 üü¢
Plus ‚Äî 20 üéØ (59‚ÇΩ)
Pro ‚Äî 50 üí™ (119‚ÇΩ)
Unlimited ‚Äî üíé (199‚ÇΩ)

üëâ –î–æ–Ω–∞—Ç: https://boosty.to/anatoly_bone/donate
‚úâÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏: @anatolybone

üë´ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ 1 –¥–µ–Ω—å —Ç–∞—Ä–∏—Ñ–∞ Plus –∑–∞ –∫–∞–∂–¥–æ–≥–æ.`,
  helpInfo: '‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∏—à—å mp3.\nüîì –†–∞—Å—à–∏—Ä–∏—Ç—å ‚Äî –æ–ø–ª–∞—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏.\nüéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüìã –ú–µ–Ω—é ‚Äî —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ, –ª–∏–º–∏—Ç—ã, —Ä–µ—Ñ–µ—Ä–∞–ª—ã.',
  queuePosition: pos => `‚è≥ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (#${pos})`,
adminCommands: '\n\nüìã –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:\n/admin ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
};

const kb = () =>
  Markup.keyboard([
    [texts.menu, texts.upgrade],
    [texts.mytracks, texts.help]
  ]).resize();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
const isSubscribed = async userId => {
  try {
    const res = await bot.telegram.getChatMember('@BAZAproject', userId);
    return ['member', 'creator', 'administrator'].includes(res.status);
  } catch {
    return false;
  }
};

async function sendAudioSafe(ctx, userId, filePath, title) {
  try {
    const message = await ctx.telegram.sendAudio(userId, {
      source: fs.createReadStream(filePath),
      filename: `${title}.mp3`
    }, {
      title,
      performer: 'SoundCloud'
    });
    return message.audio.file_id;
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, e);
    await ctx.telegram.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞.');
    return null;
  }
}
async function processTrackByUrl(ctx, userId, url, playlistUrl = null) {
  const start = Date.now();
  try {
    url = await resolveRedirect(url);

    const info = await ytdl(url, { dumpSingleJson: true });

    let name = info.title || 'track';
    name = sanitizeFilename(name);
    if (name.length > 64) name = name.slice(0, 64);

    const fp = path.join(cacheDir, `${name}.mp3`);

    if (!fs.existsSync(fp)) {
      await ytdl(url, {
        extractAudio: true,
        audioFormat: 'mp3',
        output: fp,
        preferFreeFormats: true,
        noCheckCertificates: true,
      });

      // –ñ–¥—ë–º, –ø–æ–∫–∞ –∑–∞–ø–∏—à—É—Ç—Å—è ID3-—Ç–µ–≥–∏
      try {
        await writeID3({ title: name, artist: 'SoundCloud' }, fp);
        console.log(`üéµ ID3 —Ç–µ–≥–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–ª—è ${name}`);
      } catch (err) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ID3 —Ç–µ–≥–æ–≤ –¥–ª—è ${name}:`, err);
      }
    }

    await incrementDownloads(userId, name);

    const fileId = await sendAudioSafe(ctx, userId, fp);

    if (fileId) {
      await saveTrackForUser(userId, name, fileId);
      await pool.query('INSERT INTO downloads_log (user_id, track_title) VALUES ($1, $2)', [userId, name]);
    } else {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å fileId –¥–ª—è —Ç—Ä–µ–∫–∞ ${name}`);
    }

    const duration = ((Date.now() - start) / 1000).toFixed(1);
    console.log(`‚úÖ –¢—Ä–µ–∫ ${name} –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ ${duration} —Å–µ–∫.`);

    if (playlistUrl) {
      const playlistKey = `${userId}:${playlistUrl}`;
      if (playlistTracker.has(playlistKey)) {
        let remaining = playlistTracker.get(playlistKey) - 1;
        if (remaining <= 0) {
          await ctx.telegram.sendMessage(userId, '‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
          playlistTracker.delete(playlistKey);
        } else {
          playlistTracker.set(playlistKey, remaining);
        }
      }
    }
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${url}:`, e);
    await ctx.telegram.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞.');
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é –∑–∞–≥—Ä—É–∑–æ–∫
function addToGlobalQueue(task) {
  globalQueue.push(task);
  globalQueue.sort((a, b) => b.priority - a.priority);
}

async function processNextInQueue() {
  while (activeDownloadsCount < MAX_CONCURRENT_DOWNLOADS && globalQueue.length > 0) {
    const task = globalQueue.shift();
    activeDownloadsCount++;
    const { ctx, userId, url, playlistUrl } = task;

    try {
      await processTrackByUrl(ctx, userId, url, playlistUrl);
    } catch (e) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞ ${url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, e);
      try {
        await ctx.telegram.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞.');
      } catch {}
    }

    activeDownloadsCount--;
    processNextInQueue();
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –ª–∏–º–∏—Ç–∞
async function enqueue(ctx, userId, url) {
url = await resolveRedirect(url);
  try {
    await logUserActivity(userId);
    await resetDailyLimitIfNeeded(userId);

    const user = await getUser(userId);
    const remainingLimit = user.premium_limit - user.downloads_today;
    if (remainingLimit <= 0) {
      return ctx.telegram.sendMessage(userId, texts.limitReached, Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_subscription')
      ]));
    }

    const info = await ytdl(url, { dumpSingleJson: true });
    const isPlaylist = Array.isArray(info.entries);
    let entries = [];

    if (isPlaylist) {
      entries = info.entries.filter(e => e && e.webpage_url).map(e => e.webpage_url);
      const playlistKey = `${user.id}:${url}`;
      playlistTracker.set(playlistKey, entries.length);

      if (entries.length > remainingLimit) {
        await ctx.telegram.sendMessage(userId,
          `‚ö†Ô∏è –í –ø–ª–µ–π–ª–∏—Å—Ç–µ ${entries.length} —Ç—Ä–µ–∫–æ–≤, –Ω–æ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${remainingLimit}. –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–≤—ã–µ ${remainingLimit}.`);
        entries = entries.slice(0, remainingLimit);
      }
    } else {
      entries = [url];
    }

    for (const entryUrl of entries) {
      addToGlobalQueue({
        ctx,
        userId,
        url: entryUrl,
        playlistUrl: isPlaylist ? url : null,
        priority: user.premium_limit
      });
    }

    await ctx.telegram.sendMessage(userId, texts.queuePosition(
      globalQueue.filter(task => task.userId === userId).length
    ));

    processNextInQueue();
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ enqueue:', e);
    await ctx.telegram.sendMessage(userId, texts.error);
  }
}

// –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º
async function broadcastMessage(bot, pool, message) {
  const users = await getAllUsers();
  let successCount = 0;
  let errorCount = 0;

  for (const user of users) {
    if (!user.active) continue;
    try {
      await bot.telegram.sendMessage(user.id, message);
      successCount++;
      await new Promise(r => setTimeout(r, 150));
    } catch (e) {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, e.description || e.message);
      errorCount++;
      try {
        await pool.query('UPDATE users SET active = FALSE WHERE id = $1', [user.id]);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      }
    }
  }
  return { successCount, errorCount };
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
async function addOrUpdateUserInSupabase(id, first_name, username, referralSource) {
  if (!id) return;
  if (!supabase) {
    console.error('Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return;
  }
  try {
    const { error } = await supabase
      .from('users')
      .upsert([{ id, first_name, username, referred_by: referralSource || null }]);
    if (error) {
      console.error('–û—à–∏–±–∫–∞ upsert –≤ Supabase:', error);
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ Supabase:', e);
  }
}
function getPersonalMessage(user) {
  const now = new Date();
  const premiumUntil = user.premium_until ? new Date(user.premium_until) : null;
  const daysLeft = premiumUntil ? Math.ceil((premiumUntil - now) / 86400000) : 0;

  const tariffName =
    user.premium_limit === 5 ? 'Free (10/–¥–µ–Ω—å)' :
    user.premium_limit === 20 ? 'Plus (50/–¥–µ–Ω—å)' :
    user.premium_limit === 50 ? 'Pro (100/–¥–µ–Ω—å)' :
    'Unlimited';

  const refLink = `https://t.me/SCloudMusicBot?start=${user.id}`;

  return `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}!

üòé –≠—Ç–æ—Ç –±–æ—Ç ‚Äî –Ω–µ —Å—Ç–∞—Ä—Ç–∞–ø –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.  
–Ø –¥–µ–ª–∞—é –µ–≥–æ —Å–∞–º, –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è —É–¥–æ–±–Ω—ã–π –∏ —á–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.  
–ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã, –±–µ–∑ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤—Å—ë –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É.

–ï—Å–ª–∏ –ø–æ–ª—å–∑—É–µ—à—å—Å—è ‚Äî –∫—Ä—É—Ç–æ. –†–∞–¥, —á—Ç–æ –∑–∞—à–ª–æ.  
–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Ç—É—Ç üôå

‚ö†Ô∏è –°–∫–æ—Ä–æ –Ω–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∑–∏–º –ª–∏–º–∏—Ç—ã, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ.  
–ü—Ä–æ–µ–∫—Ç –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ –º–æ–∏—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö, –∏ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –∏–¥—Ç–∏ –Ω–∞ —Ç–∞–∫–∏–µ –º–µ—Ä—ã.

–ù–∞–¥–µ—é—Å—å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.  `;
}
// –§–æ—Ä–º–∞—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function formatMenuMessage(user) {
  const now = new Date();
  const premiumUntil = user.premium_until ? new Date(user.premium_until) : null;
  const daysLeft = premiumUntil ? Math.ceil((premiumUntil - now) / 86400000) : 0;

const tariffName =
  user.premium_limit === 5 ? 'Free (5/–¥–µ–Ω—å)' :
  user.premium_limit === 20 ? 'Plus (20/–¥–µ–Ω—å)' :
  user.premium_limit === 50 ? 'Pro (50/–¥–µ–Ω—å)' :
  'Unlimited';

  const refLink = `https://t.me/SCloudMusicBot?start=${user.id}`;

  return `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!

üì• –ë–æ—Ç –∫–∞—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏ —Ü–µ–ª—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å SoundCloud –≤ MP3.  
–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É ‚Äî –∏ –≤—Å—ë üßô‚Äç‚ôÇÔ∏è

üîÑ –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ —Ç—ã —É–≤–∏–¥–∏—à—å —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏.  
üéØ –ü–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (Plus / Pro / Unlimited) –∏–¥—É—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ‚Äî –∏—Ö —Ç—Ä–µ–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏.  
üì• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–∂–µ –ø–æ–ª—É—á–∞—é—Ç —Ç—Ä–µ–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —á—É—Ç—å –ø–æ–∑–∂–µ. –í—Å—ë —á–µ—Å—Ç–Ω–æ.

üíº –¢–∞—Ä–∏—Ñ: ${tariffName}  
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft > 0 ? daysLeft : '0'}

üéß –°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ: ${user.downloads_today || 0} –∏–∑ ${user.premium_limit}

üéÅ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ?

–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @BAZAproject ‚Äî –ø–æ–ª—É—á–∏ 7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus –±–µ—Å–ø–ª–∞—Ç–Ω–æ.

–ù–∞–∂–º–∏ ¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å.

üë´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.referred_count || 0}  
üéÅ –ü–æ–ª—É—á–µ–Ω–æ –¥–Ω–µ–π Plus –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: ${user.referred_count || 0}

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:  
${refLink}
`;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ SoundCloud –∏–∑ —Ç–µ–∫—Å—Ç–∞
function extractUrl(text) {
  const regex = /(https?:\/\/[^\s]+)/g;
  const matches = text.match(regex);
  if (!matches) return null;
  return matches.find(url => url.includes('soundcloud.com')) || matches[0];
}
// // === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express ===
app.use((req, res, next) => {
  res.locals.user = req.user || null;
  res.locals.page = null;        // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ
  res.locals.title = '–ê–¥–º–∏–Ω–∫–∞';
  next();
});

app.use(compression());
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(expressLayouts); // –ò—Å–ø–æ–ª—å–∑—É–µ–º layout
app.set('view engine', 'ejs'); // –£–∫–∞–∑—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
app.set('views', path.join(__dirname, 'views')); // –ü–∞–ø–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
app.set('layout', 'layout');

app.use(session({
  store: new pgSession({ pool, tableName: 'session', createTableIfMissing: true }),
  secret: process.env.SESSION_SECRET || 'secret',
  resave: false,
  saveUninitialized: false,
  cookie: { maxAge: 30 * 24 * 60 * 60 * 1000 }
}));

app.use(async (req, res, next) => {
  if (req.session.authenticated && req.session.userId === ADMIN_ID) {
    try {
      const user = await getUserById(req.session.userId);
      if (user) {
        req.user = user;
        res.locals.user = user;  // –≤–∞–∂–Ω–æ –¥–ª—è ejs partials
      } else {
        res.locals.user = null;
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤:', e);
      res.locals.user = null;
    }
  } else {
    res.locals.user = null;
  }
  next();
});

function getLastMonths(n = 6) {
  const months = [];
  const now = new Date();
  for (let i = 0; i < n; i++) {
    const d = new Date(now.getFullYear(), now.getMonth() - i, 1);
    const ym = d.toISOString().slice(0, 7); // 'YYYY-MM'
    const display = d.toLocaleString('ru-RU', { month: 'long', year: 'numeric' });
    months.push({ value: `month:${ym}`, label: display });
  }
  return months;
}
// Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏
async function requireAuth(req, res, next) {
  if (req.session.authenticated && req.session.userId === ADMIN_ID) {
    return next();
  }
  res.redirect('/admin');
}
// activityByDayHour ‚Äî –æ–±—ä–µ–∫—Ç –≤–∏–¥–∞ { "2025-07-01": {0: 5, 1: 3, ...}, "2025-07-02": {...} }
function computeActivityByHour(activityByDayHour) {
  const hours = Array(24).fill(0);
  for (const day in activityByDayHour) {
    const hoursData = activityByDayHour[day];
    for (let h = 0; h < 24; h++) {
      hours[h] += hoursData[h] || 0;
    }
  }
  return hours;
}

function computeActivityByWeekday(activityByDayHour) {
  const weekdays = Array(7).fill(0); // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 0, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 1 –∏ —Ç.–¥.
  for (const dayStr in activityByDayHour) {
    const date = new Date(dayStr);
    const weekday = date.getDay();
    const hoursData = activityByDayHour[dayStr];
    const dayTotal = Object.values(hoursData).reduce((a,b) => a+b, 0);
    weekdays[weekday] += dayTotal;
  }
  return weekdays;
}
// === –ú–∞—Ä—à—Ä—É—Ç—ã Express ===

// –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
app.get('/admin', (req, res) => {
  if (req.session.authenticated && req.session.userId === ADMIN_ID) {
    return res.redirect('/dashboard');
  }
  res.locals.page = 'admin';
  res.render('login', { title: '–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É', error: null });
});

app.post('/admin', (req, res) => {
  const { username, password } = req.body;
  if (username === process.env.ADMIN_LOGIN && password === process.env.ADMIN_PASSWORD) {
    req.session.authenticated = true;
    req.session.userId = ADMIN_ID;
    res.redirect('/dashboard');
  } else {
    res.locals.page = 'admin';
    res.render('login', { title: '–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É', error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
  }
});
// ===== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ =====
function toYMD(date) {
  return date.toISOString().split('T')[0];
}

function filterStatsByPeriod(data, period) {
  if (!Array.isArray(data)) return [];

  if (period === '7') {
    const fromYMD = toYMD(new Date(Date.now() - 7 * 86400000));
    return data.filter(item => item.date >= fromYMD);
  } 
  if (period === '30') {
    const fromYMD = toYMD(new Date(Date.now() - 30 * 86400000));
    return data.filter(item => item.date >= fromYMD);
  } 
  if (/^\d{4}-\d{2}$/.test(period)) {  // —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM'
    return data.filter(item => item.date && item.date.startsWith(period));
  }

  return data; // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
}
// –î–∞—à–±–æ—Ä–¥
app.get('/dashboard', requireAuth, async (req, res) => {
  try {
    res.locals.page = 'dashboard';

    const showInactive = req.query.showInactive === 'true';
    const period = req.query.period || '30';
    const expiringLimit = parseInt(req.query.expiringLimit) || 10;
    const expiringOffset = parseInt(req.query.expiringOffset) || 0;

    console.log('üìå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { period, showInactive, expiringLimit, expiringOffset });

    const expiringSoon = await getExpiringUsersPaginated(expiringLimit, expiringOffset);
    const expiringCount = await getExpiringUsersCount();
    console.log('üïì expiringSoon:', expiringSoon.length);

    const users = await getAllUsers(showInactive);
    console.log('üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length);

    const downloadsByDateRaw = await getDownloadsByDate();
    const registrationsByDateRaw = await getRegistrationsByDate();
    const activeByDateRaw = await getActiveUsersByDate();

    console.log('üìä –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('–ó–∞–≥—Ä—É–∑–∫–∏:', downloadsByDateRaw);
    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registrationsByDateRaw);
    console.log('–ê–∫—Ç–∏–≤–Ω—ã–µ:', activeByDateRaw);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ { 'date': count, ... } –≤ –º–∞—Å—Å–∏–≤ [{date, count}, ...]
    function convertObjToArray(dataObj) {
      if (!dataObj) return [];
      return Object.entries(dataObj).map(([date, count]) => ({ date, count }));
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤—ã –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    const filteredRegistrations = filterStatsByPeriod(convertObjToArray(registrationsByDateRaw), period);
    const filteredDownloads = filterStatsByPeriod(convertObjToArray(downloadsByDateRaw), period);
    const filteredActive = filterStatsByPeriod(convertObjToArray(activeByDateRaw), period);

    console.log('üìÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:');
    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', filteredRegistrations);
    console.log('–ó–∞–≥—Ä—É–∑–∫–∏:', filteredDownloads);
    console.log('–ê–∫—Ç–∏–≤–Ω—ã–µ:', filteredActive);

    function prepareChartData(registrations, downloads, active) {
      const dateSet = new Set([
        ...registrations.map(r => r.date),
        ...downloads.map(d => d.date),
        ...active.map(a => a.date)
      ]);
      const dates = Array.from(dateSet).sort();

      const regMap = new Map(registrations.map(r => [r.date, r.count]));
      const dlMap = new Map(downloads.map(d => [d.date, d.count]));
      const actMap = new Map(active.map(a => [a.date, a.count]));

      const regData = dates.map(date => regMap.get(date) || 0);
      const dlData = dates.map(date => dlMap.get(date) || 0);
      const actData = dates.map(date => actMap.get(date) || 0);

      return {
        labels: dates,
        datasets: [
          {
            label: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
            data: regData,
            borderColor: 'rgba(75, 192, 192, 1)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            fill: false,
          },
          {
            label: '–ó–∞–≥—Ä—É–∑–∫–∏',
            data: dlData,
            borderColor: 'rgba(255, 99, 132, 1)',
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            fill: false,
          },
          {
            label: '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            data: actData,
            borderColor: 'rgba(75, 192, 192, 1)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            fill: false,
          }
        ]
      };
    }

    const chartDataCombined = prepareChartData(filteredRegistrations, filteredDownloads, filteredActive);
    console.log('üìà chartDataCombined:', chartDataCombined);

    const stats = {
      totalUsers: users.length,
      totalDownloads: users.reduce((sum, u) => sum + (u.total_downloads || 0), 0),
      free: users.filter(u => u.premium_limit === 5).length,
      plus: users.filter(u => u.premium_limit === 25).length,
      pro: users.filter(u => u.premium_limit === 50).length,
      unlimited: users.filter(u => u.premium_limit >= 1000).length,
      registrationsByDate: filteredRegistrations,
      downloadsByDate: filteredDownloads,
      activeByDate: filteredActive
    };
    console.log('üì¶ stats:', stats);

    const activityByDayHour = await getUserActivityByDayHour();
    const activityByHour = computeActivityByHour(activityByDayHour);
    const activityByWeekday = computeActivityByWeekday(activityByDayHour);

    console.log('‚è± activityByHour:', activityByHour);
    console.log('üìÖ activityByWeekday:', activityByWeekday);

    const referralStats = await getReferralSourcesStats();
    console.log('üîó referralStats:', referralStats);

    function getLastMonths(count = 6) {
      const months = [];
      const now = new Date();
      for (let i = 0; i < count; i++) {
        const d = new Date(now.getFullYear(), now.getMonth() - i, 1);
        const value = d.toISOString().slice(0, 7); // 'YYYY-MM'
        const label = d.toLocaleString('ru-RU', { month: 'long', year: 'numeric' });
        months.push({ value, label });
      }
      return months;
    }

    const lastMonths = getLastMonths(6);
    console.log('üìÜ lastMonths:', lastMonths);

    const chartDataHourActivity = {
  labels: [...Array(24).keys()].map(h => `${h}:00`),
  datasets: [{
    label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º',
    data: activityByHour,
    backgroundColor: 'rgba(54, 162, 235, 0.7)',
  }],
};

const chartDataWeekdayActivity = {
  labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
  datasets: [{
    label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏',
    data: activityByWeekday,
    backgroundColor: 'rgba(255, 206, 86, 0.7)',
  }],
};
const chartDataDownloads = {
    labels: ['2025-07-01', '2025-07-02', '2025-07-03'],
datasets: [{
  label: '–ó–∞–≥—Ä—É–∑–∫–∏',
  data: [81, 281, 243],
  backgroundColor: 'rgba(75, 192, 192, 0.2)',
  borderColor: 'rgba(75, 192, 192, 1)',
  borderWidth: 1
}]
  };
console.log('chartDataDownloads:', chartDataDownloads);

res.render('dashboard', {
  title: '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
  stats,
  users,
  referralStats,
  expiringSoon,
  expiringCount,
  expiringOffset,
  expiringLimit,
  activityByHour,
  activityByWeekday,
  chartDataCombined,
  chartDataHourActivity,       // <--- –≤–æ—Ç –æ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
  chartDataWeekdayActivity,    // <--- –≤–æ—Ç –æ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
  showInactive,
  period,
  retentionData: [],
  funnelData: [],
  customStyles: '',
  customScripts: '',
  chartDataHeatmap: {},
  chartDataFunnel: {},
  chartDataRetention: {},     // —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É
  chartDataUserFunnel: {},
  chartDataDownloads,
  lastMonths
});
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ dashboard:', e);
    res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

// –í—ã—Ö–æ–¥
app.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.redirect('/admin');
  });
});

// –†–∞—Å—Å—ã–ª–∫–∞
app.get('/broadcast', requireAuth, (req, res) => {
  res.locals.page = 'broadcast';
  res.render('broadcast-form', { title: '–†–∞—Å—Å—ã–ª–∫–∞', error: null });
});

app.post('/broadcast', requireAuth, upload.single('audio'), async (req, res) => {
  const { message } = req.body;
  const audio = req.file;

  if (!message && !audio) {
    return res.status(400).render('broadcast-form', { error: '–¢–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  const users = await getAllUsers();
  let success = 0, error = 0;

  for (const u of users) {
    if (!u.active) continue;
    try {
      if (audio) {
        await bot.telegram.sendAudio(u.id, {
          source: fs.createReadStream(audio.path),
          filename: audio.originalname
        }, { caption: message || '' });
      } else {
        await bot.telegram.sendMessage(u.id, message);
      }
      success++;
      await new Promise(r => setTimeout(r, 150));
    } catch (e) {
      error++;
      try {
        await pool.query('UPDATE users SET active = FALSE WHERE id = $1', [u.id]);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      }
    }
  }

  if (audio) {
    fs.unlink(audio.path, err => {
      if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—É–¥–∏–æ:', err);
    });
  }

  res.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}, –æ—à–∏–±–æ–∫: ${error}`);
});

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π CSV
app.get('/export', requireAuth, async (req, res) => {
  try {
    res.locals.page = 'export';
    const allUsers = await getAllUsers(true);
    const period = req.query.period || 'all';

    const filteredUsers = allUsers.filter(user => {
      if (period === 'all') return true;
      if (period === '7' || period === '30') {
        const from = new Date(Date.now() - parseInt(period) * 86400000);
        return new Date(user.created_at) >= from;
      }
      if (period.startsWith('month:')) {
        const ym = period.split(':')[1]; // 'YYYY-MM'
        return user.created_at.startsWith(ym);
      }
      return true;
    });

    const fields = ['id', 'username', 'first_name', 'total_downloads', 'premium_limit', 'created_at', 'last_active'];
    const parser = new Parser({ fields });
    const csv = parser.parse(filteredUsers);

    res.header('Content-Type', 'text/csv');
    res.attachment(`users_${period}.csv`);
    res.send(csv);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV:', e);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});
// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Ç–∞—Ä–∏—Ñ–æ–º
app.get('/expiring-users', requireAuth, async (req, res) => {
  res.locals.page = 'expiring-users';
  const page = parseInt(req.query.page) || 1;
  const perPage = parseInt(req.query.perPage) || 10;

  try {
    const total = await getExpiringUsersCount();
    const users = await getExpiringUsersPaginated(perPage, (page - 1) * perPage);
    const totalPages = Math.ceil(total / perPage);

    res.render('expiring-users', {
      title: '–ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏',
      users,
      page,
      perPage,
      totalPages
    });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ expiring-users:', e);
    res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
app.post('/set-tariff', express.urlencoded({ extended: true }), requireAuth, async (req, res) => {
  const { userId, limit } = req.body;
  if (!userId || !limit) return res.status(400).send('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');

  let limitNum = parseInt(limit);
  if (![10, 50, 100, 1000].includes(limitNum)) {
    return res.status(400).send('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ');
  }

  try {
    await setPremium(userId, limitNum, null);
    res.redirect('/dashboard');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞—Ä–∏—Ñ–∞:', e);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});
// === Telegraf –±–æ—Ç ===

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.start(async ctx => {
  const user = ctx.from;
  await createUser(user.id, user.first_name, user.username);
  await addOrUpdateUserInSupabase(user.id, user.first_name, user.username);

  const fullUser = await getUser(user.id);

  await ctx.reply(getPersonalMessage(fullUser));

  // ‚è≥ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É ~1.5 —Å–µ–∫—É–Ω–¥—ã
  await ctx.replyWithChatAction('typing'); // —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
  await new Promise(resolve => setTimeout(resolve, 2000));

  await ctx.reply(formatMenuMessage(fullUser), kb());
});

bot.hears(texts.menu, async ctx => {
  const user = await getUser(ctx.from.id);
  await ctx.reply(formatMenuMessage(user), kb());

  // –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –±–æ–Ω—É—Å –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
  if (!user.subscribed_bonus_used) {
    await ctx.reply(
      '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏:',
      Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_subscription')
      ])
    );
  }
});

bot.hears(texts.help, async ctx => {
  await ctx.reply(texts.helpInfo, kb());
});

bot.hears(texts.upgrade, async ctx => {
  await ctx.reply(texts.upgradeInfo, kb());
});

function sanitizeFilename(name) {
  return name.replace(/[<>:"/\\|?*]+/g, '').trim();
}

bot.hears(texts.mytracks, async ctx => {
  const user = await getUser(ctx.from.id);
  if (!user) return ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

  let tracks = [];
  try {
    tracks = user.tracks_today ? JSON.parse(user.tracks_today) : [];
  } catch (e) {
    console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ tracks_today:', e);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }

  if (!tracks.length) return ctx.reply('–°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞—á–∏–≤–∞–ª.');

  await ctx.reply(`–°–∫–∞—á–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è ${tracks.length} –∏–∑ ${user.premium_limit || 10}`);

  for (let i = 0; i < tracks.length; i += 5) {
    const chunk = tracks.slice(i, i + 5);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º fileId
    const mediaGroup = chunk
      .filter(t => t.fileId && typeof t.fileId === 'string' && t.fileId.trim().length > 0)
      .map(t => ({
        type: 'audio',
        media: t.fileId
      }));

    if (mediaGroup.length > 0) {
      try {
        await ctx.replyWithMediaGroup(mediaGroup);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ-–ø–∞—á–∫–∏:', e);

        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Ç—Ä–µ–∫—É –±–µ–∑ caption
        for (let t of chunk) {
          try {
            await ctx.replyWithAudio(t.fileId);
          } catch {
            // –ï—Å–ª–∏ fileId –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            const filePath = path.join(cacheDir, `${sanitizeFilename(t.title)}.mp3`);
            if (fs.existsSync(filePath)) {
              const msg = await ctx.replyWithAudio({ source: fs.createReadStream(filePath) });
              const newFileId = msg.audio.file_id;

              // –û–±–Ω–æ–≤–ª—è–µ–º fileId –≤ –±–∞–∑–µ
              await saveTrackForUser(ctx.from.id, t.title, newFileId);

              console.log(`–û–±–Ω–æ–≤–ª–µ–Ω fileId –¥–ª—è —Ç—Ä–µ–∫–∞ "${t.title}" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
            } else {
              console.warn(`–§–∞–π–ª –¥–ª—è —Ç—Ä–µ–∫–∞ "${t.title}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ.`);
              await ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ "${t.title}". –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            }
          }
        }
      }
    } else {
      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ fileId –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
      for (let t of chunk) {
        const filePath = path.join(cacheDir, `${sanitizeFilename(t.title)}.mp3`);
        if (fs.existsSync(filePath)) {
          const msg = await ctx.replyWithAudio({ source: fs.createReadStream(filePath) });
          const newFileId = msg.audio.file_id;

          await saveTrackForUser(ctx.from.id, t.title, newFileId);

          console.log(`–û–±–Ω–æ–≤–ª–µ–Ω fileId –¥–ª—è —Ç—Ä–µ–∫–∞ "${t.title}" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        } else {
          console.warn(`–§–∞–π–ª –¥–ª—è —Ç—Ä–µ–∫–∞ "${t.title}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ.`);
          await ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ "${t.title}". –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
      }
    }
  }
});

bot.command('admin', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
  }

  try {
    const users = await getAllUsers();
    const totalUsers = users.length;
    const totalDownloads = users.reduce((sum, u) => sum + (u.total_downloads || 0), 0);

    const activeToday = users.filter(u => {
      if (!u.last_active) return false;
      const last = new Date(u.last_active);
      const now = new Date();
      return last.toDateString() === now.toDateString();
    }).length;

    await ctx.reply(
`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}
üì• –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: ${totalDownloads}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${activeToday}

ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.
üß≠ –ü–∞–Ω–µ–ª—å: https://soundcloud-telegram-bot.onrender.com/dashboard`
    );
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ /admin:', e);
    await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});
bot.action('check_subscription', async ctx => {
  const subscribed = await isSubscribed(ctx.from.id);
  if (subscribed) {
    const user = await getUser(ctx.from.id);
    if (user.subscribed_bonus_used) {
      await ctx.reply('–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ–Ω—É—Å –ø–æ–¥–ø–∏—Å–∫–∏.');
    } else {
      const until = Date.now() + 7 * 24 * 3600 * 1000;
      await setPremium(ctx.from.id, 50, 7);
      await updateUserField(ctx.from.id, 'subscribed_bonus_used', true);
      await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: 7 –¥–Ω–µ–π Plus.');
    }
  } else {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @BAZAproject –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.');
  }
  await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏
bot.on('text', async ctx => {
  const url = extractUrl(ctx.message.text);
  if (!url) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç SoundCloud.');
    return;
  }

  // –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º ‚Äî —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å
  ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç.').catch(console.error);

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Äî –±–µ–∑ ctx
  enqueue(ctx, ctx.from.id, url).catch(e => {
    console.error('–û—à–∏–±–∫–∞ –≤ enqueue:', e);
    bot.telegram.sendMessage(ctx.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.').catch(console.error);
  });
});

// Telegram webhook
app.post(WEBHOOK_PATH, express.json(), (req, res) => {
  res.sendStatus(200);
  bot.handleUpdate(req.body).catch(err => console.error('–û—à–∏–±–∫–∞ handleUpdate:', err));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ webhook –±–æ—Ç–∞
(async () => {
  try {
    await bot.telegram.setWebhook(`${WEBHOOK_URL}${WEBHOOK_PATH}`);
    app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
    console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:', e);
    process.exit(1);
  }
})();
