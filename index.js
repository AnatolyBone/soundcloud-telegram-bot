// index.js

// Core
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Server
import express from 'express';
import session from 'express-session';
import pgSessionFactory from 'connect-pg-simple';
import expressLayouts from 'express-ejs-layouts';
import multer from 'multer';

// Telegram
import { Telegraf, Markup } from 'telegraf';

// Storage & Utils
import { createClient } from 'redis';
import ytdl from 'youtube-dl-exec';

// Database & Config
import { pool, supabase, getUser, updateUserField, setPremium, getAllUsers, resetDailyStats, saveTrackForUser, getUserById, findCachedTrack, cacheTrack, getExpiringUsersPaginated, getExpiringUsersCount, getReferralSourcesStats, getFunnelData, getDashboardStats, logEvent, resetDailyLimitIfNeeded } from './db.js';
import { T, loadTexts } from './config/texts.js';
import { ADMIN_ID, WEBHOOK_URL, WEBHOOK_PATH, PORT, SESSION_SECRET, ADMIN_LOGIN, ADMIN_PASSWORD, STORAGE_CHANNEL_ID, NODE_ENV } from './config.js';
import { initNotifier, startNotifier } from './services/notifier.js';
import { TaskQueue } from './src/lib/TaskQueue.js';

// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====
const bot = new Telegraf(process.env.BOT_TOKEN);
initNotifier(bot);

const app = express();
const upload = multer({ dest: 'uploads/' });
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const cacheDir = path.join(__dirname, 'cache');
let redisClient = null;

export const getRedisClient = () => redisClient;

// ================================================================
// ===                   –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã                 ===
// ================================================================

function sanitizeFilename(name) {
    return (name || 'track').replace(/[<>:"/\\|?*]+/g, '').trim().slice(0, 100);
}

const extractUrl = (text = '') => {
    const regex = /(https?:\/\/[^\s]+)/g;
    const matches = text.match(regex);
    return matches ? matches.find(url => url.includes('soundcloud.com')) : null;
};

async function cleanupCache(directory, maxAgeMinutes = 60) {
    try {
        const now = Date.now();
        const files = await fs.promises.readdir(directory);
        let cleaned = 0;
        for (const file of files) {
            try {
                const filePath = path.join(directory, file);
                const stat = await fs.promises.stat(filePath);
                if ((now - stat.mtimeMs) / 60000 > maxAgeMinutes) {
                    await fs.promises.unlink(filePath);
                    cleaned++;
                }
            } catch {}
        }
        if (cleaned > 0) console.log(`[Cache Cleanup] –£–¥–∞–ª–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤.`);
    } catch (e) {
        if (e.code !== 'ENOENT') console.error('[Cache Cleanup] –û—à–∏–±–∫–∞:', e);
    }
}

// ================================================================
// ===                   –õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (Worker)               ===
// ================================================================

async function trackDownloadProcessor(task) {
    const { ctx, userId, url, trackName, uploader } = task;
    const tempFilePath = path.join(cacheDir, `${sanitizeFilename(trackName)}-${Date.now()}.mp3`);

    try {
        await ytdl(url, {
            output: tempFilePath,
            extractAudio: true,
            audioFormat: 'mp3',
            embedMetadata: true,
            postprocessorArgs: [`-metadata`, `artist=${uploader}`, `-metadata`, `title=${trackName}`]
        });

        if (!fs.existsSync(tempFilePath)) throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω');

        const message = await bot.telegram.sendAudio(
            userId,
            { source: fs.createReadStream(tempFilePath) },
            { title: trackName, performer: uploader }
        );
        
        if (message?.audio?.file_id) {
            await cacheTrack(url, message.audio.file_id, trackName);
            await saveTrackForUser(userId, trackName, message.audio.file_id);
            await incrementDownloads(userId, trackName, url);
        }
    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è ${trackName}:`, err.stderr || err.message);
        await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–µ–∫: "${trackName}"`);
    } finally {
        if (fs.existsSync(tempFilePath)) {
            await fs.promises.unlink(tempFilePath).catch(() => {});
        }
    }
}

const downloadQueue = new TaskQueue({
    maxConcurrent: 1,
    taskProcessor: trackDownloadProcessor
});

async function enqueue(ctx, userId, url) {
    try {
        await resetDailyLimitIfNeeded(userId);
        const user = await getUser(userId);
        if (user.downloads_today >= user.premium_limit) {
            return ctx.reply(T('limitReached'));
        }

        const info = await ytdl(url, { dumpSingleJson: true, 'no-playlist': true });
        if (!info) return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ.');
        
        const trackName = sanitizeFilename(info.title);
        const uploader = info.uploader || 'SoundCloud';

        const cached = await findCachedTrack(url);
        if (cached?.fileId) {
            await bot.telegram.sendAudio(userId, cached.fileId, { title: trackName, performer: uploader });
            await saveTrackForUser(userId, trackName, cached.fileId);
            await incrementDownloads(userId, trackName, url);
            return;
        }

        downloadQueue.add({ ctx, userId, url, trackName, uploader });
        await ctx.reply(`‚è≥ –¢—Ä–µ–∫ "${trackName}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.`);

    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ enqueue –¥–ª—è ${userId}:`, err.message);
        await ctx.reply(T('error'));
    }
}

// ================================================================
// ===                   –õ–æ–≥–∏–∫–∞ "–ü–∞—É–∫–∞" (Indexer)               ===
// ================================================================

async function getUrlsToIndexForIndexer() {
    const { rows } = await pool.query(`
        SELECT url FROM downloads_log
        WHERE url IS NOT NULL AND url LIKE '%soundcloud.com%' AND url NOT IN (SELECT url FROM track_cache)
        GROUP BY url ORDER BY COUNT(url) DESC LIMIT 10
    `);
    return rows.map(row => row.url);
}

async function processUrlForIndexer(url) {
    let tempFilePath = null;
    try {
        const info = await ytdl(url, { dumpSingleJson: true, 'no-playlist': true });
        if (!info) return;

        const trackName = sanitizeFilename(info.title);
        const uploader = info.uploader || 'SoundCloud';
        tempFilePath = path.join(cacheDir, `indexer_${info.id || Date.now()}.mp3`);

        await ytdl(url, {
            output: tempFilePath,
            extractAudio: true,
            audioFormat: 'mp3',
            embedMetadata: true,
            postprocessorArgs: [`-metadata`, `artist=${uploader}`, `-metadata`, `title=${trackName}`]
        });

        if (!fs.existsSync(tempFilePath)) throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω');
        
        const message = await bot.telegram.sendAudio(
            STORAGE_CHANNEL_ID,
            { source: fs.createReadStream(tempFilePath) },
            { title: trackName, performer: uploader }
        );

        if (message?.audio?.file_id) {
            await cacheTrack(url, message.audio.file_id, trackName);
            console.log(`‚úÖ [Indexer] –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω: ${trackName}`);
        }
    } catch (err) {
        console.error(`‚ùå [Indexer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${url}:`, err.stderr || err.message);
    } finally {
        if (tempFilePath) await fs.promises.unlink(tempFilePath).catch(() => {});
    }
}

async function startIndexer() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞...');
    await new Promise(resolve => setTimeout(resolve, 60 * 1000));
    while (true) {
        try {
            if (downloadQueue.active > 0) {
                console.log('[Indexer] –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –ø–∞—É–∑–∞ 2 –º–∏–Ω.');
                await new Promise(resolve => setTimeout(resolve, 2 * 60 * 1000));
                continue;
            }

            const urls = await getUrlsToIndexForIndexer();
            if (urls.length > 0) {
                console.log(`[Indexer] –ù–∞–π–¥–µ–Ω–æ ${urls.length} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.`);
                for (const url of urls) {
                    await processUrlForIndexer(url);
                    await new Promise(resolve => setTimeout(resolve, 15 * 1000));
                }
            } else {
                 console.log('[Indexer] –ù–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –Ω–µ—Ç, –ø–∞—É–∑–∞ 10 –º–∏–Ω.');
                 await new Promise(resolve => setTimeout(resolve, 10 * 60 * 1000));
            }
        } catch (err) {
            console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–µ, –ø–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç:", err);
            await new Promise(resolve => setTimeout(resolve, 5 * 60 * 1000));
        }
    }
}

// ================================================================
// ===                  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫                      ===
// ================================================================

async function startApp() {
  try {
    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã
    await loadTexts();

    // 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
    const client = createClient({ url: process.env.REDIS_URL });
    client.on('error', (err) => console.error('üî¥ –û—à–∏–±–∫–∞ Redis:', err));
    await client.connect();
    redisClient = client;
    console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á—ë–Ω');

    // 3. –°–æ–∑–¥–∞–µ–º –∫—ç—à-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);
    
    // 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∫—É
    setupAdmin({ app, bot, __dirname, ADMIN_ID, ADMIN_LOGIN, ADMIN_PASSWORD, SESSION_SECRET, redis: redisClient });

    // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    setupTelegramBot();

    // 6. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–æ–≤—ã–µ –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    setInterval(() => resetDailyStats(), 24 * 3600 * 1000);
    setInterval(() => console.log(`[Monitor] –û—á–µ—Ä–µ–¥—å: ${downloadQueue.size} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, ${downloadQueue.active} –≤ —Ä–∞–±–æ—Ç–µ.`), 60 * 1000);
    setInterval(() => cleanupCache(cacheDir, 60), 30 * 60 * 1000);
    startIndexer().catch(err => console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–µ:", err));
    startNotifier().catch(err => console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:", err));

    // 7. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    if (NODE_ENV === 'production') {
      const webhookUrl = `${WEBHOOK_URL.replace(/\/$/, '')}${WEBHOOK_PATH}`;
      app.use(await bot.createWebhook({ domain: WEBHOOK_URL, path: WEBHOOK_PATH }));
      app.listen(PORT, () => console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}. –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`));
    } else {
      await bot.telegram.deleteWebhook({ drop_pending_updates: true });
      bot.launch();
      console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long-polling.');
    }
  } catch (err) {
    console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', err);
    process.exit(1);
  }
}

function setupTelegramBot() {
    const handleSendMessageError = async (error, userId) => {
        if (error.response?.error_code === 403) {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –û—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ.`);
            await updateUserField(userId, 'active', false);
        } else {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª—è ${userId}:`, error.response?.description || error.message);
        }
    };

    const isSubscribed = async (userId, channelUsername) => {
        try {
            const chatMember = await bot.telegram.getChatMember(channelUsername, userId);
            return ['creator', 'administrator', 'member'].includes(chatMember.status);
        } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${userId} –Ω–∞ ${channelUsername}:`, e.message);
            return false;
        }
    };
    
    function formatMenuMessage(user, ctx) {
        const tariffLabel = getTariffName(user.premium_limit);
        const downloadsToday = user.downloads_today || 0;
        const refLink = `https://t.me/${ctx.botInfo.username}?start=${user.id}`;
        const daysLeft = getDaysLeft(user.premium_until);
        
        let message = `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name || user.username || '–¥—Ä—É–≥'}!

üì• –ë–æ—Ç –∫–∞—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å SoundCloud –≤ MP3 ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É.

üì£ –ù–æ–≤–æ—Å—Ç–∏, —Ñ–∏—à–∫–∏ –∏ –±–æ–Ω—É—Å—ã: @SCM_BLOG

üíº –¢–∞—Ä–∏—Ñ: ${tariffLabel}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft > 999 ? '‚àû' : daysLeft}
üéß –°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ: ${downloadsToday} –∏–∑ ${user.premium_limit}

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
${refLink}
        `.trim();
        
        if (!user.subscribed_bonus_used) {
            message += `\n\nüéÅ –ë–æ–Ω—É—Å! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @SCM_BLOG –∏ –ø–æ–ª—É—á–∏ 7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus –±–µ—Å–ø–ª–∞—Ç–Ω–æ.`;
        }
        
        return message;
    }

    const getBonusKeyboard = (user) => {
        const keyboard = [];
        if (!user.subscribed_bonus_used) {
            keyboard.push([{ text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!', callback_data: 'check_subscription' }]);
        }
        return Markup.inlineKeyboard(keyboard);
    };

    bot.use(async (ctx, next) => {
        const userId = ctx.from?.id;
        if (!userId) return next();
        try {
            ctx.state.user = await getUser(userId, ctx.from.first_name, ctx.from.username);
        } catch (error) { 
            console.error(`–û—à–∏–±–∫–∞ –≤ –º–∏–¥–ª–≤–∞—Ä–µ –¥–ª—è userId ${userId}:`, error); 
        }
        return next();
    });

    bot.action('check_subscription', async (ctx) => {
        try {
            const user = ctx.state.user || await getUser(ctx.from.id);
            if (user.subscribed_bonus_used) {
                return await ctx.answerCbQuery('–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —ç—Ç–æ—Ç –±–æ–Ω—É—Å. –°–ø–∞—Å–∏–±–æ!', { show_alert: true });
            }
            const channel = '@SCM_BLOG';
            if (await isSubscribed(ctx.from.id, channel)) {
                await setPremium(ctx.from.id, 30, 7);
                await updateUserField(ctx.from.id, 'subscribed_bonus_used', true);
                
                await ctx.editMessageText('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: 7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus. –ù–∞–∂–º–∏—Ç–µ /menu, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç—É—Å.');
            } else {
                await ctx.answerCbQuery('–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.', { show_alert: true });
                await ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${channel}, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/SCM_BLOG' }],
                            [{ text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!', callback_data: 'check_subscription' }]
                        ]
                    }
                });
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –≤ check_subscription:', e);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
        }
    });

    bot.start(async (ctx) => {
        try {
            const user = ctx.state.user || await getUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
            const textMsg = formatMenuMessage(user, ctx);
            await ctx.reply(textMsg, getBonusKeyboard(user));
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', kb());
        } catch (e) { await handleSendMessageError(e, ctx.from.id); }
    });

    bot.hears(T('menu'), async (ctx) => {
        try {
            const user = ctx.state.user || await getUser(ctx.from.id);
            const textMsg = formatMenuMessage(user, ctx);
            await ctx.reply(textMsg, getBonusKeyboard(user));
        } catch (e) { await handleSendMessageError(e, ctx.from.id); }
    });
    
    bot.hears(T('mytracks'), async (ctx) => {
        try {
            const user = ctx.state.user || await getUser(ctx.from.id);
            let tracks = [];
            if (Array.isArray(user.tracks_today)) tracks = user.tracks_today;
            else if (typeof user.tracks_today === 'string') {
                try { tracks = JSON.parse(user.tracks_today); } catch { tracks = []; }
            }
            const validTracks = (tracks || []).filter(t => t && t.fileId);
            if (!validTracks.length) {
                return await ctx.reply(T('noTracks'));
            }
            for (let i = 0; i < validTracks.length; i += 5) {
                const chunk = validTracks.slice(i, i + 5);
                await ctx.replyWithMediaGroup(chunk.map(track => ({ type: 'audio', media: track.fileId, title: track.title })));
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤ /mytracks:', err);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤.');
        }
    });

    bot.hears(T('help'), (ctx) => ctx.reply(T('helpInfo'), kb()));
    bot.hears(T('upgrade'), (ctx) => ctx.reply(T('upgradeInfo'), { parse_mode: 'Markdown' }));

    bot.command('admin', async (ctx) => {
        if (ctx.from.id.toString() !== ADMIN_ID.toString()) return;
        try {
            const stats = await getDashboardStats();
            const dashboardUrl = WEBHOOK_URL.replace(/\/$/, '');
            const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞</b>
üë§ –í—Å–µ–≥–æ: <i>${stats.totalUsers}</i> | –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <i>${stats.activeToday}</i>
üì• –ó–∞–≥—Ä—É–∑–æ–∫: <i>${stats.totalDownloads}</i>
‚öôÔ∏è –û—á–µ—Ä–µ–¥—å: <i>${downloadQueue.active} / ${downloadQueue.size}</i>
üîó <a href="${dashboardUrl}/dashboard">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</a>`;
            await ctx.replyWithHTML(message.trim());
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /admin:', e);
        }
    });

    bot.on('text', async (ctx) => {
        const commandTexts = Object.values(T());
        if (commandTexts.includes(ctx.message.text)) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã

        try {
            const url = extractUrl(ctx.message.text);
            if (url) {
                await enqueue(ctx, ctx.from.id, url);
            } else {
                await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç SoundCloud.');
            }
        } catch (e) {
            await handleSendMessageError(e, ctx.from.id);
        }
    });
}

// ===== –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ =====
const stopBot = (signal) => {
    console.log(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
    if (bot.polling?.isRunning()) {
        bot.stop(signal);
    }
    setTimeout(() => process.exit(0), 500);
};

process.once('SIGINT', () => stopBot('SIGINT'));
process.once('SIGTERM', () => stopBot('SIGTERM'));

startApp();

export { bot };