// index.js

// Core
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Middleware
import compression from 'compression';
import express from 'express';
import session from 'express-session';
import multer from 'multer';
import expressLayouts from 'express-ejs-layouts';

// Telegram
import { Telegraf, Markup } from 'telegraf';

// Storage
import { createClient } from 'redis';
import pgSessionFactory from 'connect-pg-simple';

// Utils
import json2csv from 'json-2-csv';
import ytdl from 'youtube-dl-exec';

// Database logic
import {
  pool,
  supabase,
  getFunnelData,
  getUser,
  updateUserField,
  setPremium,
  getAllUsers,
  resetDailyStats,
  addReview,
  saveTrackForUser,
  hasLeftReview,
  getLatestReviews,
  resetDailyLimitIfNeeded,
  getRegistrationsByDate,
  getDownloadsByDate,
  getActiveUsersByDate,
  getExpiringUsers,
  getReferralSourcesStats,
  markSubscribedBonusUsed,
  getUserActivityByDayHour,
  getLastMonths,
  logUserActivity,
  getUserById,
  getExpiringUsersCount,
  getExpiringUsersPaginated,
  cacheTrack,
  findCachedTracksByUrls,
  findUsersToNotify,
  markAsNotified,
  getDashboardStats,
  findCachedTrack,
  logEvent
} from './db.js';
import { enqueue, downloadQueue } from './services/downloadManager.js';
import { initNotifier, startNotifier } from './services/notifier.js';

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = Number(process.env.ADMIN_ID);
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const WEBHOOK_PATH = '/telegram';
const PORT = process.env.PORT ?? 3000;
const SESSION_SECRET = process.env.SESSION_SECRET || 'a-very-secret-key-for-session';
const ADMIN_LOGIN = process.env.ADMIN_LOGIN;
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD;
const STORAGE_CHANNEL_ID = process.env.STORAGE_CHANNEL_ID;

if (!BOT_TOKEN || !ADMIN_ID || !ADMIN_LOGIN || !ADMIN_PASSWORD || !WEBHOOK_URL || !STORAGE_CHANNEL_ID) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
initNotifier(bot);
const app = express();
const upload = multer({ dest: 'uploads/' });
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const cacheDir = path.join(__dirname, 'cache');
let redisClient = null;

export function getRedisClient() {
    if (!redisClient) throw new Error('Redis –∫–ª–∏–µ–Ω—Ç –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return redisClient;
}

async function cleanupCache(directory, maxAgeMinutes = 60) {
    try {
        const now = Date.now();
        const files = await fs.promises.readdir(directory);
        let cleanedCount = 0;
        for (const file of files) {
            try {
                const filePath = path.join(directory, file);
                const stat = await fs.promises.stat(filePath);
                if ((now - stat.mtimeMs) / 60000 > maxAgeMinutes) {
                    await fs.promises.unlink(filePath);
                    cleanedCount++;
                }
            } catch (fileError) {}
        }
        if (cleanedCount > 0) console.log(`[Cache Cleanup] –£–¥–∞–ª–µ–Ω–æ ${cleanedCount} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤.`);
    } catch (dirError) {
        if (dirError.code !== 'ENOENT') {
            console.error('[Cache Cleanup] –û—à–∏–±–∫–∞:', dirError);
        }
    }
}

// index.js

export const texts = {
    start: 'üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç —Å SoundCloud.',
    menu: 'üìã –ú–µ–Ω—é',
    upgrade: 'üîì –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç',
    mytracks: 'üéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏',
    help: '‚ÑπÔ∏è –ü–æ–º–æ—â—å',
    error: '‚ùå –û—à–∏–±–∫–∞',
    noTracks: '–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.',
    limitReached: `üö´ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚ùå\n\nüí° –ß—Ç–æ–±—ã –∫–∞—á–∞—Ç—å –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ Plus –∏–ª–∏ –≤—ã—à–µ –∏ –∫–∞—á–∞–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.`,
    // <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–π Markdown >>>
    upgradeInfo: `üöÄ *–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã!*\n\n` +
        `üí° –ü–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –ø–æ–ª—É—á–∞—é—Ç *–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏* –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏.\n\n` +
        `üÜì *Free* ‚Äî 5 —Ç—Ä–µ–∫–æ–≤/–¥–µ–Ω—å\n` +
        `üéØ *Plus* ‚Äî 30 —Ç—Ä–µ–∫–æ–≤/–¥–µ–Ω—å ‚Äî *119‚ÇΩ/–º–µ—Å.*\n` +
        `üí™ *Pro* ‚Äî 100 —Ç—Ä–µ–∫–æ–≤/–¥–µ–Ω—å, –ø–æ–ª–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã ‚Äî *199‚ÇΩ/–º–µ—Å.*\n` +
        `üíé *Unlimited* ‚Äî –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ ‚Äî *299‚ÇΩ/–º–µ—Å.*\n\n` +
        `üëâ [–î–ª—è –ø–æ–∫—É–ø–∫–∏](https://boosty.to/anatoly_bone/donate)\n` + // –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ Markdown
        `‚úâÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫: @anatolybone\n\n` +
        `üì£ –ù–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–∏—à–∫–∏: @SCM_BLOG`,
    helpInfo: `‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∏—à—å mp3.  \nüîì –†–∞—Å—à–∏—Ä–∏—Ç—å ‚Äî –æ–ø–ª–∞—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏.  \nüéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.  \nüìã –ú–µ–Ω—é ‚Äî —Ç–∞—Ä–∏—Ñ, –ª–∏–º–∏—Ç—ã, —Ä–µ—Ñ–µ—Ä–∞–ª—ã.  \nüì£ –ö–∞–Ω–∞–ª: @SCM_BLOG`,
};

const kb = () => Markup.keyboard([[texts.menu, texts.upgrade], [texts.mytracks, texts.help]]).resize();

function getTariffName(limit) {
    if (limit >= 1000) return 'Unlimited (‚àû/–¥–µ–Ω—å)';
    if (limit === 100) return 'Pro (100/–¥–µ–Ω—å)';
    if (limit === 30) return 'Plus (30/–¥–µ–Ω—å)';
    return 'Free (5/–¥–µ–Ω—å)';
}

function getDaysLeft(premiumUntil) {
    if (!premiumUntil) return 0;
    const diff = new Date(premiumUntil) - new Date();
    return Math.max(Math.ceil(diff / 86400000), 0);
}

async function getUrlsToIndex() {
    try {
        const { rows } = await pool.query(`
            SELECT url, COUNT(url) as download_count
            FROM downloads_log
            WHERE url IS NOT NULL AND url LIKE '%soundcloud.com%' AND url NOT IN (SELECT url FROM track_cache)
            GROUP BY url
            ORDER BY download_count DESC
            LIMIT 10;
        `);
        return rows.map(row => row.url);
    } catch (e) {
        console.error('[Indexer] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:', e);
        return [];
    }
}

// index.js

async function processUrlForIndexing(url) {
    let tempFilePath = null;
    try {
        const isCached = await findCachedTrack(url);
        if (isCached) {
            console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: ${url} —É–∂–µ –≤ –∫—ç—à–µ.`);
            return; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, –µ—Å–ª–∏ —É–∂–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ
        }

        console.log(`[Indexer] –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é: ${url}`);
        const info = await ytdl(url, { dumpSingleJson: true });

        // <<< –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç >>>
        if (!info || info._type === 'playlist') {
            console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: ${url} —è–≤–ª—è–µ—Ç—Å—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º.`);
            return; // –Ø–≤–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã
        }
        // <<< –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø >>>

        const trackName = (info.title || 'track').slice(0, 100);
        const uploader = info.uploader || 'SoundCloud';
        tempFilePath = path.join(cacheDir, `indexer_${info.id || Date.now()}.mp3`);
        
        await ytdl(url, {
            output: tempFilePath,
            extractAudio: true,
            audioFormat: 'mp3',
            embedMetadata: true,
            postprocessorArgs: `-metadata artist="${uploader}" -metadata title="${trackName}"`
        });

        if (!fs.existsSync(tempFilePath)) throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω');
        
        const message = await bot.telegram.sendAudio(
            STORAGE_CHANNEL_ID,
            { source: fs.createReadStream(tempFilePath) },
            { title: trackName, performer: uploader }
        );

        if (message?.audio?.file_id) {
            await cacheTrack(url, message.audio.file_id, trackName);
            console.log(`‚úÖ [Indexer] –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω: ${trackName}`);
        }
    } catch (err) {
        console.error(`‚ùå [Indexer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${url}:`, err.stderr || err.message);
    } finally {
        if (tempFilePath && fs.existsSync(tempFilePath)) {
            await fs.promises.unlink(tempFilePath).catch(() => {});
        }
    }
}
async function startIndexer() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞...');
    await new Promise(resolve => setTimeout(resolve, 60 * 1000));
    while (true) {
        try {
            const urls = await getUrlsToIndex();
            if (urls.length > 0) {
                console.log(`[Indexer] –ù–∞–π–¥–µ–Ω–æ ${urls.length} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —É–ø—Ä–µ–∂–¥–∞—é—â–µ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.`);
                for (const url of urls) {
                    await processUrlForIndexing(url);
                    await new Promise(resolve => setTimeout(resolve, 30 * 1000));
                }
            }
            console.log('[Indexer] –ü–∞—É–∑–∞ –Ω–∞ 1 —á–∞—Å.');
            await new Promise(resolve => setTimeout(resolve, 60 * 60 * 1000));
        } catch (err) {
            console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç:", err);
            await new Promise(resolve => setTimeout(resolve, 5 * 60 * 1000));
        }
    }
}

async function startApp() {
    try {
        const client = createClient({ url: process.env.REDIS_URL, socket: { connectTimeout: 10000 } });
        client.on('error', (err) => console.error('üî¥ –û—à–∏–±–∫–∞ Redis:', err));
        await client.connect();
        redisClient = client;
        console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á—ë–Ω');
        if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

        setupExpress();
        setupTelegramBot();
        
        setInterval(() => resetDailyStats(), 24 * 3600 * 1000);
        setInterval(() => console.log(`[Monitor] –û—á–µ—Ä–µ–¥—å: ${downloadQueue.size} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, ${downloadQueue.active} –≤ —Ä–∞–±–æ—Ç–µ.`), 60 * 1000);
        setInterval(() => cleanupCache(cacheDir, 60), 30 * 60 * 1000);
        cleanupCache(cacheDir, 60);

        if (process.env.NODE_ENV === 'production') {
            app.use(await bot.createWebhook({ domain: WEBHOOK_URL, path: WEBHOOK_PATH }));
            app.listen(PORT, () => console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}.`));
        } else {
            await bot.launch();
            console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long-polling.');
        }

        startIndexer().catch(err => console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å:", err));
        startNotifier().catch(err => console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:", err));

    } catch (err) {
        console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', err);
        process.exit(1);
    }
}

function setupExpress() {
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    function convertObjToArray(dataObj) {
        if (!dataObj) return [];
        return Object.entries(dataObj).map(([date, count]) => ({ date, count }));
    }

    function filterStatsByPeriod(data, period) {
        if (!Array.isArray(data)) return [];
        const now = new Date();
        if (!isNaN(period)) {
            const days = parseInt(period);
            const cutoff = new Date(now.getTime() - days * 86400000);
            return data.filter(item => new Date(item.date) >= cutoff);
        }
        if (/^\d{4}-\d{2}$/.test(period)) {
            return data.filter(item => item.date && item.date.startsWith(period));
        }
        return data;
    }

    function prepareChartData(registrations, downloads, active) {
        const dateSet = new Set([...registrations.map(r => r.date), ...downloads.map(d => d.date), ...active.map(a => a.date)]);
        const dates = Array.from(dateSet).sort();
        const regMap = new Map(registrations.map(r => [r.date, r.count]));
        const dlMap = new Map(downloads.map(d => [d.date, d.count]));
        const actMap = new Map(active.map(a => [a.date, a.count]));
        return {
            labels: dates,
            datasets: [
                { label: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', data: dates.map(d => regMap.get(d) || 0), borderColor: 'rgba(75, 192, 192, 1)', fill: false },
                { label: '–ó–∞–≥—Ä—É–∑–∫–∏', data: dates.map(d => dlMap.get(d) || 0), borderColor: 'rgba(255, 99, 132, 1)', fill: false },
                { label: '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', data: dates.map(d => actMap.get(d) || 0), borderColor: 'rgba(54, 162, 235, 1)', fill: false }
            ]
        };
    }

    function computeActivityByHour(activityByDayHour) {
        const hours = Array(24).fill(0);
        for (const day in activityByDayHour) {
            const hoursData = activityByDayHour[day];
            if(hoursData) {
                for (let h = 0; h < 24; h++) {
                    hours[h] += hoursData[h] || 0;
                }
            }
        }
        return hours;
    }

    function computeActivityByWeekday(activityByDayHour) {
        const weekdays = Array(7).fill(0);
        for (const dayStr in activityByDayHour) {
            const dayTotal = Object.values(activityByDayHour[dayStr] || {}).reduce((a, b) => a + b, 0);
            weekdays[new Date(dayStr).getDay()] += dayTotal;
        }
        return weekdays;
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Express
    app.use(compression());
    app.use(express.urlencoded({ extended: true }));
    app.use(express.json());
    app.use(expressLayouts);
    app.set('view engine', 'ejs');
    app.set('views', path.join(__dirname, 'views'));
    app.set('layout', 'layout');
    
    const pgSession = pgSessionFactory(session);
    app.use(session({
        store: new pgSession({ pool, tableName: 'session', createTableIfMissing: true }),
        secret: SESSION_SECRET,
        resave: false,
        saveUninitialized: false,
        cookie: { maxAge: 30 * 24 * 60 * 60 * 1000 }
    }));

    app.use(async (req, res, next) => {
        res.locals.user = null;
        res.locals.page = '';
        if (req.session.authenticated && req.session.userId === ADMIN_ID) {
            try {
                req.user = await getUserById(req.session.userId);
                res.locals.user = req.user;
            } catch(e) { console.error(e); }
        }
        next();
    });

    const requireAuth = (req, res, next) => {
        if (req.session.authenticated && req.session.userId === ADMIN_ID) return next();
        res.redirect('/admin');
    };
    
    // –ú–∞—Ä—à—Ä—É—Ç—ã
    app.get('/health', (req, res) => res.send('OK'));
    
    app.get('/admin', (req, res) => {
        if (req.session.authenticated && req.session.userId === ADMIN_ID) return res.redirect('/dashboard');
        res.render('login', { title: '–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É', error: null, layout: false });
    });

    app.post('/admin', (req, res) => {
        const { username, password } = req.body;
        if (username === ADMIN_LOGIN && password === ADMIN_PASSWORD) {
            req.session.authenticated = true;
            req.session.userId = ADMIN_ID;
            res.redirect('/dashboard');
        } else {
            res.render('login', { title: '–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É', error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', layout: false });
        }
    });

    // <<< –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –ú–ê–†–®–†–£–¢–ê /dashboard >>>
    app.get('/dashboard', requireAuth, async (req, res, next) => {
        try {
            const { period = '30', showInactive = 'false', expiringLimit = '10', expiringOffset = '0' } = req.query;

            // –®–ê–ì 1: –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [
                stats,
                downloadsByDateRaw, 
                registrationsByDateRaw, 
                activeByDateRaw, 
                activityByDayHour,
                expiringSoon,
                expiringCount,
                referralStats,
                funnelCounts,
                lastMonths,
                users
            ] = await Promise.all([
                getDashboardStats(),
                getDownloadsByDate(), 
                getRegistrationsByDate(), 
                getActiveUsersByDate(),
                getUserActivityByDayHour(),
                getExpiringUsersPaginated(parseInt(expiringLimit), parseInt(expiringOffset)),
                getExpiringUsersCount(),
                getReferralSourcesStats(),
                getFunnelData(new Date('2000-01-01').toISOString(), new Date().toISOString()),
                getLastMonths(6),
                getAllUsers(showInactive === 'true')
            ]);

            // –®–ê–ì 2: –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            const filteredRegistrations = filterStatsByPeriod(convertObjToArray(registrationsByDateRaw), period);
            const filteredDownloads = filterStatsByPeriod(convertObjToArray(downloadsByDateRaw), period);
            const filteredActive = filterStatsByPeriod(convertObjToArray(activeByDateRaw), period);

            const chartDataCombined = prepareChartData(filteredRegistrations, filteredDownloads, filteredActive);
            const chartDataHourActivity = {
                labels: [...Array(24).keys()].map(h => `${h}:00`),
                datasets: [{ label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º', data: computeActivityByHour(activityByDayHour), backgroundColor: 'rgba(54, 162, 235, 0.7)' }]
            };
            const chartDataWeekdayActivity = {
                labels: ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'],
                datasets: [{ label: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', data: computeActivityByWeekday(activityByDayHour), backgroundColor: 'rgba(255, 206, 86, 0.7)' }]
            };

            // –®–ê–ì 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –≤ —à–∞–±–ª–æ–Ω
            res.render('dashboard', {
                title: '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                page: 'dashboard',
                user: req.user,
                period,
                showInactive: showInactive === 'true',
                stats,
                users,
                expiringSoon,
                expiringCount,
                referralStats,
                funnelData: funnelCounts,
                lastMonths,
                expiringLimit: parseInt(expiringLimit),
                expiringOffset: parseInt(expiringOffset),
                chartDataCombined,
                chartDataHourActivity,
                chartDataWeekdayActivity
            });
        } catch (e) {
            next(e);
        }
    });

    app.get('/user/:id', requireAuth, async (req, res, next) => {
        try {
            const userId = parseInt(req.params.id);
            if (isNaN(userId)) return res.status(400).send('–ù–µ–≤–µ—Ä–Ω—ã–π ID');
            const user = await getUserById(userId);
            if (!user) return res.status(404).send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            const [downloadsResult, referralsResult] = await Promise.all([
                supabase.from('events').select('*').eq('user_id', userId).eq('event_type', 'download_start').order('created_at', { ascending: false }).limit(100),
                pool.query('SELECT id, first_name, username, created_at FROM users WHERE referrer_id = $1', [userId])
            ]);
            res.render('user-profile', {
                title: `–ü—Ä–æ—Ñ–∏–ª—å: ${user.first_name || user.username}`,
                user,
                downloads: downloadsResult.data || [],
                referrals: referralsResult.rows,
                page: 'user-profile'
            });
        } catch (e) {
            next(e);
        }
    });

    app.get('/logout', (req, res) => { req.session.destroy(() => res.redirect('/admin')); });

    app.get('/broadcast', requireAuth, (req, res) => { res.render('broadcast-form', { title: '–†–∞—Å—Å—ã–ª–∫–∞', error: null, success: null, page: 'broadcast' }); });

    app.post('/broadcast', requireAuth, upload.single('audio'), async (req, res, next) => {
        try {
            const { message } = req.body;
            const audio = req.file;
            if (!message && !audio) {
                return res.status(400).render('broadcast-form', { title: '–†–∞—Å—Å—ã–ª–∫–∞', error: '–¢–µ–∫—Å—Ç –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', success: null, page: 'broadcast' });
            }
            const users = await getAllUsers(false);
            let successCount = 0, errorCount = 0;
            for (const user of users) {
                try {
                    if (audio) {
                        await bot.telegram.sendAudio(user.id, { source: fs.createReadStream(audio.path) }, { caption: message });
                    } else {
                        await bot.telegram.sendMessage(user.id, message);
                    }
                    successCount++;
                } catch (e) {
                    errorCount++;
                    if (e.response?.error_code === 403) await updateUserField(user.id, 'active', false);
                }
                await new Promise(r => setTimeout(r, 100));
            }
            if (audio) fs.unlinkSync(audio.path);
            try {
                await bot.telegram.sendMessage(ADMIN_ID, `üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
            } catch (adminError) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É:', adminError.message);
            }
            res.render('broadcast-form', { title: '–†–∞—Å—Å—ã–ª–∫–∞', success: `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount} —Å–æ–æ–±—â–µ–Ω–∏–π.`, error: `–û—à–∏–±–æ–∫: ${errorCount}.`, page: 'broadcast' });
        } catch (e) {
            next(e);
        }
    });
    
    app.get('/export', requireAuth, async (req, res, next) => {
        try {
            const users = await getAllUsers(true);
            const csv = await json2csv.json2csv(users, {});
            res.header('Content-Type', 'text/csv');
            res.attachment('users.csv');
            return res.send(csv);
        } catch (e) {
            next(e);
        }
    });

    app.get('/expiring-users', requireAuth, async (req, res, next) => {
        try {
            const page = parseInt(req.query.page) || 1;
            const perPage = 10;
            const total = await getExpiringUsersCount();
            const users = await getExpiringUsersPaginated(perPage, (page - 1) * perPage);
            res.render('expiring-users', { users, page, totalPages: Math.ceil(total / perPage), title: '–ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏', page: 'expiring-users' });
        } catch (e) {
            next(e);
        }
    });
    
    app.post('/set-tariff', requireAuth, async (req, res, next) => {
        try {
            const { userId, limit, days } = req.body;
            const parsedLimit = parseInt(limit);
            const parsedDays = parseInt(days) || 30;
            
            await setPremium(userId, parsedLimit, parsedDays);
            
            const tariffName = getTariffName(parsedLimit);
            const message = `üéâ –í–∞—à —Ç–∞—Ä–∏—Ñ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω!\n\n` +
                `‚ú® –ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: **${tariffName}**\n` +
                `‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: **${parsedDays} –¥–Ω–µ–π**\n\n` +
                `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!`;
            
            try {
                await bot.telegram.sendMessage(userId, message, { parse_mode: 'Markdown' });
                console.log(`[Admin] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
            } catch (telegramError) {
                console.error(`[Admin] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, telegramError.message);
            }
            
            res.redirect(req.get('referer') || '/dashboard');
        } catch (e) {
            next(e);
        }
    });

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.use((err, req, res, next) => {
        console.error('üî¥ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
        const statusCode = err.status || 500;
        const message = err.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
        res.status(statusCode);
        if (req.originalUrl.startsWith('/api/')) {
            return res.json({ error: message });
        }
        // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ 'errors.ejs'
        res.render('errors', {
            title: `–û—à–∏–±–∫–∞ ${statusCode}`,
            message,
            statusCode,
            error: err,
            page: 'error',
            layout: 'layout' 
        });
    });
}

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegraf ---
// index.js

// index.js

function setupTelegramBot() {
    const handleSendMessageError = async (error, userId) => {
        if (error.response?.error_code === 403) {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –û—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ.`);
            await updateUserField(userId, 'active', false);
        } else {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${userId}:`, error.message);
        }
    };

    const extractUrl = (text = '') => {
        const regex = /(https?:\/\/[^\s]+)/g;
        const matches = text.match(regex);
        return matches ? matches.find(url => url.includes('soundcloud.com')) : null;
    };

    const isSubscribed = async (userId, channelUsername) => {
        try {
            const chatMember = await bot.telegram.getChatMember(channelUsername, userId);
            return ['creator', 'administrator', 'member'].includes(chatMember.status);
        } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user ${userId} –Ω–∞ –∫–∞–Ω–∞–ª ${channelUsername}:`, e.message);
            return false;
        }
    };

    function formatMenuMessage(user, ctx) {
        const tariffLabel = getTariffName(user.premium_limit);
        const downloadsToday = user.downloads_today || 0;
        const refLink = `https://t.me/${ctx.botInfo.username}?start=${user.id}`;
        const daysLeft = getDaysLeft(user.premium_until);
        
        let message = `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!

üì• –ë–æ—Ç –∫–∞—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å SoundCloud –≤ MP3. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É.

üì£ –ù–æ–≤–æ—Å—Ç–∏, —Ñ–∏—à–∫–∏ –∏ –±–æ–Ω—É—Å—ã –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ üëâ @SCM_BLOG

üíº –¢–∞—Ä–∏—Ñ: *${tariffLabel}*
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: *${daysLeft > 999 ? '‚àû' : daysLeft}*

üéß –°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ: *${downloadsToday}* –∏–∑ *${user.premium_limit}*

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):
\`${refLink}\`
        `.trim();
        
        if (!user.subscribed_bonus_used) {
            message += `\n\nüéÅ *–ë–æ–Ω—É—Å!*\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª @SCM_BLOG –∏ –ø–æ–ª—É—á–∏ *7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus* –±–µ—Å–ø–ª–∞—Ç–Ω–æ!`;
        }
        
        return message;
    }

    bot.use(async (ctx, next) => {
        const userId = ctx.from?.id;
        if (!userId) return next();
        try {
            ctx.state.user = await getUser(userId, ctx.from.first_name, ctx.from.username);
        } catch (error) { 
            console.error(`–û—à–∏–±–∫–∞ –≤ –º–∏–¥–ª–≤–∞—Ä–µ –¥–ª—è userId ${userId}:`, error); 
        }
        return next();
    });

    const getBonusKeyboard = (user) => {
        const keyboard = [];
        if (!user.subscribed_bonus_used) {
            keyboard.push([{ text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!', callback_data: 'check_subscription' }]);
        }
        return { inline_keyboard: keyboard };
    };

    bot.action('check_subscription', async (ctx) => {
        try {
            const user = ctx.state.user || await getUser(ctx.from.id);
            if (user.subscribed_bonus_used) {
                return await ctx.answerCbQuery('–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —ç—Ç–æ—Ç –±–æ–Ω—É—Å. –°–ø–∞—Å–∏–±–æ!', { show_alert: true });
            }
            const channel = '@SCM_BLOG';
            if (await isSubscribed(ctx.from.id, channel)) {
                await setPremium(ctx.from.id, 30, 7);
                await updateUserField(ctx.from.id, 'subscribed_bonus_used', true);
                
                await ctx.editMessageText(
                    'üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. ' +
                    '–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: *7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus*.\n\n' +
                    '–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –Ω–∞–∂–º–∏—Ç–µ /menu.',
                    { parse_mode: 'Markdown' }
                );
            } else {
                await ctx.answerCbQuery('–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.', { show_alert: true });
                await ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${channel}, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑.`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/SCM_BLOG' }],
                            [{ text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!', callback_data: 'check_subscription' }]
                        ]
                    }
                });
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ check_subscription:', e);
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
        }
    });
    
    bot.start(async (ctx) => {
        try {
            const user = ctx.state.user || await getUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
            const messageText = formatMenuMessage(user, ctx);
            await ctx.reply(messageText, { parse_mode: 'Markdown', reply_markup: getBonusKeyboard(user) });
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', kb());
        } catch (e) {
            await handleSendMessageError(e, ctx.from.id);
        }
    });
    
    bot.hears(texts.menu, async (ctx) => {
        try {
            const user = ctx.state.user || await getUser(ctx.from.id);
            const messageText = formatMenuMessage(user, ctx);
            await ctx.reply(messageText, { parse_mode: 'Markdown', reply_markup: getBonusKeyboard(user) });
        } catch (e) {
            await handleSendMessageError(e, ctx.from.id);
        }
    });

    bot.hears(texts.mytracks, async (ctx) => {
        try {
            const user = ctx.state.user || await getUser(ctx.from.id);
            let tracks = [];
            if (Array.isArray(user.tracks_today)) {
                tracks = user.tracks_today;
            } else if (typeof user.tracks_today === 'string') {
                try { tracks = JSON.parse(user.tracks_today); } catch (e) { tracks = []; }
            }
            const validTracks = tracks.filter(t => t && t.fileId);
            if (!validTracks.length) {
                return await ctx.reply(texts.noTracks || '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.');
            }
            for (let i = 0; i < validTracks.length; i += 5) {
                const chunk = validTracks.slice(i, i + 5);
                await ctx.replyWithMediaGroup(chunk.map(track => ({ type: 'audio', media: track.fileId, title: track.title })));
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤ /mytracks:', err);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤.');
        }
    });

    bot.hears(texts.help, async (ctx) => {
        try { await ctx.reply(texts.helpInfo, kb()); } 
        catch (e) { await handleSendMessageError(e, ctx.from.id); }
    });

    bot.hears(texts.upgrade, async (ctx) => {
        try { 
            await ctx.replyWithMarkdown(texts.upgradeInfo, { disable_web_page_preview: true });
        } 
        catch (e) { await handleSendMessageError(e, ctx.from.id); }
    });

    bot.command('admin', async (ctx) => {
        if (ctx.from.id !== ADMIN_ID) return;
        try {
            const users = await getAllUsers(true);
            const totalUsers = users.length;
            const activeUsers = users.filter(u => u.active).length;
            const totalDownloads = users.reduce((sum, u) => sum + (u.total_downloads || 0), 0);
            const now = new Date();
            const activeToday = users.filter(u => u.last_active && new Date(u.last_active).toDateString() === now.toDateString()).length;
            
            const dashboardUrl = `${WEBHOOK_URL.replace(/\/$/, '')}/dashboard`;
            
            const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
   - –í—Å–µ–≥–æ: <i>${totalUsers}</i>
   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å–µ–≥–æ: <i>${activeUsers}</i>
   - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <i>${activeToday}</i>

üì• <b>–ó–∞–≥—Ä—É–∑–∫–∏:</b>
   - –í—Å–µ–≥–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <i>${totalDownloads}</i>

‚öôÔ∏è <b>–û—á–µ—Ä–µ–¥—å —Å–µ–π—á–∞—Å:</b>
   - –í —Ä–∞–±–æ—Ç–µ: <i>${downloadQueue.active}</i>
   - –í –æ–∂–∏–¥–∞–Ω–∏–∏: <i>${downloadQueue.size}</i>

üîó <a href="${dashboardUrl}">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</a>`;
            
            await ctx.replyWithHTML(message.trim());
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin:', e);
            try {
                await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
            } catch {}
        }
    });
        
    bot.on('text', async (ctx) => {
        try {
            const url = extractUrl(ctx.message.text);
            if (url) {
                await enqueue(ctx, ctx.from.id, url);
            } else if (!Object.values(texts).includes(ctx.message.text)) {
                await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç SoundCloud.');
            }
        } catch (e) {
            await handleSendMessageError(e, ctx.from.id);
        }
    });
}
// --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
const stopBot = (signal) => {
    console.log(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
    if (bot.polling?.isRunning()) {
        bot.stop(signal);
    }
    setTimeout(() => process.exit(0), 500);
};

process.once('SIGINT', () => stopBot('SIGINT'));
process.once('SIGTERM', () => stopBot('SIGTERM'));

startApp();

export { app, bot };