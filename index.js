const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const scdl = require('soundcloud-downloader').default;
const ytdl = require('youtube-dl-exec');
const { getUser, updateUserField, incrementDownloads, setPremium, getAllUsers } = require('./db');

const BOT_TOKEN = process.env.BOT_TOKEN;
const DOMAIN = process.env.RENDER_EXTERNAL_URL || 'https://soundcloud-telegram-bot.onrender.com';
const PORT = process.env.PORT || 3000;
const ADMIN_ID = 2018254756;

const bot = new Telegraf(BOT_TOKEN);
const app = express();

const LANG = {
  ru: {
    start: 'üëã –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ SoundCloud, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ mp3 —Ñ–∞–π–ª!',
    menu: 'üìã –ú–µ–Ω—é',
    choose_lang: 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
    limit_reached: '‚õîÔ∏è –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ù–∞–∂–º–∏ "üîì –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç"',
    help: '‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ SoundCloud –∏ –ø–æ–ª—É—á–∏ mp3. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç ‚Äî 10 —Ç—Ä–µ–∫–æ–≤ –≤ –¥–µ–Ω—å.',
    expand: 'üîì –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç',
    my_tracks: 'üé∂ –ú–æ–∏ —Ç—Ä–µ–∫–∏',
  },
  en: {
    start: 'üëã Send me a SoundCloud link and I'll return the mp3 file!',
    menu: 'üìã Menu',
    choose_lang: 'üåê Choose language:',
    limit_reached: '‚õîÔ∏è Daily limit reached. Tap "üîì Upgrade"',
    help: '‚ÑπÔ∏è Send a SoundCloud link and get the mp3 file. Free plan: 10 tracks per day.',
    expand: 'üîì Upgrade',
    my_tracks: 'üé∂ My tracks',
  }
};

bot.start(ctx => {
  const user = getUser(ctx.from.id, ctx.from.username);
  const t = LANG[user.lang || 'ru'];
  ctx.reply(t.start, Markup.keyboard([[t.menu]]).resize());
});

bot.hears(/üìã –ú–µ–Ω—é|üìã Menu/, ctx => {
  const user = getUser(ctx.from.id);
  const t = LANG[user.lang];
  ctx.reply(t.choose_lang, Markup.inlineKeyboard([
    Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru'),
    Markup.button.callback('üá¨üáß English', 'lang_en')
  ]));
});

bot.action(/lang_(ru|en)/, ctx => {
  updateUserField(ctx.from.id, 'lang', ctx.match[1]);
  const t = LANG[ctx.match[1]];
  ctx.editMessageText(t.start);
});

bot.hears(/üîì/, ctx => {
  ctx.reply('üöÄ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤?

üÜì Free ‚Äì 10 üü¢
Plus ‚Äì 50 üéØ (59‚ÇΩ)
Pro ‚Äì 100 üí™ (119‚ÇΩ)
Unlimited ‚Äì üíé (199‚ÇΩ)

–û–ø–ª–∞—Ç–∞: https://boosty.to/anatoly_bone/donate
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏: @AnatolyBone');
});

bot.hears(/‚ÑπÔ∏è Help|‚ÑπÔ∏è –ü–æ–º–æ—â—å/, ctx => {
  const user = getUser(ctx.from.id);
  ctx.reply(LANG[user.lang].help);
});

bot.hears(/üé∂/, ctx => {
  const user = getUser(ctx.from.id);
  const tracks = user.tracks_today?.split(',') || [];
  if (tracks.length === 0) return ctx.reply('–°–µ–≥–æ–¥–Ω—è –≤—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞—á–∏–≤–∞–ª–∏.');
  const batches = [];

  for (let i = 0; i < tracks.length; i += 10) {
    batches.push(tracks.slice(i, i + 10));
  }

  batches.forEach((batch, idx) => {
    ctx.reply(`üéß –¢—Ä–µ–∫–∏ [${idx + 1}]:
` + batch.map(t => `‚Ä¢ ${t}`).join('
'));
  });
});

bot.on('text', async ctx => {
  const url = ctx.message.text;
  if (!url.includes('soundcloud.com') && !url.includes('on.soundcloud.com')) return;

  const user = getUser(ctx.from.id, ctx.from.username);
  const t = LANG[user.lang];

  if (user.downloads_today >= user.premium_limit) {
    return ctx.reply(t.limit_reached);
  }

  try {
    await ctx.reply('üéµ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫...');
    const info = await scdl.getInfo(url);
    const stream = await scdl.download(url);

    await ctx.replyWithAudio({ source: stream, filename: `${info.title}.mp3` });
    incrementDownloads(ctx.from.id, info.title);
  } catch (e) {
    try {
      const output = await ytdl(url, { extractAudio: true, audioFormat: 'mp3', output: '-' });
      await ctx.replyWithAudio({ source: output, filename: 'track.mp3' });
      incrementDownloads(ctx.from.id, 'track.mp3');
    } catch (err) {
      console.error(err);
      ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.');
    }
  }
});

bot.command('admin', ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  const users = getAllUsers();
  const buttons = users.map(u => Markup.button.callback(
    `@${u.username || u.id}: ${u.downloads_today}/${u.premium_limit}`, `choose_${u.id}`
  ));
  ctx.reply('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', Markup.inlineKeyboard(buttons, { columns: 1 }));
});

bot.action(/choose_(\d+)/, ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  const id = ctx.match[1];
  ctx.reply(`–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –¥–ª—è ${id}:`, Markup.inlineKeyboard([
    Markup.button.callback('50 üéØ Plus','plan_'+id+'_50'),
    Markup.button.callback('100 üí™ Pro','plan_'+id+'_100'),
    Markup.button.callback('‚àû Unlimited','plan_'+id+'_1000')
  ]));
});

bot.action(/plan_(\d+)_(\d+)/, ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  const [_, id, val] = ctx.match;
  setPremium(parseInt(id), parseInt(val));
  ctx.answerCbQuery('‚úÖ –¢–∞—Ä–∏—Ñ –ø—Ä–∏–º–µ–Ω—ë–Ω!');
});

bot.telegram.setWebhook(`${DOMAIN}/telegram`);
app.use(bot.webhookCallback('/telegram'));
app.get('/', (req, res) => res.send('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'));
app.listen(PORT, () => console.log('üöÄ Listening on', PORT));