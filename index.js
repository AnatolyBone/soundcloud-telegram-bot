require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const scdl = require('soundcloud-downloader').default;
const fs = require('fs');
const path = require('path');

const token = process.env.BOT_TOKEN;
const clientId = 'vF3vRMFpTgZzqzDzsdgJ7zD4gmZTY4vK';

if (!token) {
  throw new Error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
}

const bot = new TelegramBot(token, { polling: true });

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const url = msg.text?.trim();

  if (!url || !url.includes('soundcloud.com')) {
    return bot.sendMessage(chatId, 'üìé –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç SoundCloud');
  }

  bot.sendMessage(chatId, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫—É...');

  try {
    const info = await scdl.getInfo(url, clientId);

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç
    if (info.kind === 'playlist') {
      const tracks = info.tracks;
      const total = tracks.length;
      bot.sendMessage(chatId, `üéß –ù–∞–π–¥–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç: ${info.title} ‚Äî ${total} —Ç—Ä–µ–∫(–æ–≤).\n–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...`);

      for (let i = 0; i < total; i++) {
        const track = tracks[i];
        const trackUrl = track.permalink_url;
        const stream = await scdl.download(trackUrl, clientId);
        const fileName = `track_${Date.now()}_${i}.mp3`;
        const writeStream = fs.createWriteStream(fileName);

        stream.pipe(writeStream);

        await new Promise((resolve, reject) => {
          writeStream.on('finish', async () => {
            await bot.sendAudio(chatId, fileName, {
              title: track.title,
              performer: track.user?.username || 'SoundCloud',
            });
            fs.unlinkSync(fileName);
            resolve();
          });

          writeStream.on('error', (err) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–∫–∞:', err);
            bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞ ${track.title}`);
            reject(err);
          });
        });
      }

      bot.sendMessage(chatId, '‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');

    } else {
      // –û–¥–∏–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–∫
      const stream = await scdl.download(url, clientId);
      const fileName = `track_${Date.now()}.mp3`;
      const writeStream = fs.createWriteStream(fileName);

      stream.pipe(writeStream);

      writeStream.on('finish', () => {
        bot.sendAudio(chatId, fileName, {
          title: info.title,
          performer: info.user?.username || 'SoundCloud',
        }).then(() => {
          fs.unlinkSync(fileName);
        });
      });

      writeStream.on('error', (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.');
      });
    }

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err.message || err);
    bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è.');
  }
});
