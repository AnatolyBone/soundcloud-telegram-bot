// index.js
const { Telegraf, Markup } = require('telegraf');

const compression = require('compression');
const express = require('express');
const session = require('express-session');
const ejs = require('ejs');
const fs = require('fs');
const path = require('path');
const ytdl = require('youtube-dl-exec');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });
const pgSession = require('connect-pg-simple')(session);
const { Pool } = require('pg');
const { Parser } = require('json2csv');
const playlistTracker = new Map();
const { supabase } = require('./db'); // –∏–ª–∏ –ø—É—Ç—å, –≥–¥–µ —É —Ç–µ–±—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è supabase –∫–ª–∏–µ–Ω—Ç–∞

const {
  createUser,
  getUser,
  updateUserField,
  incrementDownloads,
  setPremium,
  getAllUsers,
  resetDailyStats,
  addReview,
  saveTrackForUser,
  hasLeftReview,
  getLatestReviews,
  resetDailyLimitIfNeeded,
  getRegistrationsByDate,
  getDownloadsByDate,
  getActiveUsersByDate,
  getExpiringUsers,
  getReferralSourcesStats,
  markSubscribedBonusUsed,
  getUserActivityByDayHour,
  logUserActivity
} = require('./db');

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = parseInt(process.env.ADMIN_ID, 10);
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const WEBHOOK_PATH = '/telegram';
const PORT = process.env.PORT || 3000;
if (!BOT_TOKEN || !ADMIN_ID || !process.env.ADMIN_LOGIN || !process.env.ADMIN_PASSWORD) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}
if (isNaN(ADMIN_ID)) {
  console.error('‚ùå ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
const app = express();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const cacheDir = path.join(__dirname, 'cache');
if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

// –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
setInterval(() => {
  const cutoff = Date.now() - 7 * 86400 * 1000;
  fs.readdir(cacheDir, (err, files) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞:', err);
      return;
    }
    files.forEach(file => {
      const filePath = path.join(cacheDir, file);
      fs.stat(filePath, (err, stats) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ stat —Ñ–∞–π–ª–∞:', err);
          return;
        }
        if (stats.mtimeMs < cutoff) {
          fs.unlink(filePath, err => {
            if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–µ—à–∞:', err);
            else console.log(`üóë –£–¥–∞–ª—ë–Ω –∫–µ—à: ${file}`);
          });
        }
      });
    });
  });
}, 3600 * 1000);

// –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
setInterval(() => resetDailyStats(), 24 * 3600 * 1000);

const MAX_CONCURRENT_DOWNLOADS = 5; // –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
let globalQueue = [];
let activeDownloadsCount = 0;
// const queues = {};
// const processing = {};
// const userStates = {};// –¥–ª—è —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏

const texts = {
  start: 'üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ —Å SoundCloud.',
  menu: 'üìã –ú–µ–Ω—é',
  upgrade: 'üîì –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç',
  mytracks: 'üéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏',
  help: '‚ÑπÔ∏è –ü–æ–º–æ—â—å',
  downloading: 'üéß –ó–∞–≥—Ä—É–∂–∞—é...',
  error: '‚ùå –û—à–∏–±–∫–∞',
  noTracks: '–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.',
  limitReached: `üö´ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚ùå

üîî –ü–æ–ª—É—á–∏ 7 –¥–Ω–µ–π Plus!
–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @BAZAproject –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å.`,
  upgradeInfo: `üöÄ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤?

üÜì Free ‚Äî 10 üü¢
Plus ‚Äî 50 üéØ (59‚ÇΩ)
Pro ‚Äî 100 üí™ (119‚ÇΩ)
Unlimited ‚Äî üíé (199‚ÇΩ)

üëâ –î–æ–Ω–∞—Ç: https://boosty.to/anatoly_bone/donate
‚úâÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏: @anatolybone

üë´ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ 1 –¥–µ–Ω—å —Ç–∞—Ä–∏—Ñ–∞ Plus –∑–∞ –∫–∞–∂–¥–æ–≥–æ.`,
  helpInfo: '‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∏—à—å mp3.\nüîì –†–∞—Å—à–∏—Ä–∏—Ç—å ‚Äî –æ–ø–ª–∞—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏.\nüéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüìã –ú–µ–Ω—é ‚Äî —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞.',
  queuePosition: pos => `‚è≥ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (#${pos})`,
  adminCommands: '\n\nüìã –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:\n/admin ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/testdb ‚Äî –º–æ–∏ –¥–∞–Ω–Ω—ã–µ\n/backup ‚Äî —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è\n/reviews ‚Äî –æ—Ç–∑—ã–≤—ã'
};

const kb = () =>
  Markup.keyboard([
    [texts.menu, texts.upgrade],
    [texts.mytracks, texts.help]
  ]).resize();

const isSubscribed = async userId => {
  try {
    const res = await bot.telegram.getChatMember('@BAZAproject', userId);
    return ['member', 'creator', 'administrator'].includes(res.status);
  } catch {
    return false;
  }
};

async function sendAudioSafe(ctx, userId, filePath, filename) {
  try {
    await ctx.telegram.sendAudio(userId, { source: fs.createReadStream(filePath), filename });
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ ${filename} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, e);
    await ctx.telegram.sendMessage(userId, texts.error);
  }
}
  
// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ ---
async function processTrackByUrl(ctx, userId, url, playlistUrl = null) {
  const start = Date.now();
  try {
    const info = await ytdl(url, { dumpSingleJson: true });
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
    let name = info.title || 'track';
    name = name.replace(/[\\/:*?"<>|]+/g, ''); // —É–±–∏—Ä–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    name = name.trim().replace(/\s+/g, '_');   // –ø—Ä–æ–±–µ–ª—ã –≤ _
    name = name.replace(/__+/g, '_');          // –¥–≤–æ–π–Ω—ã–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –æ–¥–∏–Ω–æ—á–Ω—ã–µ
    if (name.length > 64) name = name.slice(0, 64);

    // –ü—É—Ç—å –∫ –∫–µ—à—É
    const fp = path.join(cacheDir, `${name}.mp3`);

    if (!fs.existsSync(fp)) {
      // –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
      await ytdl(url, {
        extractAudio: true,
        audioFormat: 'mp3',
        output: fp,
        preferFreeFormats: true,
        noCheckCertificates: true
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await incrementDownloads(userId, name);
    await saveTrackForUser(userId, name);
await pool.query('INSERT INTO downloads_log (user_id, track_title) VALUES ($1, $2)', [userId, name]);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await sendAudioSafe(ctx, userId, fp, `${name}.mp3`);

    const duration = ((Date.now() - start) / 1000).toFixed(1);
    console.log(`‚úÖ –¢—Ä–µ–∫ ${name} –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ ${duration} —Å–µ–∫.`);
const playlistKey = playlistUrl ? `${userId}:${playlistUrl}` : null;
if (playlistKey && playlistTracker.has(playlistKey)) {
  let remaining = playlistTracker.get(playlistKey) - 1;
  if (remaining <= 0) {
    await ctx.telegram.sendMessage(userId, '‚úÖ –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
    playlistTracker.delete(playlistKey);
  } else {
    playlistTracker.set(playlistKey, remaining);
  }
}
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${url}:`, e);
    await ctx.telegram.sendMessage(userId, texts.error);
  }
}

// --- –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –∑–∞–≥—Ä—É–∑–æ–∫ ---
function addToGlobalQueue(task) {
  globalQueue.push(task);
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—á–µ–º –≤—ã—à–µ premium_limit ‚Äî —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  globalQueue.sort((a, b) => b.priority - a.priority);
}

async function processNextInQueue() {
  while (activeDownloadsCount < MAX_CONCURRENT_DOWNLOADS && globalQueue.length > 0) {
    const task = globalQueue.shift();
    activeDownloadsCount++;
    const { ctx, userId, url, playlistUrl } = task;
    try {
      await processTrackByUrl(ctx, userId, url, playlistUrl);
    } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞ ${url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, e);
    try {
      await ctx.telegram.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞.');
    } catch {}
  }

  activeDownloadsCount--;
    processNextInQueue();
  }
} 

    // –í–∞–∂–Ω–æ: –∑–¥–µ—Å—å –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º createUser/getUser, —Ç.–∫. —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ

   async function enqueue(ctx, userId, url) {
  try {
    await logUserActivity(userId)
    const user = await getUser(userId);
    const remainingLimit = user.premium_limit - user.downloads_today;

    if (remainingLimit <= 0) {
      return ctx.telegram.sendMessage(userId, texts.limitReached, Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_subscription')
      ]));
    }

    const info = await ytdl(url, { dumpSingleJson: true });
    const isPlaylist = Array.isArray(info.entries);

    let entries = [];

    if (isPlaylist) {
      entries = info.entries
        .filter(e => e && e.webpage_url)
        .map(e => e.webpage_url);
const playlistKey = `${user.id}:${url}`;
playlistTracker.set(playlistKey, entries.length);
      if (entries.length > remainingLimit) {
        await ctx.telegram.sendMessage(userId,
          `‚ö†Ô∏è –í –ø–ª–µ–π–ª–∏—Å—Ç–µ ${entries.length} —Ç—Ä–µ–∫–æ–≤, –Ω–æ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${remainingLimit}. –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–≤—ã–µ ${remainingLimit}.`);
        entries = entries.slice(0, remainingLimit);
      }
    } else {
      entries = [url];
    }

   for (const entryUrl of entries) {
  addToGlobalQueue({
    ctx,
    userId,
    url: entryUrl,
    playlistUrl: isPlaylist ? url : null,
    priority: user.premium_limit
  });
} // ‚Üê –≠–¢–û–¢ –ó–ê–ö–†–´–í–ê–Æ–©–ò–ô `}` –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
await ctx.telegram.sendMessage(userId, texts.queuePosition(
  globalQueue.filter(task => task.userId === userId).length
));

    processNextInQueue();
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ enqueue:', e);
    await ctx.telegram.sendMessage(userId, texts.error);
  }
}

async function broadcastMessage(bot, pool, message) {
  const users = await getAllUsers();
  let successCount = 0;
  let errorCount = 0;

  for (const user of users) {
    if (!user.active) continue;

    try {
      await bot.telegram.sendMessage(user.id, message);
      successCount++;
      await new Promise(r => setTimeout(r, 150));
    } catch (e) {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, e.description || e.message);
      errorCount++;
      try {
        await pool.query('UPDATE users SET active = FALSE WHERE id = $1', [user.id]);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      }
    }
  }

  return { successCount, errorCount };
}
async function addOrUpdateUserInSupabase(id, first_name, username, referralSource) {
  if (!id) return;
  if (!supabase) {
    console.error('Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return;
  }
  try {
    const { error } = await supabase
      .from('users')
      .upsert([{ id, first_name, username, referred_by: referralSource || null }]);
    if (error) {
      console.error('–û—à–∏–±–∫–∞ upsert –≤ Supabase:', error);
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ Supabase:', e);
  }
}
bot.start(async ctx => {
  const referralSource = ctx.startPayload || null; // –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ —Å—Å—ã–ª–∫–∏ /start ref_id
  
  // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
  await addOrUpdateUserInSupabase(ctx.from.id, ctx.from.first_name, ctx.from.username, referralSource);

  // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Postgres (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è —Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞)
  await createUser(ctx.from.id, ctx.from.first_name, ctx.from.username);

  await ctx.replyWithMarkdown(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *${ctx.from.first_name}*!

üéµ –≠—Ç–æ—Ç –±–æ—Ç –∫–∞—á–∞–µ—Ç **—Ç—Ä–µ–∫–∏ –∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã** —Å SoundCloud –≤ MP3.

üìå –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É ‚Äî –∏ –ø–æ–ª—É—á–∏ MP3.

üéÅ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @BAZAproject ‚Äî –ø–æ–ª—É—á–∏ *7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus –±–µ—Å–ø–ª–∞—Ç–Ω–æ*.

üìã –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ú–µ–Ω—é¬ª, —á—Ç–æ–±—ã:
‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ –∏ –ª–∏–º–∏—Ç,
‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è,
‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É,
‚Äî —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç.`, kb());
});
// –•–µ–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞

bot.hears(texts.menu, async ctx => {
  await createUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
  const user = await getUser(ctx.from.id);

  const now = new Date();
  const premiumUntil = user.premium_until ? new Date(user.premium_until) : null;
  const daysLeft = premiumUntil ? Math.ceil((premiumUntil - now) / 86400000) : 0;

  if (user.referred_count > 0 && daysLeft <= 0 && user.premium_limit < 50) {
    await setPremium(ctx.from.id, 50, user.referred_count);
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = formatMenuMessage(user);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –∫–Ω–æ–ø–∫–æ–π
  await ctx.reply(message, Markup.inlineKeyboard([
    Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_subscription')
  ]));
});

bot.action('check_subscription', async ctx => {
  const user = await getUser(ctx.from.id);

  if (user.subscribed_bonus_used) {
    return ctx.answerCbQuery('‚ö†Ô∏è –ë–æ–Ω—É—Å —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ.', { show_alert: true });
  }

  if (await isSubscribed(ctx.from.id)) {
    await setPremium(ctx.from.id, 50, 7);
    await markSubscribedBonusUsed(ctx.from.id);

    await ctx.editMessageReplyMarkup(); // —É–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫—É
    return ctx.reply('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–∞—Ä–∏—Ñ Plus –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π.', kb());
  } else {
    return ctx.answerCbQuery('‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª', { show_alert: true });
  }
});
  function formatMenuMessage(user) {
  const now = new Date();
  const premiumUntil = user.premium_until ? new Date(user.premium_until) : null;
  const daysLeft = premiumUntil ? Math.ceil((premiumUntil - now) / 86400000) : 0;

  const tariffName =
    user.premium_limit === 10 ? 'Free (10/–¥–µ–Ω—å)' :
    user.premium_limit === 50 ? 'Plus (50/–¥–µ–Ω—å)' :
    user.premium_limit === 100 ? 'Pro (100/–¥–µ–Ω—å)' :
    'Unlimited';

  const refLink = `https://t.me/SCloudMusicBot?start=${user.id}`;


return `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!

üì• –ë–æ—Ç –∫–∞—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏ —Ü–µ–ª—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å SoundCloud –≤ MP3.  
–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É ‚Äî –∏ –≤—Å—ë üßô‚Äç‚ôÇÔ∏è

üîÑ –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ —Ç—ã —É–≤–∏–¥–∏—à—å —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏.  
üéØ –ü–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (Plus / Pro / Unlimited) –∏–¥—É—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ‚Äî –∏—Ö —Ç—Ä–µ–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏.  
üì• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–∂–µ –ø–æ–ª—É—á–∞—é—Ç —Ç—Ä–µ–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —á—É—Ç—å –ø–æ–∑–∂–µ. –í—Å—ë —á–µ—Å—Ç–Ω–æ.

üíº –¢–∞—Ä–∏—Ñ: ${tariffName}  
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft > 0 ? daysLeft : '0'}

üéß –°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ: ${user.downloads_today || 0} –∏–∑ ${user.premium_limit}

üéÅ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ?

–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @BAZAproject ‚Äî –ø–æ–ª—É—á–∏ 7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus –±–µ—Å–ø–ª–∞—Ç–Ω–æ.

–ù–∞–∂–º–∏ ¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å.

üë´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.referred_count || 0}  
üéÅ –ü–æ–ª—É—á–µ–Ω–æ –¥–Ω–µ–π Plus –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: ${user.referred_count || 0}

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:  
${refLink}
`;
}

bot.hears(texts.upgrade, ctx => ctx.reply(texts.upgradeInfo));
bot.hears(texts.help, ctx => ctx.reply(texts.helpInfo));

bot.command('admin', async ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  const users = await getAllUsers();
  const downloads = users.reduce((sum, u) => sum + (u.total_downloads || 0), 0);
  ctx.reply(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\nüì• –ó–∞–≥—Ä—É–∑–æ–∫: ${downloads}${texts.adminCommands}`);
});
bot.command('testdb', async ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  const user = await getUser(ctx.from.id);
  ctx.reply(JSON.stringify(user, null, 2));
});
bot.command('reviews', async ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  const reviews = await getLatestReviews(10);
  for (const r of reviews) {
    await ctx.reply(`üìù ${r.text}\nüïí ${r.time}`);
  }
});

bot.action('check_subscription', async ctx => {
  const user = await getUser(ctx.from.id);

  if (user.subscribed_bonus_used) {
    return ctx.answerCbQuery('‚ö†Ô∏è –ë–æ–Ω—É—Å —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ.', { show_alert: true });
  }

  if (await isSubscribed(ctx.from.id)) {
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ Plus –Ω–∞ 7 –¥–Ω–µ–π –∏ –ª–∏–º–∏—Ç 50 —Ç—Ä–µ–∫–æ–≤
    await setPremium(ctx.from.id, 50, 7);
    await markSubscribedBonusUsed(ctx.from.id);

    await ctx.editMessageReplyMarkup(); // —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
    return ctx.reply('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–∞—Ä–∏—Ñ Plus –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π.', kb());
  } else {
    return ctx.answerCbQuery('‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª', { show_alert: true });
  }
});


bot.hears(texts.mytracks, async ctx => {
  const u = await getUser(ctx.from.id);
  const list = u.tracks_today?.split(',').filter(Boolean) || [];
  if (!list.length) return ctx.reply(texts.noTracks);
  const media = list.map(name => {
    const fp = path.join(cacheDir, `${name}.mp3`);
    return fs.existsSync(fp) ? { type: 'audio', media: { source: fp } } : null;
  }).filter(Boolean);
  for (let i = 0; i < media.length; i += 5) {
    const chunk = media.slice(i, i + 5);
    try {
      await ctx.replyWithMediaGroup(chunk);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Ç—Ä–µ–∫–æ–≤:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å —Ç—Ä–µ–∫–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.');
    }
  }
});

function extractUrl(text) {
  const urlRegex = /(https?:\/\/[^\s]+)/g;
  const matches = text.match(urlRegex);
  if (!matches) return null;
  return matches.find(u => u.includes('soundcloud.com')) || null;
}

bot.on('text', async ctx => {
  if (ctx.message.text.startsWith('/')) return;

  const url = extractUrl(ctx.message.text);
  if (!url) return;
  
await logUserActivity(ctx.from.id);
  await resetDailyLimitIfNeeded(ctx.from.id);
  await createUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
  const u = await getUser(ctx.from.id);

  if (u.downloads_today >= u.premium_limit) {
    return ctx.reply(texts.limitReached, Markup.inlineKeyboard([
      Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_subscription')
    ]));
  }

  ctx.reply('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç...');
  await enqueue(ctx, ctx.from.id, url).catch(e => {
    console.error('–û—à–∏–±–∫–∞ –≤ enqueue:', e);
    ctx.telegram.sendMessage(ctx.from.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.');
  });
});

// Webhook
app.post(WEBHOOK_PATH, express.json(), (req, res) => {
  res.sendStatus(200);
  bot.handleUpdate(req.body).catch(err => console.error('–û—à–∏–±–∫–∞ –≤ handleUpdate:', err));
});

app.use(express.urlencoded({ extended: true }));
app.use(compression());

app.use(session({
  store: new pgSession({ pool, tableName: 'session', createTableIfMissing: true }),
  secret: process.env.SESSION_SECRET || 'secret',
  resave: false,
  saveUninitialized: false,
  cookie: { maxAge: 30 * 24 * 60 * 60 * 1000 }
}));

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

function requireAuth(req, res, next) {
  if (req.session.authenticated) return next();
  res.redirect('/admin');
}

app.get('/broadcast', requireAuth, (req, res) => {
  res.render('broadcast-form'); // –ü—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É
});

app.post('/broadcast', requireAuth, upload.single('audio'), async (req, res) => {
  const { message } = req.body;
  const audio = req.file;

  if (!message && !audio) {
    return res.status(400).send('–°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }

  const users = await getAllUsers();

  let success = 0, error = 0;
  for (const u of users) {
    try {
      if (audio) {
        await bot.telegram.sendAudio(u.id, {
          source: fs.createReadStream(audio.path),
          filename: audio.originalname
        }, { caption: message || '' });
      } else {
        await bot.telegram.sendMessage(u.id, message);
      }
      success++;
    } catch (e) {
      error++;
      try {
        await pool.query('UPDATE users SET active = FALSE WHERE id = $1', [u.id]);
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${u.id}:`, err);
      }
    }
    await new Promise(r => setTimeout(r, 100));
  }

  if (audio) {
    fs.unlink(audio.path, err => {
      if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∞—É–¥–∏–æ —Ä–∞—Å—Å—ã–ª–∫–∏:', err);
    });
  }

  res.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}, –æ—à–∏–±–æ–∫: ${error}`);
});
app.get('/export', requireAuth, async (req, res) => {
  try {
    const users = await getAllUsers(true); // –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)

    const fields = ['id', 'username', 'first_name', 'total_downloads', 'premium_limit', 'created_at', 'last_active'];
    const opts = { fields };
    const parser = new Parser(opts);
    const csv = parser.parse(users);

    res.header('Content-Type', 'text/csv');
    res.attachment('users.csv');
    return res.send(csv);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV:', err);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});
app.get('', requireAuth, async (req, res) => {
  try {
    const showInactive = req.query.showInactive === 'true';

    // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const expiringLimit = req.query.expiringLimit ? parseInt(req.query.expiringLimit, 10) : 10;
    const expiringOffset = req.query.expiringOffset ? parseInt(req.query.expiringOffset, 10) : 0;

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º expiringSoon –∏–∑ –±–∞–∑—ã
    const expiringSoon = await getExpiringUsers();

    // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const expiringCount = expiringSoon.length;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–∂–µ –ø–æ—Å–ª–µ)
    const users = await getAllUsers(showInactive);

    const stats = {
      totalUsers: users.length,
      totalDownloads: users.reduce((sum, u) => sum + (u.total_downloads || 0), 0),
      free: users.filter(u => u.premium_limit === 10).length,
      plus: users.filter(u => u.premium_limit === 50).length,
      pro: users.filter(u => u.premium_limit === 100).length,
      unlimited: users.filter(u => u.premium_limit >= 1000).length,
      registrationsByDate: await getRegistrationsByDate(),
      downloadsByDate: await getDownloadsByDate(),
      activeByDate: await getActiveUsersByDate()
    };

    const referralStats = await getReferralSourcesStats();
    const activityByDayHour = await getUserActivityByDayHour();

    res.render('dashboard', {
      users,
      stats,
      expiringSoon,
      showInactive,
      referralStats,
      activityByDayHour,
      expiringLimit,
      expiringOffset,
      expiringCount
    });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ :', e);
    res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

app.get('/expiring-users', requireAuth, async (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const perPage = parseInt(req.query.perPage) || 10;

  try {
    const total = await getExpiringUsersCount();
    const users = await getExpiringUsersPaginated(perPage, (page - 1) * perPage);

    const totalPages = Math.ceil(total / perPage);

    res.render('expiring-users', {
      users,
      page,
      perPage,
      totalPages
    });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ expiring-users:', e);
    res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});
app.post('/set-tariff', express.urlencoded({ extended: true }), requireAuth, async (req, res) => {
  const { userId, limit } = req.body;

  if (!userId || !limit) {
    return res.status(400).send('Missing parameters');
  }

  let limitNum;
  switch(limit) {
    case '10': limitNum = 10; break;
    case '50': limitNum = 50; break;
    case '100': limitNum = 100; break;
    case '1000': limitNum = 1000; break;
    default:
      return res.status(400).send('Unknown tariff');
  }

  try {
    await setPremium(parseInt(userId), limitNum, 0);
    res.redirect('');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞—Ä–∏—Ñ–∞:', e);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}`, err);
});
(async () => {
  try {
    await bot.telegram.setWebhook(`${WEBHOOK_URL}${WEBHOOK_PATH}`);
    app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
    console.log('ü§ñ –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:', e);
    process.exit(1);
  }
})();