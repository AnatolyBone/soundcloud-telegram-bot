const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const fs = require('fs');
const path = require('path');
const youtubedl = require('youtube-dl-exec');
const app = express();

const BOT_TOKEN = process.env.BOT_TOKEN || '‚Ä¶—Ç–≤–æ–π —Ç–æ–∫–µ–Ω‚Ä¶';
const ADMIN_ID = 2018254756; // <‚Äî —Ç–≤–æ–π Telegram ID
const WEBHOOK_URL = 'https://soundcloud-telegram-bot.onrender.com/telegram';
const PORT = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const usersFile = './users.json';
let users = fs.existsSync(usersFile) ? JSON.parse(fs.readFileSync(usersFile)) : {};
const saveUsers = () => fs.writeFileSync(usersFile, JSON.stringify(users, null, 2));
const todayStr = () => new Date().toISOString().split('T')[0];
const getUser = id => {
  if (!users[id]) {
    users[id] = {
      lang: 'ru',
      downloads: 0,
      premiumLimit: 10,      // —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç
      date: todayStr(),
      count: 0,
      tracksToday: []
    };
  }
  return users[id];
};

// –ö–µ—à –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
const cacheDir = path.resolve(__dirname, 'cache');
if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

// –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ (7 –¥–Ω–µ–π)
function cleanCache() {
  const cutoff = Date.now() - 7 * 24 * 60 * 60 * 1000;
  fs.readdirSync(cacheDir).forEach(fn => {
    const fp = path.join(cacheDir, fn);
    if (fs.statSync(fp).mtimeMs < cutoff) fs.unlinkSync(fp);
  });
}
setInterval(cleanCache, 3600000);
cleanCache();

// –û—á–µ—Ä–µ–¥–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
const userQueues = new Map();
const userProcessing = new Set();

function addToQueue(uid, task) {
  if (!userQueues.has(uid)) userQueues.set(uid, []);
  userQueues.get(uid).push(task);
  processQueue(uid);
}

async function processQueue(uid) {
  if (userProcessing.has(uid)) return;
  const q = userQueues.get(uid);
  if (!q || q.length === 0) return;
  userProcessing.add(uid);
  const task = q.shift();
  try { await task(); }
  catch (e) { console.error(`Queue error ${uid}:`, e.message); }
  userProcessing.delete(uid);
  processQueue(uid);
}

// –ê–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç—ã
const recent = new Set();

// –¢–µ–∫—Å—Ç—ã
const texts = {
  ru: {
    start: 'üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ —Å SoundCloud.',
    menu: 'üìã –ú–µ–Ω—é',
    upgrade: 'üîì –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç',
    mytracks: 'üéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏',
    help: '‚ÑπÔ∏è Help',
    chooseLang: 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
    downloading: 'üéß –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫...',
    cached: 'üîÅ –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑ –∫–µ—à–∞...',
    error: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.',
    timeout: '‚è± –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.',
    limitReached: 'üö´ –õ–∏–º–∏—Ç 10 —Ç—Ä–µ–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.',
    upgradeInfo:
      'üöÄ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤?\n\n' +
      'üÜì Free ‚Äì 10 üü¢\n' +
      'Plus ‚Äì 50 üéØ (59‚ÇΩ)\n' +
      'Pro ‚Äì 100 üí™ (119‚ÇΩ)\n' +
      'Unlimited ‚Äì –±–µ–∑–ª–∏–º–∏—Ç üíé (199‚ÇΩ)\n\n' +
      '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Boosty: https://boosty.to/–¢–í–û–ô_–ê–ö–ö–ê–£–ù–¢\n' +
      '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏ –º–Ω–µ –≤ –ª—Å —Ç–≤–æ–π Telegram.',
    helpInfo:
      '‚ùì *–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*\n' +
      '- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏ —Å SoundCloud\n' +
      '- –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äì 10 —Ç—Ä–µ–∫–æ–≤/–¥–µ–Ω—å\n' +
      '- –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç –∫–Ω–æ–ø–∫–æ–π ‚Äúüîì –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç‚Äù\n' +
      '- –ö–Ω–æ–ø–∫–∞ ‚Äúüéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏‚Äù –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n' +
      '- –Ø–∑—ã–∫ —á–µ—Ä–µ–∑ ‚Äúüìã –ú–µ–Ω—é‚Äù\n' +
      '- –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å –ª–∏–º–∏—Ç —á–µ—Ä–µ–∑ `/setlimit`\n' +
      '\nüí° –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ª–∏–º–∏—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω.',
    setByAdmin: id => `üõ† –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.`
  },
  en: {
    start: 'üëã Send a SoundCloud track link.',
    menu: 'üìã Menu',
    upgrade: 'üîì Upgrade limit',
    mytracks: 'üéµ My tracks',
    help: '‚ÑπÔ∏è Help',
    chooseLang: 'üåê Choose language:',
    downloading: 'üéß Downloading track...',
    cached: 'üîÅ Sending from cache...',
    error: '‚ùå Failed to download.',
    timeout: '‚è± Too long. Try later.',
    limitReached: 'üö´ You reached 10 tracks today.',
    upgradeInfo:
      'üöÄ Want more?\n\n' +
      'üÜì Free ‚Äì 10 üü¢\n' +
      'Plus ‚Äì 50 üéØ (59‚ÇΩ)\n' +
      'Pro ‚Äì 100 üí™ (119‚ÇΩ)\n' +
      'Unlimited ‚Äì Infinite üíé (199‚ÇΩ)\n\n' +
      'Pay via Boosty: https://boosty.to/YOUR_ACCOUNT\n' +
      'After payment, message me your Telegram.',
    helpInfo:
      '‚ùì *Bot features:*\n' +
      '- Auto-downloads SoundCloud tracks\n' +
      '- Free limit ‚Äì 10 tracks/day\n' +
      '- Upgrade via ‚Äúüîì Upgrade limit‚Äù\n' +
      '- ‚Äúüéµ My tracks‚Äù shows today‚Äôs downloads\n' +
      '- Language switch via ‚Äúüìã Menu‚Äù\n' +
      '- Admin can set limits with `/setlimit`\n' +
      '\nüí° Limit increases after payment.',
    setByAdmin: id => `üõ† User ${id} limit set manually.`
  }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (4 –∫–Ω–æ–ø–∫–∏)
function getMainKeyboard(lang) {
  return Markup.keyboard([
    [texts[lang].menu, texts[lang].upgrade],
    [texts[lang].mytracks, texts[lang].help]
  ]).resize();
}

// Start
bot.start(ctx => {
  const usr = getUser(ctx.from.id);
  ctx.reply(texts[usr.lang].start, getMainKeyboard(usr.lang));
});

// –Ø–∑—ã–∫
bot.hears([texts.ru.menu, texts.en.menu], ctx => {
  const u = getUser(ctx.from.id);
  ctx.reply(texts[u.lang].chooseLang,
    Markup.inlineKeyboard([
      Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru'),
      Markup.button.callback('üá¨üáß English', 'lang_en')
    ])
  );
});
bot.action(/lang_(.+)/, ctx => {
  const id = ctx.from.id, lang = ctx.match[1];
  getUser(id).lang = lang;
  saveUsers();
  ctx.editMessageText(texts[lang].chooseLang + ' ‚úÖ');
  ctx.reply(texts[lang].start, getMainKeyboard(lang));
});

// Upgrade –ª–∏–º–∏—Ç
bot.hears(texts.ru.upgrade, ctx => {
  const u = getUser(ctx.from.id);
  ctx.reply(texts[u.lang].upgradeInfo, { parse_mode: 'Markdown' });
});
bot.hears(texts.en.upgrade, ctx => {
  const u = getUser(ctx.from.id);
  ctx.reply(texts[u.lang].upgradeInfo, { parse_mode: 'Markdown' });
});

// My tracks
bot.hears(texts.ru.mytracks, ctx => {
  const u = getUser(ctx.from.id);
  const list = u.tracksToday.join('\n') || '‚Äî';
  ctx.reply(`üéµ –°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ:\n${list}`);
});
bot.hears(texts.en.mytracks, ctx => {
  const u = getUser(ctx.from.id);
  const list = u.tracksToday.join('\n') || '‚Äî';
  ctx.reply(`üéµ Today's downloads:\n${list}`);
});

// Help
bot.hears(texts.ru.help, ctx => {
  const u = getUser(ctx.from.id);
  ctx.reply(texts[u.lang].helpInfo, { parse_mode: 'Markdown' });
});
bot.hears(texts.en.help, ctx => {
  const u = getUser(ctx.from.id);
  ctx.reply(texts[u.lang].helpInfo, { parse_mode: 'Markdown' });
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.command('stats', ctx => {
  const u = getUser(ctx.from.id);
  ctx.reply(`üìä –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ: ${u.downloads}, —Å–µ–≥–æ–¥–Ω—è: ${u.count}`);
});

// –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ /setlimit <id> <count>
bot.command('setlimit', ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  const [_, uid, cnt] = ctx.message.text.split(' ');
  if (!uid || !cnt || !users[uid]) return ctx.reply('Usage: /setlimit <userId> <count>');
  users[uid].premiumLimit = +cnt;
  saveUsers();
  ctx.reply(texts['ru'].setByAdmin(uid));
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤
bot.on('text', ctx => {
  const id = ctx.from.id, mId = ctx.message.message_id;
  const url = ctx.message.text, u = getUser(id);
  const lang = u.lang;

  const key = `${id}_${mId}`;
  if (recent.has(key)) return;
  recent.add(key);
  setTimeout(() => recent.delete(key), 60000);

  if (!url.includes('soundcloud.com')) return;

  addToQueue(id, async () => {
    if (u.date !== todayStr()) {
      u.date = todayStr();
      u.count = 0;
      u.tracksToday = [];
    }

    if (id !== ADMIN_ID && u.count >= u.premiumLimit) {
      return ctx.reply(texts[lang].limitReached);
    }

    await ctx.reply(texts[lang].downloading);
    try {
      const info = await youtubedl(url, {
        dumpSingleJson: true,
        noWarnings: true,
        flatPlaylist: true,
        execOptions: { timeout: 300000 }
      });
      const title = (info.title || 'track').replace(/[<>:"/\\|?*]+/g, '');
      const filePath = path.join(cacheDir, `${title}.mp3`);

      if (fs.existsSync(filePath)) {
        await ctx.reply(texts[lang].cached);
      } else {
        await youtubedl(url, {
          extractAudio: true,
          audioFormat: 'mp3',
          output: filePath,
          execOptions: { timeout: 300000 }
        });
        u.downloads++;
      }

      u.count++;
      u.tracksToday.push(title);
      saveUsers();

      await ctx.replyWithAudio({
        source: fs.createReadStream(filePath),
        filename: title
      });
    } catch (e) {
      console.error(e.message);
      ctx.reply(e.message.includes('timed out') ? texts[lang].timeout : texts[lang].error);
    }
  });
});

// Webhook
bot.telegram.setWebhook(WEBHOOK_URL);
app.use(express.json());
app.post('/telegram', (req, res) => {
  res.sendStatus(200);
  bot.handleUpdate(req.body).catch(console.error);
});
app.get('/', (req, res) => res.send('‚úÖ OK'));
app.listen(PORT, () => console.log(`üöÄ Listening on ${PORT}`));