import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import express from 'express';
import rateLimit from 'express-rate-limit';
import { Telegraf } from 'telegraf';

// Services
import { initNotifier, startNotifier } from './services/notifier.js';
import redisService from './services/redisService.js';  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
import BotService from './services/botService.js';

// Routes
import { setupAdmin } from './routes/admin.js';

// Configuration and utilities
import { loadTexts } from './config/texts.js';
import { downloadQueue } from './services/downloadManager.js';
import { cleanupCache, startIndexer } from './src/utils.js';
import { resetDailyStats } from './db.js';

// ===== ENV =====
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = Number(process.env.ADMIN_ID);
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const WEBHOOK_PATH = '/telegram';
const PORT = process.env.PORT ?? 3000;
const SESSION_SECRET = process.env.SESSION_SECRET || 'a-very-secret-key-for-session';
const ADMIN_LOGIN = process.env.ADMIN_LOGIN;
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD;
const STORAGE_CHANNEL_ID = process.env.STORAGE_CHANNEL_ID;

if (!BOT_TOKEN || !ADMIN_ID || !ADMIN_LOGIN || !ADMIN_PASSWORD || !WEBHOOK_URL || !STORAGE_CHANNEL_ID) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

// ===== App/Bot =====
const bot = new Telegraf(BOT_TOKEN);
initNotifier(bot);

const botService = new BotService(bot);

// ===== App =====
const app = express();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const cacheDir = path.join(__dirname, 'cache');

app.set('trust proxy', 1);
app.use(express.json()); // JSON POST –¥–ª—è –∞–¥–º–∏–Ω–∫–∏/—Ä–∞—Å—Å—ã–ª–∫–∏

// health-check –¥–ª—è Render
app.get('/health', (_req, res) => res.type('text').send('OK'));
app.get('/', (_req, res) => res.type('text').send('OK'));

// —Å—Ç–∞—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
app.use('/static', express.static(path.join(__dirname, 'public', 'static')));

// Redis Client
function getRedisClient() {
  return redisService.getClient();  // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Redis
}

// ===== –£—Ç–∏–ª–∏—Ç—ã =====
async function startApp() {
  try {
    // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∏–∑ –ë–î –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    await loadTexts();
    
    // Redis
    await redisService.connect();
    const redisClient = redisService.getClient();
    console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á—ë–Ω');
    
    if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);
    
    // –ê–¥–º–∏–Ω–∫–∞
    setupAdmin({
      app,
      bot,
      __dirname,
      ADMIN_ID,
      ADMIN_LOGIN,
      ADMIN_PASSWORD,
      SESSION_SECRET,
      STORAGE_CHANNEL_ID,
      redis: redisClient,
    });
    
    // –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç
    botService.setupTelegramBot();
    
    // –ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    setInterval(() => resetDailyStats(), 24 * 3600 * 1000);
    setInterval(() => console.log(`[Monitor] –û—á–µ—Ä–µ–¥—å: ${downloadQueue.size} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, ${downloadQueue.active} –≤ —Ä–∞–±–æ—Ç–µ.`), 60 * 1000);
    setInterval(() => cleanupCache(cacheDir, 60), 30 * 60 * 1000);
    cleanupCache(cacheDir, 60);
    
    if (process.env.NODE_ENV === 'production') {
      // Rate limit —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–µ–±—Ö—É–∫
      const webhookLimiter = rateLimit({
        windowMs: 60 * 1000,
        max: 120,
        standardHeaders: true,
        legacyHeaders: false,
        trustProxy: true,
      });
      app.use(WEBHOOK_PATH, webhookLimiter);
      
      app.use(await bot.createWebhook({
        domain: WEBHOOK_URL,
        path: WEBHOOK_PATH,
      }));
      
      app.listen(PORT, () => console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}.`));
    } else {
      await bot.launch();
      console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long-polling.');
    }
    
    // –§–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    startIndexer().catch(err => console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å:", err));
    startNotifier().catch(err => console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:", err));
    
  } catch (err) {
    console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', err);
    process.exit(1);
  }
}

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
const stopBot = (signal) => {
  console.log(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
  try {
    if (bot.polling?.isRunning()) {
      bot.stop(signal);
    }
  } catch {}
  setTimeout(() => process.exit(0), 500);
};

process.once('SIGINT', () => stopBot('SIGINT'));
process.once('SIGTERM', () => stopBot('SIGTERM'));

startApp();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
export { app, bot, getRedisClient };