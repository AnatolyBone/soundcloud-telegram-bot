const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const fs = require('fs');
const path = require('path');
const youtubedl = require('youtube-dl-exec');
const app = express();

const BOT_TOKEN = process.env.BOT_TOKEN || '8119729959:AAETYnCygCDclelR_Y5P1O7xIP0cbHkQuVQ';
const WEBHOOK_URL = 'https://soundcloud-telegram-bot.onrender.com/telegram';
const PORT = process.env.PORT || 3000;

const bot = new Telegraf(BOT_TOKEN);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const usersFile = './users.json';
let users = fs.existsSync(usersFile) ? JSON.parse(fs.readFileSync(usersFile)) : {};
const saveUsers = () => fs.writeFileSync(usersFile, JSON.stringify(users, null, 2));
const getUser = (id) => {
  if (!users[id]) users[id] = { lang: 'ru', downloads: 0 };
  return users[id];
};

// üõ° –ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç–∞
const recentMessages = new Set();

// –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const texts = {
  ru: {
    start: 'üëã –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ —Å SoundCloud, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ñ–∞–π–ª!',
    menu: 'üìã –ú–µ–Ω—é',
    chooseLang: 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
    downloading: 'üéß –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫...',
    error: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.',
    downloaded: (n) => `üìä –°–∫–∞—á–∞–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${n}`
  },
  en: {
    start: 'üëã Send me a SoundCloud track link and I‚Äôll send you the file!',
    menu: 'üìã Menu',
    chooseLang: 'üåê Choose language:',
    downloading: 'üéß Downloading the track...',
    error: '‚ùå Failed to download track.',
    downloaded: (n) => `üìä Tracks downloaded: ${n}`
  }
};

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  const user = getUser(ctx.from.id);
  const lang = user.lang;
  ctx.reply(texts[lang].start, Markup.keyboard([[texts[lang].menu]]).resize());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
bot.hears([texts.ru.menu, texts.en.menu], (ctx) => {
  const lang = getUser(ctx.from.id).lang;
  ctx.reply(texts[lang].chooseLang, Markup.inlineKeyboard([
    [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')],
    [Markup.button.callback('üá¨üáß English', 'lang_en')]
  ]));
});

// –í—ã–±–æ—Ä —è–∑—ã–∫–∞
bot.action(/lang_(.+)/, (ctx) => {
  const id = ctx.from.id;
  const lang = ctx.match[1];
  const user = getUser(id);
  user.lang = lang;
  saveUsers();
  ctx.editMessageText(texts[lang].chooseLang + ' ‚úÖ');
  ctx.reply(texts[lang].start, Markup.keyboard([[texts[lang].menu]]).resize());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const id = ctx.from.id;
  const messageId = ctx.message.message_id;
  const url = ctx.message.text;
  const lang = getUser(id).lang;

  // üõ° –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const uniqueKey = `${id}_${messageId}`;
  if (recentMessages.has(uniqueKey)) return;
  recentMessages.add(uniqueKey);
  setTimeout(() => recentMessages.delete(uniqueKey), 60000);

  if (!url.includes('soundcloud.com')) return;

  await ctx.reply(texts[lang].downloading);

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    const info = await youtubedl(url, {
      dumpSingleJson: true,
      noWarnings: true,
      flatPlaylist: true
    });
    const title = (info.title || 'track').replace(/[<>:"/\\|?*]+/g, '');
    const filename = path.resolve(__dirname, `${title}.mp3`);

    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
    await youtubedl(url, {
      extractAudio: true,
      audioFormat: 'mp3',
      output: filename
    });

    users[id].downloads += 1;
    saveUsers();

    await ctx.replyWithAudio({ source: fs.createReadStream(filename), filename });
    fs.unlinkSync(filename);
  } catch (err) {
    console.error('yt-dlp error:', err.message);
    ctx.reply(texts[lang].error);
  }
});

// ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook
bot.telegram.setWebhook(WEBHOOK_URL);

// ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Webhook –≤—Ä—É—á–Ω—É—é (—á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!)
app.post('/telegram', express.json(), (req, res) => {
  res.sendStatus(200); // –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç Telegram
  bot.handleUpdate(req.body).catch((err) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update:', err);
  });
});

// –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => res.send('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'));

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});