// index.js

// ===== Core =====
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ===== Server =====
import express from 'express';
import rateLimit from 'express-rate-limit';

// ===== Telegram =====
import { Telegraf, Markup } from 'telegraf';

// ===== Redis =====
import { createClient } from 'redis';

// ===== yt-dlp exec wrapper =====
import ytdl from 'youtube-dl-exec';

// ===== –ê–¥–º–∏–Ω–∫–∞ (–≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –º–æ–¥—É–ª—å) =====
import setupAdmin from './routes/admin.js';

// ===== –¢–µ–∫—Å—Ç—ã (–≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥) =====
import { texts } from './config/texts.js';

// ===== –ë–î/–õ–æ–≥–∏–∫–∞ =====
import {
  supabase,          // –Ω—É–∂–µ–Ω –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞
  getUser,
  updateUserField,
  setPremium,
  getAllUsers,
  resetDailyStats,
  cacheTrack,
  findCachedTrack,
} from './db.js';

import { enqueue, downloadQueue } from './services/downloadManager.js';
import { initNotifier, startNotifier } from './services/notifier.js';

// ===== ENV =====
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = Number(process.env.ADMIN_ID);
const WEBHOOK_URL = process.env.WEBHOOK_URL;       // –Ω–∞–ø—Ä–∏–º–µ—Ä: https://yourapp.onrender.com
const WEBHOOK_PATH = '/telegram';                   // –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å Render)
const PORT = process.env.PORT ?? 3000;
const SESSION_SECRET = process.env.SESSION_SECRET || 'a-very-secret-key-for-session';
const ADMIN_LOGIN = process.env.ADMIN_LOGIN;
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD;
const STORAGE_CHANNEL_ID = process.env.STORAGE_CHANNEL_ID;

if (!BOT_TOKEN || !ADMIN_ID || !ADMIN_LOGIN || !ADMIN_PASSWORD || !WEBHOOK_URL || !STORAGE_CHANNEL_ID) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

// ===== App/Bot =====
const bot = new Telegraf(BOT_TOKEN);
initNotifier(bot);

const app = express();

// –í Render/–∑–∞ –ø—Ä–æ–∫—Å–∏ ‚Äî —Å—Ç–∞–≤–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Ö–æ–ø–æ–≤, –∞ –≤–Ω—É—Ç—Ä–∏ rate-limit –æ—Ç–∫–ª—é—á–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É
app.set('trust proxy', 1);

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const cacheDir = path.join(__dirname, 'cache');
let redisClient = null;

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
export function getRedisClient() {
  if (!redisClient) throw new Error('Redis –∫–ª–∏–µ–Ω—Ç –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  return redisClient;
}

// ===== –£—Ç–∏–ª–∏—Ç—ã =====
async function cleanupCache(directory, maxAgeMinutes = 60) {
  try {
    const now = Date.now();
    const files = await fs.promises.readdir(directory);
    let cleaned = 0;
    for (const file of files) {
      try {
        const filePath = path.join(directory, file);
        const stat = await fs.promises.stat(filePath);
        if ((now - stat.mtimeMs) / 60000 > maxAgeMinutes) {
          await fs.promises.unlink(filePath);
          cleaned++;
        }
      } catch {}
    }
    if (cleaned > 0) console.log(`[Cache Cleanup] –£–¥–∞–ª–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤.`);
  } catch (e) {
    if (e.code !== 'ENOENT') console.error('[Cache Cleanup] –û—à–∏–±–∫–∞:', e);
  }
}

const kb = () => Markup.keyboard([[texts.menu, texts.upgrade], [texts.mytracks, texts.help]]).resize();

function getTariffName(limit) {
  if (limit >= 1000) return 'Unlimited (‚àû/–¥–µ–Ω—å)';
  if (limit === 100) return 'Pro (100/–¥–µ–Ω—å)';
  if (limit === 30) return 'Plus (30/–¥–µ–Ω—å)';
  return 'Free (5/–¥–µ–Ω—å)';
}

function getDaysLeft(premiumUntil) {
  if (!premiumUntil) return 0;
  const diff = new Date(premiumUntil) - new Date();
  return Math.max(Math.ceil(diff / 86400000), 0);
}

const extractUrl = (text = '') => {
  const regex = /(https?:\/\/[^\s]+)/g;
  const matches = text.match(regex);
  return matches ? matches.find(url => url.includes('soundcloud.com')) : null;
};

const isSubscribed = async (userId, channelUsername) => {
  try {
    const chatMember = await bot.telegram.getChatMember(channelUsername, userId);
    return ['creator', 'administrator', 'member'].includes(chatMember.status);
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${userId} –Ω–∞ ${channelUsername}:`, e.message);
    return false;
  }
};

function formatMenuMessage(user, ctx) {
  const tariffLabel = getTariffName(user.premium_limit);
  const downloadsToday = user.downloads_today || 0;
  const refLink = `https://t.me/${ctx.botInfo.username}?start=${user.id}`;
  const daysLeft = getDaysLeft(user.premium_until);
  
  let message = `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name || user.username || '–¥—Ä—É–≥'}!

üì• –ë–æ—Ç –∫–∞—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å SoundCloud –≤ MP3 ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É.

üì£ –ù–æ–≤–æ—Å—Ç–∏, —Ñ–∏—à–∫–∏ –∏ –±–æ–Ω—É—Å—ã: @SCM_BLOG

üíº –¢–∞—Ä–∏—Ñ: ${tariffLabel}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft > 999 ? '‚àû' : daysLeft}
üéß –°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ: ${downloadsToday} –∏–∑ ${user.premium_limit}

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
${refLink}
`.trim();
  
  if (!user.subscribed_bonus_used) {
    message += `

üéÅ –ë–æ–Ω—É—Å! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @SCM_BLOG –∏ –ø–æ–ª—É—á–∏ 7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus –±–µ—Å–ø–ª–∞—Ç–Ω–æ.`;
  }
  
  return message;
}
// ==========================
// –ò–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä (–∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π)
// ==========================

async function getUrlsToIndex() {
  // –ë–µ—Ä—ë–º URL‚Äô—ã –∏–∑ track_cache, –≥–¥–µ file_id –µ—â—ë –Ω–µ—Ç
  try {
    const { data, error } = await supabase
      .from('track_cache')
      .select('url, file_id')
      .is('file_id', null)
      .not('url', 'is', null)
      .limit(20);

    if (error) {
      console.error('[Indexer] –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ track_cache:', error.message);
      return [];
    }

    const urls = (data || [])
      .map(r => r.url)
      .filter(u => typeof u === 'string' && u.includes('soundcloud.com'));

    return Array.from(new Set(urls));
  } catch (e) {
    console.error('[Indexer] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ getUrlsToIndex:', e);
    return [];
  }
}

let shuttingDown = false;
process.once('SIGINT', () => { shuttingDown = true; });
process.once('SIGTERM', () => { shuttingDown = true; });

async function processUrlForIndexing(url) {
  let tempFilePath = null;
  try {
    const isCached = await findCachedTrack(url);
    if (isCached && (isCached.file_id || isCached.fileId)) {
      console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: ${url} —É–∂–µ –≤ –∫—ç—à–µ.`);
      return;
    }

    console.log(`[Indexer] –ò–Ω–¥–µ–∫—Å–∏—Ä—É—é: ${url}`);
    let info = await ytdl(url, { dumpSingleJson: true, 'no-playlist': true });
    if (!info) {
      console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: ${url} ‚Äî –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`);
      return;
    }

    // –ï—Å–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
    if (info._type === 'playlist' || Array.isArray(info.entries)) {
      if (Array.isArray(info.entries) && info.entries.length >= 1) {
        info = info.entries[0];
      } else {
        console.log(`[Indexer] –ü—Ä–æ–ø—É—Å–∫: ${url} —è–≤–ª—è–µ—Ç—Å—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º –±–µ–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.`);
        return;
      }
    }

    const trackName = (info.title || 'track').slice(0, 100);
    const uploader = info.uploader || 'SoundCloud';
    const fileName = `indexer_${info.id || Date.now()}.mp3`;
    tempFilePath = path.join(cacheDir, fileName);

    await ytdl(url, {
      output: tempFilePath,
      extractAudio: true,
      audioFormat: 'mp3',
      addMetadata: true,
      embedMetadata: true,
      'no-playlist': true,
    });

    const fileExists = await fs.promises.access(tempFilePath).then(() => true).catch(() => false);
    if (!fileExists) throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω');

    const message = await bot.telegram.sendAudio(
      STORAGE_CHANNEL_ID,
      { source: fs.createReadStream(tempFilePath) },
      { title: trackName, performer: uploader }
    );

    if (message?.audio?.file_id) {
      await cacheTrack(url, message.audio.file_id, trackName);
      console.log(`‚úÖ [Indexer] –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω: ${trackName}`);
    }
  } catch (err) {
    console.error(`‚ùå [Indexer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${url}:`, err.response?.description || err.stderr || err.message || err);
  } finally {
    if (tempFilePath) {
      await fs.promises.unlink(tempFilePath).catch(() => {
        console.warn(`[Indexer] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFilePath}`);
      });
    }
  }
}

async function startIndexer() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞ (–∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)...');

  async function tick() {
    if (shuttingDown) return;

    try {
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–¥—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ ‚Äî –¥–∞—ë–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      if (downloadQueue?.active > 0) {
        console.log('[Indexer] –í —Ä–∞–±–æ—Ç–µ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–∞—É–∑–∞ 2 –º–∏–Ω.');
        return setTimeout(tick, 2 * 60 * 1000);
      }

      const urls = await getUrlsToIndex();
      if (urls.length === 0) {
        console.log('[Indexer] –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–∞—É–∑–∞ 10 –º–∏–Ω—É—Ç.');
        return setTimeout(tick, 10 * 60 * 1000);
      }

      const batch = urls.slice(0, 2);
      for (const url of batch) {
        if (shuttingDown) break;
        await processUrlForIndexing(url);
        await new Promise(r => setTimeout(r, 5000));
      }

      setTimeout(tick, 60 * 1000);
    } catch (err) {
      console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–µ, —Ä–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç:', err);
      setTimeout(tick, 5 * 60 * 1000);
    }
  }

  setTimeout(tick, 60 * 1000); // –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—Ç–∞
}

// ==================
// –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç
// ==================
function setupTelegramBot() {
  const handleSendMessageError = async (error, userId) => {
    if (error.response?.error_code === 403) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –û—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ.`);
      await updateUserField(userId, 'active', false);
    } else {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª—è ${userId}:`, error.response?.description || error.message);
    }
  };

  bot.use(async (ctx, next) => {
    const userId = ctx.from?.id;
    if (!userId) return next();
    try {
      ctx.state.user = await getUser(userId, ctx.from.first_name, ctx.from.username);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤ –º–∏–¥–ª–≤–∞—Ä–µ –¥–ª—è userId ${userId}:`, error);
    }
    return next();
  });

  const getBonusKeyboard = (user) => {
    const keyboard = [];
    if (!user.subscribed_bonus_used) {
      keyboard.push([{ text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!', callback_data: 'check_subscription' }]);
    }
    return { inline_keyboard: keyboard };
  };

  bot.action('check_subscription', async (ctx) => {
    try {
      const user = ctx.state.user || await getUser(ctx.from.id);
      if (user.subscribed_bonus_used) {
        return await ctx.answerCbQuery('–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —ç—Ç–æ—Ç –±–æ–Ω—É—Å. –°–ø–∞—Å–∏–±–æ!', { show_alert: true });
      }
      const channel = '@SCM_BLOG';
      if (await isSubscribed(ctx.from.id, channel)) {
        await setPremium(ctx.from.id, 30, 7);
        await updateUserField(ctx.from.id, 'subscribed_bonus_used', true);

        await ctx.editMessageText(
          'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: 7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus.\n\n–ù–∞–∂–º–∏—Ç–µ /menu, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç—É—Å.'
        );
      } else {
        await ctx.answerCbQuery('–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.', { show_alert: true });
        await ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${channel}, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/SCM_BLOG' }],
              [{ text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!', callback_data: 'check_subscription' }]
            ]
          }
        });
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –≤ check_subscription:', e);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
    }
  });

  bot.start(async (ctx) => {
    try {
      const user = ctx.state.user || await getUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
      const text = formatMenuMessage(user, ctx);
      await ctx.reply(text, { reply_markup: getBonusKeyboard(user) });
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', kb());
    } catch (e) { await handleSendMessageError(e, ctx.from.id); }
  });

  bot.hears(texts.menu, async (ctx) => {
    try {
      const user = ctx.state.user || await getUser(ctx.from.id);
      const text = formatMenuMessage(user, ctx);
      await ctx.reply(text, { reply_markup: getBonusKeyboard(user) });
    } catch (e) { await handleSendMessageError(e, ctx.from.id); }
  });

  // –ú–æ–∏ —Ç—Ä–µ–∫–∏ ‚Äî –ë–ï–ó –¥—É–±–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π (–Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º title/caption –≤ media group)
  bot.hears(texts.mytracks, async (ctx) => {
    try {
      const user = ctx.state.user || await getUser(ctx.from.id);
      let tracks = [];
      if (Array.isArray(user.tracks_today)) tracks = user.tracks_today;
      else if (typeof user.tracks_today === 'string') {
        try { tracks = JSON.parse(user.tracks_today); } catch { tracks = []; }
      }

      const validTracks = (tracks || []).filter(t => t && t.fileId);
      if (!validTracks.length) {
        return await ctx.reply(texts.noTracks || '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.');
      }

      for (let i = 0; i < validTracks.length; i += 5) {
        const chunk = validTracks.slice(i, i + 5);
        await ctx.replyWithMediaGroup(
          chunk.map(track => ({ type: 'audio', media: track.fileId }))
        );
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ /mytracks:', err);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤.');
    }
  });

  bot.hears(texts.help, async (ctx) => {
    try { await ctx.reply(texts.helpInfo, kb()); }
    catch (e) { await handleSendMessageError(e, ctx.from.id); }
  });

  bot.hears(texts.upgrade, async (ctx) => {
    try { await ctx.reply(texts.upgradeInfo.replace(/\*/g, '')); }
    catch (e) { await handleSendMessageError(e, ctx.from.id); }
  });

  bot.command('admin', async (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    try {
      const users = await getAllUsers(true);
      const totalUsers = users.length;
      const activeUsers = users.filter(u => u.active).length;
      const totalDownloads = users.reduce((sum, u) => sum + (u.total_downloads || 0), 0);
      const now = new Date();
      const activeToday = users.filter(u =>
        u.last_active && new Date(u.last_active).toDateString() === now.toDateString()
      ).length;

      const dashboardUrl = `${WEBHOOK_URL.replace(/\/$/, '')}/dashboard`;

      const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
   ‚Ä¢ –í—Å–µ–≥–æ: <i>${totalUsers}</i>
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å–µ–≥–æ: <i>${activeUsers}</i>
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <i>${activeToday}</i>

üì• <b>–ó–∞–≥—Ä—É–∑–∫–∏:</b>
   ‚Ä¢ –í—Å–µ–≥–æ: <i>${totalDownloads}</i>

‚öôÔ∏è <b>–û—á–µ—Ä–µ–¥—å:</b>
   ‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: <i>${downloadQueue.active}</i>
   ‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: <i>${downloadQueue.size}</i>

üîó <a href="${dashboardUrl}">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</a>`.trim();

      await ctx.replyWithHTML(message);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /admin:', e);
      try { await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.'); } catch {}
    }
  });

  bot.on('text', async (ctx) => {
    try {
      const url = extractUrl(ctx.message.text);
      if (url) {
        await enqueue(ctx, ctx.from.id, url);
      } else if (!Object.values(texts).includes(ctx.message.text)) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç SoundCloud.');
      }
    } catch (e) {
      await handleSendMessageError(e, ctx.from.id);
    }
  });
}

// =========== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===========
async function startApp() {
  try {
    // Redis
    const client = createClient({ url: process.env.REDIS_URL, socket: { connectTimeout: 10000 } });
    client.on('error', (err) => console.error('üî¥ –û—à–∏–±–∫–∞ Redis:', err));
    await client.connect();
    redisClient = client;
    console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á—ë–Ω');

    if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

    // –ê–¥–º–∏–Ω–∫–∞ (–≤—Å—ë –≤–Ω—É—Ç—Ä–∏ routes/admin.js)
    setupAdmin({
      app,
      bot,
      __dirname,
      ADMIN_ID,
      ADMIN_LOGIN,
      ADMIN_PASSWORD,
      SESSION_SECRET,
      STORAGE_CHANNEL_ID,
    });

    // –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç
    setupTelegramBot();

    // –ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    setInterval(() => resetDailyStats(), 24 * 3600 * 1000);
    setInterval(() => console.log(`[Monitor] –û—á–µ—Ä–µ–¥—å: ${downloadQueue.size} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, ${downloadQueue.active} –≤ —Ä–∞–±–æ—Ç–µ.`), 60 * 1000);
    setInterval(() => cleanupCache(cacheDir, 60), 30 * 60 * 1000);
    cleanupCache(cacheDir, 60);

    if (process.env.NODE_ENV === 'production') {
      // Rate limit —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–µ–±—Ö—É–∫; –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É trust proxy –≤–Ω—É—Ç—Ä–∏ –ª–∏–º–∏—Ç–µ—Ä–∞,
      // —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ –Ω–∞ Render (ERR_ERL_PERMISSIVE_TRUST_PROXY)
      const webhookLimiter = rateLimit({
        windowMs: 60 * 1000,
        max: 120,
        standardHeaders: true,
        legacyHeaders: false,
        validate: { trustProxy: false, xForwardedForHeader: false },
        keyGenerator: (req) => req.ip || req.headers['x-real-ip'] || 'unknown'
      });
      app.use(WEBHOOK_PATH, webhookLimiter);

      app.use(await bot.createWebhook({
        domain: WEBHOOK_URL,
        path: WEBHOOK_PATH,
      }));

      app.listen(PORT, () => console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}.`));
    } else {
      await bot.launch();
      console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long-polling.');
    }

    // –§–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    startIndexer().catch(err => console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å:", err));
    startNotifier().catch(err => console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:", err));

  } catch (err) {
    console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', err);
    process.exit(1);
  }
}

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
const stopBot = (signal) => {
  console.log(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
  try {
    if (bot.polling?.isRunning()) {
      bot.stop(signal);
    }
  } catch {}
  setTimeout(() => process.exit(0), 500);
};

process.once('SIGINT', () => stopBot('SIGINT'));
process.once('SIGTERM', () => stopBot('SIGTERM'));

startApp();

// —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
export { app, bot };
// —Ä–µ-—ç–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–æ–≤, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ –ª–æ–º–∞–ª–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, services/downloadManager.js)
export { texts } from './config/texts.js';