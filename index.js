const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const fs = require('fs');
const path = require('path');
const ytdl = require('youtube-dl-exec');
const { exec } = require('child_process');
const {
  getUser,
  updateUserField,
  incrementDownloads,
  setPremium,
  getAllUsers
} = require('./db');

// --- Google Drive API ---
const { google } = require('googleapis');

const SCOPES = ['https://www.googleapis.com/auth/drive.file'];
const KEYFILEPATH = path.join(__dirname, 'service-account.json');

const auth = new google.auth.GoogleAuth({
  keyFile: KEYFILEPATH,
  scopes: SCOPES,
});

const drive = google.drive({ version: 'v3', auth });

async function uploadBackup(filename, filepath) {
  try {
    const response = await drive.files.create({
      requestBody: {
        name: filename,
        parents: ['1FjRTVO4rLCsKdeIg452M4-1MjpmfuChG'], // –í–ê–ñ–ù–û: —Ç–≤–æ–π ID –ø–∞–ø–∫–∏ –Ω–∞ Google Drive
      },
      media: {
        body: fs.createReadStream(filepath),
      },
    });
    console.log('Backup uploaded, file ID:', response.data.id);
  } catch (error) {
    console.error('Failed to upload backup:', error);
  }
}

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const WEBHOOK_URL = 'https://soundcloud-telegram-bot.onrender.com/telegram';
const ADMIN_ID = 2018254756;

const app = express();
const bot = new Telegraf(BOT_TOKEN);

const cacheDir = path.join(__dirname, 'cache');
if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

// –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
setInterval(() => {
  const cutoff = Date.now() - 7 * 86400_000;
  fs.readdirSync(cacheDir).forEach(file => {
    const filePath = path.join(cacheDir, file);
    if (fs.statSync(filePath).mtimeMs < cutoff) fs.unlinkSync(filePath);
  });
}, 3600_000);

// --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Ä–∞–∑ –≤ 24 —á–∞—Å–∞ ---
setInterval(async () => {
  try {
    const src = path.join(__dirname, 'database.sqlite');
    if (!fs.existsSync(src)) {
      console.warn('‚ùó –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±—ç–∫–∞–ø–∞:', src);
      return;
    }

    const backupName = `backup_${Date.now()}.sqlite`;
    const backupPath = path.join(__dirname, backupName);

    fs.copyFileSync(src, backupPath);
    console.log('Backup created:', backupName);

    await uploadBackup(backupName, backupPath);

    fs.unlinkSync(backupPath);
  } catch (err) {
    console.error('Backup error:', err);
  }
}, 24 * 3600 * 1000); // –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞

// --- –¢–µ–∫—Å—Ç—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
const texts = {
  ru: {
    start: 'üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ —Å SoundCloud.',
    menu: 'üìã –ú–µ–Ω—é', upgrade: 'üîì –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç',
    mytracks: 'üéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏', help: '‚ÑπÔ∏è –ü–æ–º–æ—â—å',
    downloading: 'üéß –ó–∞–≥—Ä—É–∂–∞—é...', cached: 'üîÅ –ò–∑ –∫–µ—à–∞...',
    error: '‚ùå –û—à–∏–±–∫–∞', timeout: '‚è± –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ...', limitReached: 'üö´ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.',
    upgradeInfo:
      'üöÄ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤?\n\nüÜì Free ‚Äì 10 üü¢\nPlus ‚Äì 50 üéØ (59‚ÇΩ)\nPro ‚Äì 100 üí™ (119‚ÇΩ)\nUnlimited ‚Äì üíé (199‚ÇΩ)\n\nüëâ –î–æ–Ω–∞—Ç: https://boosty.to/anatoly_bone/donate\n‚úâÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∂–º–∏ ‚Äú–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É‚Äù',
    helpInfo: '‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∏—à—å mp3.\nüîì –†–∞—Å—à–∏—Ä–∏—Ç—å ‚Äî –æ–ø–ª–∞—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏.\nüéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüìã –ú–µ–Ω—é ‚Äî —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞.',
    chooseLang: 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
    backupError: '‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞',
    backupDone: '‚úÖ –ë—ç–∫–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω'
  },
  en: {
    start: 'üëã Send a SoundCloud track link.',
    menu: 'üìã Menu', upgrade: 'üîì Upgrade limit',
    mytracks: 'üéµ My tracks', help: '‚ÑπÔ∏è Help',
    downloading: 'üéß Downloading...', cached: 'üîÅ From cache...',
    error: '‚ùå Error', timeout: '‚è± Timeout...', limitReached: 'üö´ Limit reached.',
    upgradeInfo:
      'üöÄ Want more tracks?\n\nüÜì Free ‚Äì 10 üü¢\nPlus ‚Äì 50 üéØ (59‚ÇΩ)\nPro ‚Äì 100 üí™ (119‚ÇΩ)\nUnlimited ‚Äì üíé (199‚ÇΩ)\n\nüëâ Donate: https://boosty.to/anatoly_bone/donate\n‚úâÔ∏è After payment press ‚ÄúConfirm payment‚Äù',
    helpInfo: '‚ÑπÔ∏è Just send a SoundCloud link to get mp3.\nüîì Upgrade ‚Äî pay and confirm.\nüéµ My tracks ‚Äî list of today\'s downloads.\nüìã Menu ‚Äî change language.',
    chooseLang: 'üåê Choose language:',
    backupError: '‚ùå Backup error',
    backupDone: '‚úÖ Backup done'
  }
};

const kb = lang => Markup.keyboard([
  [texts[lang].menu, texts[lang].upgrade],
  [texts[lang].mytracks, texts[lang].help]
]).resize();

// --- –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
bot.start(ctx => {
  const user = getUser(
    ctx.from.id,
    ctx.from.username || '',
    ctx.from.first_name || ''
  );
  ctx.reply(texts[user.lang].start, kb(user.lang));
});

bot.hears([texts.ru.menu, texts.en.menu], ctx => {
  const u = getUser(ctx.from.id);
  ctx.reply(texts[u.lang].chooseLang, Markup.inlineKeyboard([
    Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru'),
    Markup.button.callback('üá¨üáß English', 'lang_en')
  ]));
});

bot.action(/lang_(\w+)/, ctx => {
  const lang = ctx.match[1];
  updateUserField(ctx.from.id, 'lang', lang);
  ctx.editMessageText(texts[lang].chooseLang + ' ‚úÖ');
  ctx.reply(texts[lang].start, kb(lang));
});

bot.hears([texts.ru.upgrade, texts.en.upgrade], ctx => {
  const u = getUser(ctx.from.id);
  ctx.reply(texts[u.lang].upgradeInfo);
});

bot.hears([texts.ru.help, texts.en.help], ctx => {
  const u = getUser(ctx.from.id);
  ctx.reply(texts[u.lang].helpInfo);
});

bot.hears([texts.ru.mytracks, texts.en.mytracks], ctx => {
  const u = getUser(ctx.from.id);
  const list = u.tracks_today?.split(',').filter(Boolean) || [];
  if (list.length === 0) return ctx.reply('–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.');
  const media = list.map(name => {
    const fp = path.join(cacheDir, `${name}.mp3`);
    return fs.existsSync(fp) ? { type: 'audio', media: { source: fp } } : null;
  }).filter(Boolean);
  for (let i = 0; i < media.length; i += 10) {
    ctx.replyWithMediaGroup(media.slice(i, i + 10));
  }
});

bot.command('testdb', ctx => {
  const user = getUser(ctx.from.id);
  if (user) {
    ctx.reply(`User ID: ${user.id}\nDownloads today: ${user.downloads_today}\nLimit: ${user.premium_limit}`);
  } else {
    ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ');
  }
});

bot.command('admin', ctx => {
  if (ctx.from.id !== ADMIN_ID) return;

  const users = getAllUsers();
  const files = fs.readdirSync(cacheDir);
  const totalSize = files.reduce((sum, file) => {
    const stats = fs.statSync(path.join(cacheDir, file));
    return sum + stats.size;
  }, 0);

  const free = users.filter(u => u.premium_limit === 10).length;
  const plus = users.filter(u => u.premium_limit === 50).length;
  const pro = users.filter(u => u.premium_limit === 100).length;
  const unlimited = users.filter(u => u.premium_limit >= 1000).length;
  const totalDownloads = users.reduce((sum, u) => sum + u.total_downloads, 0);

  const summary =
    `üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
    `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n` +
    `üì• –ó–∞–≥—Ä—É–∑–æ–∫: ${totalDownloads}\n` +
    `üìÅ –ö–µ—à: ${files.length} —Ñ–∞–π–ª–æ–≤, ${(totalSize / 1024 / 1024).toFixed(1)} MB\n\n` +
    `üîê –¢–∞—Ä–∏—Ñ—ã:\n` +
    `üÜì Free: ${free}\n` +
    `üéØ Plus: ${plus}\n` +
    `üí™ Pro: ${pro}\n` +
    `üíé Unlimited: ${unlimited}`;

  ctx.reply(summary);

  const btns = users.map(u => {
    const name = u.username ? '@' + u.username : u.id;
    const label = `${name} | ${u.downloads_today}/${u.premium_limit}`;
    return Markup.button.callback(label, `user_${u.id}`);
  });

  ctx.reply('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', Markup.inlineKeyboard(btns, { columns: 1 }));
});

bot.action(/user_(\d+)/, ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  const id = ctx.match[1];
  ctx.reply('üí≥ –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:', Markup.inlineKeyboard([
    Markup.button.callback('Plus (50)', `plan_${id}_50`),
    Markup.button.callback('Pro (100)', `plan_${id}_100`),
    Markup.button.callback('Unlimited (‚àû)', `plan_${id}_1000`)
  ]));
});

bot.action(/plan_(\d+)_(\d+)/, ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  const [_, id, lim] = ctx.match;
  setPremium(id, parseInt(lim));
  ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç: ${lim}`);
});

bot.command('backup', async ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  try {
    const src = path.join(__dirname, 'database.sqlite');
    const backupName = `backup_manual_${Date.now()}.sqlite`;
    const backupPath = path.join(__dirname, backupName);

    fs.copyFileSync(src, backupPath);
    await uploadBackup(backupName, backupPath);
    fs.unlinkSync(backupPath);

    ctx.reply(texts[getUser(ctx.from.id).lang].backupDone);
  } catch (err) {
    console.error('Manual backup error:', err);
    ctx.reply(texts[getUser(ctx.from.id).lang].backupError);
  }
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ SoundCloud ---
bot.on('text', async ctx => {
  const user = getUser(ctx.from.id);
  const lang = user.lang;
  const text = ctx.message.text.trim();

  if (!text.includes('soundcloud.com')) return;

  if (user.downloads_today >= user.premium_limit) {
    return ctx.reply(texts[lang].limitReached);
  }

  ctx.reply(texts[lang].downloading);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ youtube-dl
    const info = await ytdl(text, {
      dumpSingleJson: true,
      noWarnings: true,
      noCheckCertificates: true,
      preferFreeFormats: true,
      youtubeSkipDashManifest: true
    });

    if (!info || !info.title) {
      return ctx.reply(texts[lang].error);
    }

    const filename = info.title.replace(/[^\w\d]/g, '_');
    const filepath = path.join(cacheDir, filename + '.mp3');

    if (fs.existsSync(filepath)) {
      ctx.reply(texts[lang].cached);
      return ctx.replyWithAudio({ source: filepath });
    }

    await ytdl(text, {
      extractAudio: true,
      audioFormat: 'mp3',
      output: filepath,
      noWarnings: true,
      noCheckCertificates: true,
      preferFreeFormats: true,
      youtubeSkipDashManifest: true
    });

    incrementDownloads(ctx.from.id, filename);

    ctx.replyWithAudio({ source: filepath });
  } catch (err) {
    console.error('Download error:', err);
    ctx.reply(texts[lang].error);
  }
});

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ webhook ---
app.use(bot.webhookCallback('/telegram'));

app.get('/', (req, res) => {
  res.send('SoundCloud Telegram Bot is running');
});

bot.telegram.setWebhook(WEBHOOK_URL).then(() => {
  app.listen(process.env.PORT || 3000, () => {
    console.log('Server started');
  });
});