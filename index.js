// index.js
const { Telegraf, Markup } = require('telegraf');
const compression = require('compression');
const express = require('express');
const expressLayouts = require('express-ejs-layouts');
const session = require('express-session');
const ejs = require('ejs');
const fs = require('fs');
const path = require('path');
const ytdl = require('youtube-dl-exec');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });
const pgSession = require('connect-pg-simple')(session);
const { Pool } = require('pg');
const { Parser } = require('json2csv');
const playlistTracker = new Map();
const { supabase } = require('./db'); // —Ç–≤–æ–π supabase –∫–ª–∏–µ–Ω—Ç

const {
  createUser,
  getUser,
  updateUserField,
  incrementDownloads,
  setPremium,
  getAllUsers,
  resetDailyStats,
  addReview,
  saveTrackForUser,
  hasLeftReview,
  getLatestReviews,
  resetDailyLimitIfNeeded,
  getRegistrationsByDate,
  getDownloadsByDate,
  getActiveUsersByDate,
  getExpiringUsers,
  getReferralSourcesStats,
  markSubscribedBonusUsed,
  getUserActivityByDayHour,
  logUserActivity,
  getExpiringUsersCount,
  getExpiringUsersPaginated,
  getUserById
} = require('./db');

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = parseInt(process.env.ADMIN_ID, 10);
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const WEBHOOK_PATH = '/telegram';
const PORT = process.env.PORT || 3000;

if (!BOT_TOKEN || !ADMIN_ID || !process.env.ADMIN_LOGIN || !process.env.ADMIN_PASSWORD) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}
if (isNaN(ADMIN_ID)) {
  console.error('‚ùå ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
const app = express();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const cacheDir = path.join(__dirname, 'cache');
if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

// –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
setInterval(() => {
  const cutoff = Date.now() - 7 * 86400 * 1000;
  fs.readdir(cacheDir, (err, files) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞:', err);
      return;
    }
    files.forEach(file => {
      const filePath = path.join(cacheDir, file);
      fs.stat(filePath, (err, stats) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ stat —Ñ–∞–π–ª–∞:', err);
          return;
        }
        if (stats.mtimeMs < cutoff) {
          fs.unlink(filePath, err => {
            if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–µ—à–∞:', err);
            else console.log(`üóë –£–¥–∞–ª—ë–Ω –∫–µ—à: ${file}`);
          });
        }
      });
    });
  });
}, 3600 * 1000);

// –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
setInterval(() => resetDailyStats(), 24 * 3600 * 1000);

const MAX_CONCURRENT_DOWNLOADS = 5;
let globalQueue = [];
let activeDownloadsCount = 0;

const texts = {
  start: 'üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ —Å SoundCloud.',
  menu: 'üìã –ú–µ–Ω—é',
  upgrade: 'üîì –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç',
  mytracks: 'üéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏',
  help: '‚ÑπÔ∏è –ü–æ–º–æ—â—å',
  downloading: 'üéß –ó–∞–≥—Ä—É–∂–∞—é...',
  error: '‚ùå –û—à–∏–±–∫–∞',
  noTracks: '–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.',
  limitReached: `üö´ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚ùå

üîî –ü–æ–ª—É—á–∏ 7 –¥–Ω–µ–π Plus!
–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @BAZAproject –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å.`,
  upgradeInfo: `üöÄ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤?

üÜì Free ‚Äî 10 üü¢
Plus ‚Äî 50 üéØ (59‚ÇΩ)
Pro ‚Äî 100 üí™ (119‚ÇΩ)
Unlimited ‚Äî üíé (199‚ÇΩ)

üëâ –î–æ–Ω–∞—Ç: https://boosty.to/anatoly_bone/donate
‚úâÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏: @anatolybone

üë´ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ 1 –¥–µ–Ω—å —Ç–∞—Ä–∏—Ñ–∞ Plus –∑–∞ –∫–∞–∂–¥–æ–≥–æ.`,
  helpInfo: '‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∏—à—å mp3.\nüîì –†–∞—Å—à–∏—Ä–∏—Ç—å ‚Äî –æ–ø–ª–∞—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏.\nüéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüìã –ú–µ–Ω—é ‚Äî —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞.',
  queuePosition: pos => `‚è≥ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (#${pos})`,
  adminCommands: '\n\nüìã –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:\n/admin ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/testdb ‚Äî –º–æ–∏ –¥–∞–Ω–Ω—ã–µ\n/backup ‚Äî —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è\n/reviews ‚Äî –æ—Ç–∑—ã–≤—ã'
};

const kb = () =>
  Markup.keyboard([
    [texts.menu, texts.upgrade],
    [texts.mytracks, texts.help]
  ]).resize();

const isSubscribed = async userId => {
  try {
    const res = await bot.telegram.getChatMember('@BAZAproject', userId);
    return ['member', 'creator', 'administrator'].includes(res.status);
  } catch {
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏–∏ processTrackByUrl, addToGlobalQueue, processNextInQueue, enqueue –∏ —Ç.–ø. ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
// (–¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –∫–æ–ø–∏—Ä—É—é, –Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å)

// ------------------- Express app setup -----------------------

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(compression());

app.use(session({
  store: new pgSession({ pool, tableName: 'session', createTableIfMissing: true }),
  secret: process.env.SESSION_SECRET || 'secret',
  resave: false,
  saveUninitialized: false,
  cookie: { maxAge: 30 * 24 * 60 * 60 * 1000 }
}));

// EJS + Layouts
app.use(expressLayouts);
app.set('layout', 'layout'); // views/layout.ejs
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function requireAuth(req, res, next) {
  if (req.session.authenticated && req.session.userId) {
    try {
      const user = await getUserById(req.session.userId);
      if (user) {
        req.user = user;
        return next();
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
    }
  }
  res.redirect('/admin');
}

// –ú–∞—Ä—à—Ä—É—Ç—ã

app.get('/admin', (req, res) => {
  res.render('login', { error: null });
});

app.post('/admin', async (req, res) => {
  const { username, password } = req.body;

  if (username === process.env.ADMIN_LOGIN && password === process.env.ADMIN_PASSWORD) {
    req.session.userId = ADMIN_ID;
    req.session.authenticated = true;
    res.redirect('/dashboard');
  } else {
    res.render('login', { error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
  }
});

app.get('/broadcast', requireAuth, (req, res) => {
  res.render('broadcast-form', { user: req.user });
});

app.post('/broadcast', requireAuth, upload.single('audio'), async (req, res) => {
  const { message } = req.body;
  const audio = req.file;

  if (!message && !audio) {
    return res.status(400).send('–°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }

  const users = await getAllUsers();

  let success = 0, error = 0;
  for (const u of users) {
    try {
      if (audio) {
        await bot.telegram.sendAudio(u.id, {
          source: fs.createReadStream(audio.path),
          filename: audio.originalname
        }, { caption: message || '' });
      } else {
        await bot.telegram.sendMessage(u.id, message);
      }
      success++;
    } catch (e) {
      error++;
      try {
        await pool.query('UPDATE users SET active = FALSE WHERE id = $1', [u.id]);
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${u.id}:`, err);
      }
    }
    await new Promise(r => setTimeout(r, 100));
  }

  if (audio) {
    fs.unlink(audio.path, err => {
      if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∞—É–¥–∏–æ —Ä–∞—Å—Å—ã–ª–∫–∏:', err);
    });
  }

  res.send(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}, –æ—à–∏–±–æ–∫: ${error}`);
});

app.get('/dashboard', requireAuth, async (req, res) => {
  try {
    const showInactive = req.query.showInactive === 'true';
    const expiringLimit = req.query.expiringLimit ? parseInt(req.query.expiringLimit, 10) : 10;
    const expiringOffset = req.query.expiringOffset ? parseInt(req.query.expiringOffset, 10) : 0;

    const expiringSoon = await getExpiringUsers();
    const users = await getAllUsers(showInactive);

    const stats = {
      totalUsers: users.length,
      totalDownloads: users.reduce((sum, u) => sum + (u.total_downloads || 0), 0),
      free: users.filter(u => u.premium_limit === 10).length,
      plus: users.filter(u => u.premium_limit === 50).length,
      pro: users.filter(u => u.premium_limit === 100).length,
      unlimited: users.filter(u => u.premium_limit >= 1000).length,
      registrationsByDate: await getRegistrationsByDate(),
      downloadsByDate: await getDownloadsByDate(),
      activeByDate: await getActiveUsersByDate()
    };

    const referralStats = await getReferralSourcesStats();
    const activityByDayHour = await getUserActivityByDayHour();

    res.render('dashboard', {
      users,
      stats,
      expiringSoon,
      showInactive,
      referralStats,
      activityByDayHour,
      expiringLimit,
      expiringOffset,
      user: req.user,
      page: 'dashboard'
    });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ dashboard:', e);
    res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

app.get('/', (req, res) => {
  res.redirect('/dashboard');
});

app.get('/export', requireAuth, async (req, res) => {
  try {
    const users = await getAllUsers(true);

    const fields = ['id', 'username', 'first_name', 'total_downloads', 'premium_limit', 'created_at', 'last_active'];
    const opts = { fields };
    const parser = new Parser(opts);
    const csv = parser.parse(users);

    res.header('Content-Type', 'text/csv');
    res.attachment('users.csv');
    return res.send(csv);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV:', err);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

app.get('/expiring-users', requireAuth, async (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const perPage = parseInt(req.query.perPage) || 10;

  try {
    const total = await getExpiringUsersCount();
    const users = await getExpiringUsersPaginated(perPage, (page - 1) * perPage);
    const totalPages = Math.ceil(total / perPage);

    res.render('expiring-users', {
      users,
      page,
      perPage,
      totalPages,
      user: req.user
    });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ expiring-users:', e);
    res.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

app.post('/set-tariff', express.urlencoded({ extended: true }), requireAuth, async (req, res) => {
  const { userId, limit } = req.body;

  if (!userId || !limit) {
    return res.status(400).send('Missing parameters');
  }

  // –õ–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ (–Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞, –¥–æ–ø–æ–ª–Ω–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

  res.redirect('/dashboard');
});

// Webhook –¥–ª—è Telegram –±–æ—Ç–∞
app.post(WEBHOOK_PATH, express.json(), (req, res) => {
  res.sendStatus(200);
  bot.handleUpdate(req.body).catch(err => console.error('–û—à–∏–±–∫–∞ –≤ handleUpdate:', err));
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  if (WEBHOOK_URL) {
    bot.telegram.setWebhook(`${WEBHOOK_URL}${WEBHOOK_PATH}`).then(() => {
      console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }).catch(console.error);
  } else {
    bot.launch();
  }
});