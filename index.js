const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const fs = require('fs');
const path = require('path');
const ytdl = require('youtube-dl-exec');
const {
  createUser, getUser, updateUserField, incrementDownloads,
  setPremium, getAllUsers, addReview, saveTrackForUser, resetDailyStats
} = require('./db');

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = parseInt(process.env.ADMIN_ID, 10);
const WEBHOOK_URL = 'https://soundcloud-telegram-bot.onrender.com/telegram';

const app = express();
const bot = new Telegraf(BOT_TOKEN);
const cacheDir = path.join(__dirname, 'cache');
const REVIEWS_PATH = path.join(__dirname, 'reviews.json');
if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

// –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Ä–∞–∑ –≤ —á–∞—Å
setInterval(() => {
  const cutoff = Date.now() - 7 * 86400 * 1000;
  fs.readdirSync(cacheDir).forEach(file => {
    const fp = path.join(cacheDir, file);
    if (fs.statSync(fp).mtimeMs < cutoff) fs.unlinkSync(fp);
  });
}, 3600 * 1000);

// –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
setInterval(async () => {
  try {
    await resetDailyStats();
    console.log('‚úÖ Daily stats reset');
  } catch (err) {
    console.error('‚ùå Failed to reset daily stats:', err);
  }
}, 24 * 3600 * 1000);

// –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
const queues = {};

const texts = {
  ru: {
    start: 'üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ —Å SoundCloud.',
    menu: 'üìã –ú–µ–Ω—é', upgrade: 'üîì –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç',
    mytracks: 'üéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏', help: '‚ÑπÔ∏è –ü–æ–º–æ—â—å',
    downloading: 'üéß –ó–∞–≥—Ä—É–∂–∞—é...', cached: 'üîÅ –ò–∑ –∫–µ—à–∞...',
    error: '‚ùå –û—à–∏–±–∫–∞', timeout: '‚è± –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ...', limitReached: 'üö´ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.',
    upgradeInfo:
      'üöÄ –•–æ—á–µ—à—å –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤?\n\nüÜì Free ‚Äì 10 üü¢\nPlus ‚Äì 50 üéØ (59‚ÇΩ)\nPro ‚Äì 100 üí™ (119‚ÇΩ)\nUnlimited ‚Äì üíé (199‚ÇΩ)\n\nüëâ –î–æ–Ω–∞—Ç: https://boosty.to/anatoly_bone/donate\n‚úâÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏: @anatolybone',
    helpInfo: '‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∏—à—å mp3.\nüîì –†–∞—Å—à–∏—Ä–∏—Ç—å ‚Äî –æ–ø–ª–∞—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏.\nüéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüìã –ú–µ–Ω—é ‚Äî —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞.',
    chooseLang: 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
    reviewAsk: '‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Ç–∞—Ä–∏—Ñ Plus –Ω–∞ 30 –¥–Ω–µ–π.',
    reviewThanks: '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –¢–µ–±–µ –≤—ã–¥–∞–Ω —Ç–∞—Ä–∏—Ñ Plus (50 —Ç—Ä–µ–∫–æ–≤/–¥–µ–Ω—å) –Ω–∞ 30 –¥–Ω–µ–π.',
    noTracks: '–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.',
    queuePosition: pos => `‚è≥ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (#${pos})`,
    adminCommands:
      '\n\nüìã –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:\n' +
      '/admin ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç–∞—Ä–∏—Ñ—ã\n' +
      '/testdb ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ\n' +
      '/backup ‚Äî —Ä—É—á–Ω–æ–π –±—ç–∫–∞–ø –±–∞–∑—ã\n' +
      '/reviews ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã'
  },
  en: {
    start: 'üëã Send a SoundCloud track link.',
    menu: 'üìã Menu', upgrade: 'üîì Upgrade limit',
    mytracks: 'üéµ My tracks', help: '‚ÑπÔ∏è Help',
    downloading: 'üéß Downloading...', cached: 'üîÅ From cache...',
    error: '‚ùå Error', timeout: '‚è± Timeout...', limitReached: 'üö´ Limit reached.',
    upgradeInfo:
      'üöÄ Want more tracks?\n\nüÜì Free ‚Äì 10 üü¢\nPlus ‚Äì 50 üéØ (59‚ÇΩ)\nPro ‚Äì 100 üí™ (119‚ÇΩ)\nUnlimited ‚Äì üíé (199‚ÇΩ)\n\nüëâ Donate: https://boosty.to/anatoly_bone/donate\n‚úâÔ∏è After payment message: @anatolybone',
    helpInfo: '‚ÑπÔ∏è Just send a SoundCloud link to get mp3.\nüîì Upgrade ‚Äî pay and confirm.\nüéµ My tracks ‚Äî list of today\'s downloads.\nüìã Menu ‚Äî change language.',
    chooseLang: 'üåê Choose language:',
    reviewAsk: '‚úçÔ∏è Write your review about the bot. You will receive Plus plan (50 tracks/day) for 30 days.',
    reviewThanks: '‚úÖ Thank you! You‚Äôve got Plus (50 tracks/day) for 30 days.',
    noTracks: 'No tracks today.',
    queuePosition: pos => `‚è≥ Added to queue (#${pos})`,
    adminCommands:
      '\n\nüìã Admin commands:\n' +
      '/admin ‚Äî stats & plans\n' +
      '/testdb ‚Äî check your data\n' +
      '/backup ‚Äî manual DB backup\n' +
      '/reviews ‚Äî view reviews'
  }
};

const kb = lang =>
  Markup.keyboard([
    [texts[lang].menu, texts[lang].upgrade],
    [texts[lang].mytracks, texts[lang].help],
    ['‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤']
  ]).resize();

const getLang = u => u?.lang || 'ru';

// /start
bot.start(async ctx => {
  await createUser(ctx.from.id, ctx.from.username, ctx.from.first_name);
  const u = await getUser(ctx.from.id);
  ctx.reply(texts[getLang(u)].start, kb(getLang(u)));
});

// –ú–µ–Ω—é
bot.hears([texts.ru.menu, texts.en.menu], async ctx => {
  const u = await getUser(ctx.from.id);
  ctx.reply(texts[getLang(u)].chooseLang, Markup.inlineKeyboard([
    Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru'),
    Markup.button.callback('üá¨üáß English', 'lang_en')
  ]));
});

bot.action(/lang_(\w+)/, async ctx => {
  const lang = ctx.match[1];
  await updateUserField(ctx.from.id, 'lang', lang);
  ctx.editMessageText(texts[lang].chooseLang + ' ‚úÖ');
  ctx.reply(texts[lang].start, kb(lang));
});

// –û—Ç–∑—ã–≤
const reviewMode = new Set();
bot.hears('‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', async ctx => {
  const u = await getUser(ctx.from.id);
  ctx.reply(texts[getLang(u)].reviewAsk);
  reviewMode.add(ctx.from.id);
});

bot.on('text', async ctx => {
  const text = ctx.message.text;
  const userId = ctx.from.id;

  if (reviewMode.has(userId)) {
    reviewMode.delete(userId);
    const user = await getUser(userId);
    const lang = getLang(user);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç–∑—ã–≤
    let alreadyLeft = false;
    if (fs.existsSync(REVIEWS_PATH)) {
      const existing = JSON.parse(fs.readFileSync(REVIEWS_PATH, 'utf8'));
      alreadyLeft = existing.some(r => r.userId === userId);
    }

    if (alreadyLeft) {
      return ctx.reply('‚ùå –¢—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ —Ä–∞–Ω–µ–µ.');
    }

    await addReview(userId, text);
    await setPremium(userId, 50, 30);
    return ctx.reply(texts[lang].reviewThanks, kb(lang));
  }

  if (!text.includes('soundcloud.com')) return;

  const u = await getUser(ctx.from.id);
  const lang = getLang(u);
  if (u.downloads_today >= u.premium_limit) return ctx.reply(texts[lang].limitReached);

  if (!queues[ctx.from.id]) queues[ctx.from.id] = [];
  const pos = queues[ctx.from.id].length + 1;
  ctx.reply(texts[lang].queuePosition(pos));
  queues[ctx.from.id].push(() => processTrack(ctx, text));
  if (queues[ctx.from.id].length === 1) processNext(ctx.from.id);
});

async function processNext(userId) {
  if (!queues[userId]?.length) return;
  const job = queues[userId][0];
  await job();
  queues[userId].shift();
  if (queues[userId].length > 0) processNext(userId);
}

async function processTrack(ctx, url) {
  const u = await getUser(ctx.from.id);
  const lang = getLang(u);
  try {
    await ctx.reply(texts[lang].downloading);
    const info = await ytdl(url, { dumpSingleJson: true });
    const name = (info.title || 'track').replace(/[^\w\d]/g, '_').slice(0, 50);
    const fp = path.join(cacheDir, `${name}.mp3`);
    if (!fs.existsSync(fp)) {
      await ytdl(url, { extractAudio: true, audioFormat: 'mp3', output: fp });
    }
    await incrementDownloads(ctx.from.id, name);
    await saveTrackForUser(ctx.from.id, name);
    await ctx.replyWithAudio({ source: fs.createReadStream(fp), filename: `${name}.mp3` });
  } catch (e) {
    console.error('‚ùå', e);
    ctx.reply(texts[lang].error);
  }
}

// –ú–æ–∏ —Ç—Ä–µ–∫–∏
bot.hears([texts.ru.mytracks, texts.en.mytracks], async ctx => {
  const u = await getUser(ctx.from.id);
  const list = u.tracks_today?.split(',').filter(Boolean) || [];
  if (!list.length) return ctx.reply(texts[getLang(u)].noTracks);
  const media = list.map(name => {
    const fp = path.join(cacheDir, `${name}.mp3`);
    return fs.existsSync(fp) ? { type: 'audio', media: { source: fp } } : null;
  }).filter(Boolean);
  for (let i = 0; i < media.length; i += 10) {
    await ctx.replyWithMediaGroup(media.slice(i, i + 10));
  }
});

// –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
bot.command('admin', async ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  const users = await getAllUsers();
  const files = fs.readdirSync(cacheDir);
  const totalSize = files.reduce((s, f) => s + fs.statSync(path.join(cacheDir, f)).size, 0);
  const stats = {
    free: users.filter(u => u.premium_limit === 10).length,
    plus: users.filter(u => u.premium_limit === 50).length,
    pro: users.filter(u => u.premium_limit === 100).length,
    unlimited: users.filter(u => u.premium_limit >= 1000).length
  };
  const downloads = users.reduce((s, u) => s + u.total_downloads, 0);
  const u = await getUser(ctx.from.id);
  const lang = getLang(u);
  const summary = `üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}\nüì• –ó–∞–≥—Ä—É–∑–æ–∫: ${downloads}\nüìÅ –ö–µ—à: ${files.length} —Ñ–∞–π–ª–æ–≤, ${(totalSize / 1024 / 1024).toFixed(1)} MB\n\nüÜì Free: ${stats.free}\nüéØ Plus: ${stats.plus}\nüí™ Pro: ${stats.pro}\nüíé Unlimited: ${stats.unlimited}`;
  ctx.reply(summary + texts[lang].adminCommands);
});

bot.command('testdb', async ctx => {
  const u = await getUser(ctx.from.id);
  if (!u) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  ctx.reply(`ID: ${u.id}\n–°–µ–≥–æ–¥–Ω—è: ${u.downloads_today}/${u.premium_limit}`);
});

bot.command('backup', async ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  try {
    const fileName = `backup_${Date.now()}.json`;
    const users = await getAllUsers();
    fs.writeFileSync(path.join(__dirname, fileName), JSON.stringify(users, null, 2));
    ctx.reply('‚úÖ –ë—ç–∫–∞–ø –≥–æ—Ç–æ–≤');
  } catch (e) {
    console.error(e);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ç–∫–∞–ø–µ');
  }
});

bot.command('reviews', async ctx => {
  if (ctx.from.id !== ADMIN_ID) return;
  if (!fs.existsSync(REVIEWS_PATH)) return ctx.reply('‚ùå –û—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.');
  try {
    const data = JSON.parse(fs.readFileSync(REVIEWS_PATH, 'utf8') || '[]');
    if (!data.length) return ctx.reply('üì≠ –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.');

    for (let i = 0; i < data.length; i += 5) {
      const chunk = data.slice(i, i + 5)
        .map(r => `üßë‚Äçüí¨ ID: ${r.userId}\n${r.text}\nüïí ${new Date(r.time).toLocaleString()}`)
        .join('\n\n');
      await ctx.reply(chunk);
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤', e);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤.');
  }
});

// Webhook
app.use(bot.webhookCallback('/telegram'));
app.get('/', (_, res) => res.send('‚úÖ OK'));

bot.telegram.setWebhook(WEBHOOK_URL)
  .then(() => console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'))
  .catch(err => console.error('‚ùå Webhook error', err));

app.listen(process.env.PORT || 3000, () => console.log('üöÄ Server running'));